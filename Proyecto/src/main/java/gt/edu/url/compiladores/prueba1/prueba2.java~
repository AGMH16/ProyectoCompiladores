// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/prueba.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class prueba2 {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\1\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\1\26\1\27\2\30\1\31"+
    "\7\30\1\32\2\30\1\33\1\30\1\34\10\30\1\35"+
    "\1\0\1\36\1\37\1\40\1\0\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\2\52\1\53"+
    "\1\54\1\55\1\56\1\57\1\52\1\60\1\61\1\62"+
    "\1\63\1\64\3\52\1\65\1\66\1\67\1\70\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\20\3\22\1\23\1\24\1\25"+
    "\20\26\1\27\1\3\1\30\1\20\1\31\1\3\1\0"+
    "\1\32\1\0\1\2\1\33\3\22\27\26\1\34\2\26"+
    "\3\0\2\2\1\33\2\22\37\26\1\15\1\0\1\2"+
    "\2\22\21\26\1\35\3\26\1\36\1\37\3\26\1\40"+
    "\1\41\1\42\2\26\2\22\2\26\1\43\2\26\1\44"+
    "\7\26\1\45\1\46\12\26\1\47\1\22\1\26\1\50"+
    "\5\26\1\51\6\26\1\47\5\26\1\47\1\22\1\52"+
    "\11\26\1\53\2\26\1\47\5\26\1\22\6\26\1\54"+
    "\1\55\1\56\1\57\1\60\1\26\1\61\1\62\1\26"+
    "\1\63\7\26\1\64\5\26\1\65\1\66\3\26\1\67"+
    "\1\32\1\64\3\26\1\70\1\71";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\71\0\344\0\u011d\0\u0156"+
    "\0\71\0\344\0\u018f\0\u01c8\0\71\0\u0201\0\u023a\0\71"+
    "\0\71\0\u0273\0\253\0\u02ac\0\u02e5\0\u031e\0\u0357\0\71"+
    "\0\71\0\71\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad"+
    "\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675"+
    "\0\u06ae\0\u06e7\0\71\0\u0720\0\71\0\71\0\71\0\71"+
    "\0\u0759\0\71\0\u0792\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af"+
    "\0\u08e8\0\u0921\0\u095a\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f"+
    "\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07"+
    "\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\71\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u0eeb\0\u179a\0\u17d3\0\u180c\0\u1845"+
    "\0\u187e\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d"+
    "\0\u1a46\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u0390"+
    "\0\u1bd5\0\u1c0e\0\u1c47\0\u0390\0\u0390\0\u1c80\0\u1cb9\0\u1cf2"+
    "\0\u0390\0\u0390\0\u0390\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f"+
    "\0\u1e48\0\u0390\0\u1e81\0\u1eba\0\u0390\0\u1ef3\0\u1f2c\0\u1f65"+
    "\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u0390\0\u0390\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283"+
    "\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9\0\u2412\0\u244b"+
    "\0\u2484\0\u0390\0\u24bd\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da"+
    "\0\u2613\0\u264c\0\u2685\0\u26be\0\u26f7\0\u2730\0\u02e5\0\u2769"+
    "\0\u0390\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886\0\u28bf\0\u28f8"+
    "\0\u2931\0\u296a\0\u0390\0\u29a3\0\u29dc\0\u0390\0\u2a15\0\u2a4e"+
    "\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4\0\u2bdd\0\u2c16"+
    "\0\u2c4f\0\u2c88\0\u0390\0\u0390\0\u0390\0\u0390\0\u0390\0\u2cc1"+
    "\0\u0390\0\u0390\0\u2cfa\0\u02e5\0\u2d33\0\u2d6c\0\u2da5\0\u2dde"+
    "\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6"+
    "\0\u2fdf\0\u0390\0\u0390\0\u3018\0\u3051\0\u308a\0\u0390\0\u0390"+
    "\0\u0390\0\u30c3\0\u30fc\0\u3135\0\u0390\0\u0390";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\4\25\1\26\1\27"+
    "\1\25\1\30\1\31\1\32\1\2\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\33\1\41\1\42\1\33\1\43"+
    "\1\44\1\45\1\33\1\46\1\47\1\50\1\51\1\33"+
    "\1\52\1\33\1\53\1\54\1\55\72\0\2\3\1\0"+
    "\1\3\110\0\1\56\70\0\1\57\54\0\1\60\75\0"+
    "\1\61\67\0\1\62\7\0\1\57\61\0\1\62\6\0"+
    "\1\57\57\0\1\63\3\0\1\64\4\0\1\57\64\0"+
    "\1\17\20\0\25\65\26\0\2\56\70\0\2\56\63\0"+
    "\1\66\5\0\7\25\3\0\26\25\23\0\1\66\5\0"+
    "\7\25\3\0\5\25\1\67\20\25\23\0\1\66\5\0"+
    "\7\25\3\0\20\25\1\70\5\25\23\0\1\71\5\0"+
    "\7\33\3\0\26\33\23\0\1\71\5\0\7\33\3\0"+
    "\16\33\1\72\7\33\23\0\1\71\5\0\7\33\3\0"+
    "\1\33\1\73\11\33\1\74\2\33\1\75\7\33\23\0"+
    "\1\71\5\0\7\33\3\0\5\33\1\76\20\33\23\0"+
    "\1\71\5\0\7\33\3\0\13\33\1\77\1\33\1\100"+
    "\3\33\1\101\4\33\23\0\1\71\5\0\7\33\3\0"+
    "\1\33\1\102\24\33\23\0\1\71\5\0\7\33\3\0"+
    "\1\33\1\103\24\33\23\0\1\71\5\0\7\33\3\0"+
    "\15\33\1\104\10\33\23\0\1\71\5\0\7\33\3\0"+
    "\5\33\1\105\10\33\1\106\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\107\3\33\1\110\14\33\23\0"+
    "\1\71\5\0\7\33\3\0\23\33\1\111\2\33\23\0"+
    "\1\71\5\0\7\33\3\0\1\33\1\112\16\33\1\113"+
    "\2\33\1\114\2\33\23\0\1\71\5\0\7\33\3\0"+
    "\1\33\1\115\3\33\1\116\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\117\3\33\1\120\14\33\23\0"+
    "\1\71\5\0\7\33\3\0\1\33\1\121\24\33\23\0"+
    "\1\71\5\0\7\33\3\0\5\33\1\122\20\33\72\0"+
    "\1\60\21\0\1\123\50\0\13\124\1\125\55\124\2\64"+
    "\1\126\1\64\1\127\64\64\20\0\1\130\5\0\7\65"+
    "\3\0\26\65\23\0\1\66\5\0\7\25\54\0\1\66"+
    "\5\0\7\25\3\0\22\25\1\131\3\25\23\0\1\66"+
    "\5\0\7\25\3\0\11\25\1\132\14\25\23\0\1\71"+
    "\20\0\25\33\23\0\1\71\5\0\7\33\3\0\13\33"+
    "\1\133\12\33\23\0\1\71\5\0\7\33\3\0\4\33"+
    "\1\134\21\33\23\0\1\71\5\0\7\33\3\0\1\33"+
    "\1\135\24\33\23\0\1\71\5\0\7\33\3\0\15\33"+
    "\1\136\3\33\1\137\4\33\23\0\1\71\5\0\7\33"+
    "\3\0\3\33\1\140\15\33\1\141\2\33\1\142\1\33"+
    "\23\0\1\71\5\0\7\33\3\0\11\33\1\143\14\33"+
    "\23\0\1\71\5\0\7\33\3\0\22\33\1\144\3\33"+
    "\23\0\1\71\5\0\7\33\3\0\3\33\1\145\16\33"+
    "\1\146\3\33\23\0\1\71\5\0\7\33\3\0\13\33"+
    "\1\147\12\33\23\0\1\71\5\0\7\33\3\0\3\33"+
    "\1\150\22\33\23\0\1\71\5\0\7\33\3\0\3\33"+
    "\1\151\15\33\1\152\4\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\153\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\7\33\1\154\16\33\23\0\1\71\5\0\7\33"+
    "\3\0\22\33\1\155\3\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\156\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\13\33\1\157\12\33\23\0\1\71\5\0\7\33"+
    "\3\0\20\33\1\160\5\33\23\0\1\71\5\0\7\33"+
    "\3\0\11\33\1\161\4\33\1\162\7\33\23\0\1\71"+
    "\5\0\7\33\3\0\2\33\1\163\23\33\23\0\1\71"+
    "\5\0\7\33\3\0\11\33\1\164\14\33\23\0\1\71"+
    "\5\0\7\33\3\0\1\33\1\165\24\33\23\0\1\71"+
    "\5\0\7\33\3\0\15\33\1\166\10\33\23\0\1\71"+
    "\5\0\7\33\3\0\15\33\1\167\10\33\23\0\1\71"+
    "\5\0\7\33\3\0\15\33\1\170\10\33\23\0\1\71"+
    "\5\0\7\33\3\0\20\33\1\171\5\33\15\0\1\172"+
    "\5\0\1\123\50\0\13\124\1\173\70\124\1\173\3\124"+
    "\1\174\51\124\2\0\1\126\106\0\1\130\20\0\25\65"+
    "\23\0\1\66\5\0\7\25\3\0\16\25\1\175\7\25"+
    "\23\0\1\66\5\0\7\25\3\0\15\25\1\176\10\25"+
    "\23\0\1\71\5\0\7\33\3\0\5\33\1\177\20\33"+
    "\23\0\1\71\5\0\7\33\3\0\5\33\1\200\20\33"+
    "\23\0\1\71\5\0\7\33\3\0\21\33\1\201\4\33"+
    "\23\0\1\71\5\0\7\33\3\0\21\33\1\202\4\33"+
    "\23\0\1\71\5\0\7\33\3\0\5\33\1\117\20\33"+
    "\23\0\1\71\5\0\7\33\3\0\20\33\1\203\5\33"+
    "\23\0\1\71\5\0\7\33\3\0\4\33\1\204\15\33"+
    "\1\205\3\33\23\0\1\71\5\0\7\33\3\0\16\33"+
    "\1\206\7\33\23\0\1\71\5\0\7\33\3\0\14\33"+
    "\1\207\11\33\23\0\1\71\5\0\7\33\3\0\5\33"+
    "\1\210\10\33\1\211\7\33\23\0\1\71\5\0\7\33"+
    "\3\0\20\33\1\212\5\33\23\0\1\71\5\0\7\33"+
    "\3\0\1\33\1\213\24\33\23\0\1\71\5\0\7\33"+
    "\3\0\21\33\1\214\4\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\215\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\13\33\1\216\4\33\1\203\5\33\23\0\1\71"+
    "\5\0\7\33\3\0\22\33\1\217\3\33\23\0\1\71"+
    "\5\0\7\33\3\0\20\33\1\220\5\33\23\0\1\71"+
    "\5\0\7\33\3\0\1\33\1\221\24\33\23\0\1\71"+
    "\5\0\7\33\3\0\16\33\1\222\7\33\23\0\1\71"+
    "\5\0\7\33\3\0\15\33\1\223\10\33\23\0\1\71"+
    "\5\0\7\33\3\0\16\33\1\224\7\33\23\0\1\71"+
    "\5\0\7\33\3\0\1\33\1\225\24\33\23\0\1\71"+
    "\5\0\7\33\3\0\24\33\1\226\1\33\23\0\1\71"+
    "\5\0\7\33\3\0\17\33\1\227\6\33\23\0\1\71"+
    "\5\0\7\33\3\0\13\33\1\230\12\33\23\0\1\71"+
    "\5\0\7\33\3\0\25\33\1\231\23\0\1\71\5\0"+
    "\7\33\3\0\13\33\1\232\12\33\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\231\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\233\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\7\33\1\234\16\33\23\0\1\71\5\0"+
    "\7\33\3\0\4\33\1\235\21\33\44\0\25\65\3\0"+
    "\13\124\1\173\3\124\1\126\51\124\20\0\1\66\5\0"+
    "\7\25\3\0\4\25\1\236\21\25\23\0\1\66\5\0"+
    "\7\25\3\0\3\25\1\237\22\25\23\0\1\71\5\0"+
    "\7\33\3\0\1\33\1\240\24\33\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\241\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\242\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\22\33\1\243\3\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\244\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\245\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\246\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\13\33\1\247\12\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\250\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\251\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\252\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\253\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\22\33\1\254\3\33\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\255\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\256\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\23\33\1\257\2\33\23\0\1\71\5\0"+
    "\7\33\3\0\1\33\1\260\24\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\261\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\4\33\1\262\21\33\23\0\1\71\5\0"+
    "\7\33\3\0\22\33\1\263\3\33\23\0\1\71\5\0"+
    "\7\33\3\0\1\33\1\264\24\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\265\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\266\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\267\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\1\33\1\270\24\33\23\0\1\66\5\0"+
    "\7\25\3\0\16\25\1\271\7\25\23\0\1\66\5\0"+
    "\7\25\3\0\11\25\1\272\14\25\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\273\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\1\33\1\274\24\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\275\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\14\33\1\276\11\33\23\0\1\71\5\0"+
    "\7\33\3\0\23\33\1\277\2\33\23\0\1\71\5\0"+
    "\7\33\3\0\24\33\1\300\1\33\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\301\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\302\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\3\33\1\303\22\33\23\0\1\71\5\0"+
    "\7\33\3\0\2\33\1\304\23\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\305\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\306\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\307\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\11\33\1\310\14\33\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\311\7\33\23\0\1\71\5\0"+
    "\7\33\3\0\20\33\1\312\5\33\23\0\1\71\5\0"+
    "\7\33\3\0\4\33\1\313\21\33\23\0\1\71\5\0"+
    "\7\33\3\0\5\33\1\314\20\33\23\0\1\71\5\0"+
    "\7\33\3\0\3\33\1\313\22\33\23\0\1\71\5\0"+
    "\7\33\3\0\15\33\1\315\10\33\23\0\1\71\5\0"+
    "\7\33\3\0\4\33\1\316\21\33\23\0\1\66\5\0"+
    "\7\25\3\0\21\25\1\317\4\25\23\0\1\66\5\0"+
    "\7\25\3\0\17\25\1\320\6\25\23\0\1\71\5\0"+
    "\7\33\3\0\16\33\1\321\7\33\23\0\1\71\5\0"+
    "\1\322\6\33\3\0\26\33\23\0\1\71\5\0\7\33"+
    "\3\0\23\33\1\323\2\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\324\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\3\33\1\325\22\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\326\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\1\33\1\327\24\33\23\0\1\71\5\0\7\33"+
    "\3\0\5\33\1\330\20\33\23\0\1\71\5\0\7\33"+
    "\3\0\11\33\1\331\14\33\23\0\1\71\5\0\7\33"+
    "\3\0\3\33\1\332\22\33\23\0\1\71\5\0\7\33"+
    "\3\0\20\33\1\333\5\33\23\0\1\71\5\0\7\33"+
    "\3\0\3\33\1\334\22\33\23\0\1\71\5\0\7\33"+
    "\3\0\22\33\1\335\3\33\23\0\1\71\5\0\7\33"+
    "\3\0\21\33\1\336\4\33\23\0\1\71\5\0\7\33"+
    "\3\0\1\33\1\337\24\33\23\0\1\71\5\0\7\33"+
    "\3\0\1\33\1\340\14\33\1\340\7\33\23\0\1\71"+
    "\5\0\7\33\3\0\4\33\1\341\21\33\23\0\1\71"+
    "\5\0\7\33\3\0\22\33\1\342\3\33\23\0\1\71"+
    "\5\0\7\33\3\0\5\33\1\343\20\33\23\0\1\66"+
    "\5\0\7\25\3\0\1\25\1\344\24\25\23\0\1\71"+
    "\5\0\1\33\1\345\1\33\1\346\2\33\1\347\3\0"+
    "\26\33\23\0\1\71\5\0\7\33\3\0\3\33\1\350"+
    "\22\33\23\0\1\71\5\0\7\33\3\0\15\33\1\351"+
    "\10\33\23\0\1\71\5\0\7\33\3\0\22\33\1\352"+
    "\3\33\23\0\1\71\5\0\7\33\3\0\20\33\1\353"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\20\33\1\354"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\21\33\1\355"+
    "\4\33\23\0\1\71\5\0\7\33\3\0\20\33\1\356"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\16\33\1\357"+
    "\7\33\23\0\1\71\5\0\7\33\3\0\11\33\1\360"+
    "\14\33\23\0\1\71\5\0\7\33\3\0\14\33\1\166"+
    "\11\33\23\0\1\71\5\0\7\33\3\0\21\33\1\361"+
    "\4\33\23\0\1\71\5\0\7\33\3\0\21\33\1\362"+
    "\4\33\23\0\1\71\5\0\7\33\3\0\1\33\1\363"+
    "\24\33\23\0\1\71\5\0\7\33\3\0\5\33\1\231"+
    "\20\33\23\0\1\71\5\0\7\33\3\0\20\33\1\214"+
    "\5\33\23\0\1\66\5\0\7\25\3\0\13\25\1\364"+
    "\12\25\23\0\1\71\5\0\7\33\3\0\16\33\1\365"+
    "\7\33\23\0\1\71\5\0\7\33\3\0\15\33\1\366"+
    "\10\33\23\0\1\71\5\0\7\33\3\0\5\33\1\367"+
    "\20\33\23\0\1\71\5\0\7\33\3\0\22\33\1\370"+
    "\3\33\23\0\1\71\5\0\7\33\3\0\22\33\1\371"+
    "\3\33\23\0\1\71\5\0\7\33\3\0\16\33\1\372"+
    "\7\33\23\0\1\71\5\0\7\33\3\0\1\33\1\373"+
    "\24\33\23\0\1\71\5\0\7\33\3\0\4\33\1\374"+
    "\21\33\23\0\1\71\5\0\7\33\3\0\13\33\1\375"+
    "\12\33\23\0\1\71\5\0\7\33\3\0\22\33\1\376"+
    "\3\33\23\0\1\71\5\0\7\33\3\0\1\33\1\377"+
    "\24\33\23\0\1\71\5\0\7\33\3\0\16\33\1\u0100"+
    "\7\33\23\0\1\71\5\0\7\33\3\0\1\33\1\u0101"+
    "\24\33\23\0\1\71\5\0\7\33\3\0\20\33\1\u0102"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\20\33\1\u0103"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\5\33\1\u0104"+
    "\20\33\23\0\1\71\5\0\7\33\3\0\5\33\1\u0105"+
    "\20\33\23\0\1\71\5\0\7\33\3\0\5\33\1\u0106"+
    "\20\33\23\0\1\71\5\0\7\33\3\0\13\33\1\231"+
    "\12\33\23\0\1\71\5\0\7\33\3\0\20\33\1\u0107"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\20\33\1\u0108"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\21\33\1\u0109"+
    "\4\33\23\0\1\71\5\0\7\33\3\0\1\33\1\u010a"+
    "\24\33\23\0\1\71\5\0\7\33\3\0\20\33\1\u010b"+
    "\5\33\23\0\1\71\5\0\7\33\3\0\15\33\1\u010c"+
    "\10\33\23\0\1\71\5\0\7\33\3\0\16\33\1\u010d"+
    "\7\33\23\0\1\71\5\0\7\33\3\0\16\33\1\u010e"+
    "\7\33\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12654];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\3\1\1\11"+
    "\2\1\2\11\6\1\3\11\20\1\1\11\1\1\4\11"+
    "\1\0\1\11\1\0\37\1\3\0\1\11\44\1\1\0"+
    "\223\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  prueba2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 58: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 59: break;
          case 3:
            { lexeme=yytext(); return Op_logico;
            }
            // fall through
          case 60: break;
          case 4:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 61: break;
          case 5:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 62: break;
          case 6:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 63: break;
          case 7:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 64: break;
          case 8:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 65: break;
          case 9:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 66: break;
          case 10:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 67: break;
          case 11:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 68: break;
          case 12:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 69: break;
          case 13:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 70: break;
          case 14:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 71: break;
          case 15:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 72: break;
          case 16:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 73: break;
          case 17:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 74: break;
          case 18:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 75: break;
          case 19:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 76: break;
          case 20:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 77: break;
          case 21:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 78: break;
          case 22:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 79: break;
          case 23:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 80: break;
          case 24:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 81: break;
          case 25:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 82: break;
          case 26:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 83: break;
          case 27:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 84: break;
          case 28:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 85: break;
          case 29:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 86: break;
          case 30:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 87: break;
          case 31:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 88: break;
          case 32:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 89: break;
          case 33:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 90: break;
          case 34:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 91: break;
          case 35:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 92: break;
          case 36:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 93: break;
          case 37:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 94: break;
          case 38:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 95: break;
          case 39:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 96: break;
          case 40:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 97: break;
          case 41:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 98: break;
          case 42:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 99: break;
          case 43:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 100: break;
          case 44:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 101: break;
          case 45:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 102: break;
          case 46:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 103: break;
          case 47:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 104: break;
          case 48:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 105: break;
          case 49:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 106: break;
          case 50:
            { lexeme=yytext(); return T_Disponible;
            }
            // fall through
          case 107: break;
          case 51:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 108: break;
          case 52:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 109: break;
          case 53:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 110: break;
          case 54:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 111: break;
          case 55:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 112: break;
          case 56:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 113: break;
          case 57:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
