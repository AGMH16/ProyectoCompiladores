// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexicocup.flex

package gt.edu.url.compiladores.prueba1;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\0\1\7\1\31"+
    "\1\32\1\33\1\34\1\35\3\33\1\36\3\33\1\37"+
    "\1\40\1\41\1\42\1\33\1\43\1\33\1\44\6\33"+
    "\1\45\1\0\1\46\1\47\1\50\1\0\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\2\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\62\1\70\1\71"+
    "\1\72\1\73\1\74\1\62\1\75\1\76\1\77\1\100"+
    "\1\101\1\102\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\2\1\5"+
    "\1\2\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\3\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\1\20\27\1\30\1\2\1\31\2\0"+
    "\1\32\1\2\1\0\1\33\3\0\4\2\1\34\1\35"+
    "\1\36\1\16\2\2\2\0\3\2\1\0\1\37\1\40"+
    "\2\2\7\23\1\35\2\23\2\0\2\2\30\27\1\41"+
    "\2\27\4\2\2\33\3\0\2\2\2\0\11\2\1\0"+
    "\2\2\1\42\1\43\2\2\7\23\3\2\37\27\3\2"+
    "\4\0\12\2\1\0\3\43\7\23\3\2\21\27\1\44"+
    "\3\27\1\45\1\2\4\27\1\46\1\47\2\27\2\0"+
    "\4\2\2\43\5\23\1\50\2\23\2\27\1\51\10\27"+
    "\1\52\1\53\13\27\2\0\1\43\1\2\3\23\2\2"+
    "\7\23\1\27\1\54\3\27\1\55\15\27\3\0\1\56"+
    "\2\23\4\0\6\23\1\57\6\27\1\60\2\27\1\61"+
    "\5\27\2\0\1\23\4\0\6\23\5\27\1\62\1\63"+
    "\1\64\1\27\1\65\1\66\1\27\2\0\1\23\4\0"+
    "\5\23\1\67\7\27\6\0\4\23\4\27\1\70\1\71"+
    "\1\27\5\0\2\23\2\27\1\72\1\73\3\0\2\23"+
    "\3\0\2\23\1\0\1\74\1\0\2\23\2\0\1\23"+
    "\1\75\10\23\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\206\0\311\0\u010c\0\u014f\0\u0192"+
    "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u01d5\0\u02e1\0\u0324\0\u0367"+
    "\0\u0324\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u0324\0\u0324\0\u04b6"+
    "\0\u04f9\0\u053c\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce"+
    "\0\u0711\0\u0754\0\u0797\0\u0324\0\u07da\0\u081d\0\u0860\0\u08a3"+
    "\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2\0\u0a35\0\u0a78\0\u0abb"+
    "\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3"+
    "\0\u0c90\0\u0d16\0\u0d59\0\u0d16\0\u0d9c\0\u0ddf\0\u0e22\0\u0e65"+
    "\0\u0ea8\0\u0eeb\0\u0f2e\0\u07da\0\u0f71\0\u0fb4\0\u07da\0\u07da"+
    "\0\u07da\0\u0ff7\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189"+
    "\0\u11cc\0\u120f\0\u0d16\0\u0d16\0\u1252\0\u1295\0\u12d8\0\u131b"+
    "\0\u135e\0\u13a1\0\u13e4\0\u1427\0\u146a\0\u05c2\0\u14ad\0\u14f0"+
    "\0\u1533\0\u081d\0\u1576\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5"+
    "\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd"+
    "\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5"+
    "\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d"+
    "\0\u1d50\0\u1d93\0\u1dd6\0\103\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2"+
    "\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa"+
    "\0\u213d\0\103\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u2312\0\u23db\0\u241e\0\u2461\0\u24a4"+
    "\0\u24e7\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc"+
    "\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4"+
    "\0\u2917\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec"+
    "\0\u2b2f\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u1e19"+
    "\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1"+
    "\0\u3134\0\u0d59\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6"+
    "\0\u3309\0\u334c\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de"+
    "\0\u3521\0\u3564\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6"+
    "\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"+
    "\0\u3951\0\u3994\0\u39d7\0\u3a1a\0\u3a5d\0\u0860\0\u3aa0\0\u3ae3"+
    "\0\u3b26\0\u0860\0\u0860\0\u3b69\0\u3bac\0\u3bef\0\u3c32\0\u0860"+
    "\0\u0860\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3283"+
    "\0\u32c6\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99"+
    "\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u0860\0\u412b\0\u416e"+
    "\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u42bd\0\u4300\0\u0860\0\u0860"+
    "\0\u4343\0\u4386\0\u43c9\0\u440c\0\u444f\0\u4492\0\u44d5\0\u4518"+
    "\0\u455b\0\u459e\0\u45e1\0\u4624\0\u4667\0\u46aa\0\u3e4a\0\u46ed"+
    "\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c\0\u487f\0\u48c2\0\u4905"+
    "\0\u3fdc\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54\0\u4a97\0\u4ada"+
    "\0\u0860\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c\0\u4caf"+
    "\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84\0\u4ec7"+
    "\0\u46aa\0\u05c2\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059"+
    "\0\u509c\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u0860\0\u522e"+
    "\0\u5271\0\u52b4\0\u52f7\0\u533a\0\u537d\0\u0860\0\u53c0\0\u5403"+
    "\0\u0860\0\u5446\0\u5489\0\u54cc\0\u550f\0\u5552\0\u5595\0\u55d8"+
    "\0\u561b\0\u565e\0\u56a1\0\u56e4\0\u5727\0\u576a\0\u57ad\0\u57f0"+
    "\0\u5833\0\u5876\0\u58b9\0\u58fc\0\u593f\0\u5982\0\u59c5\0\u5a08"+
    "\0\u0860\0\u0860\0\u0860\0\u5a4b\0\u0860\0\u0860\0\u5a8e\0\u5ad1"+
    "\0\u5b14\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9"+
    "\0\u5d2c\0\u5d6f\0\u5db2\0\u05c2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe"+
    "\0\u5f01\0\u5f44\0\u5f87\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6"+
    "\0\u6119\0\u615c\0\u619f\0\u61e2\0\u6225\0\u6268\0\u62ab\0\u62ee"+
    "\0\u6331\0\u0860\0\u0860\0\u6374\0\u63b7\0\u63fa\0\u643d\0\u6480"+
    "\0\u64c3\0\u6506\0\u6549\0\u658c\0\u65cf\0\u0860\0\u0860\0\u6612"+
    "\0\u6655\0\u6698\0\u66db\0\u671e\0\u6761\0\u67a4\0\u67e7\0\u682a"+
    "\0\u686d\0\u68b0\0\103\0\u68f3\0\u6936\0\u6979\0\u69bc\0\u69ff"+
    "\0\u6a42\0\103\0\u6a85\0\u6ac8\0\u6b0b\0\u6b4e\0\u6b91\0\u6bd4"+
    "\0\u6c17\0\u6c5a\0\u05c2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\34\1\36\1\37"+
    "\1\40\1\41\1\42\2\34\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\47\1\55"+
    "\1\56\1\47\1\57\1\60\1\61\1\47\1\62\1\63"+
    "\1\64\1\65\1\47\1\66\3\47\1\67\1\70\1\71"+
    "\104\0\2\3\1\0\1\3\77\0\1\3\1\4\1\0"+
    "\1\3\103\0\1\72\1\0\1\73\2\72\2\0\6\72"+
    "\3\0\3\72\1\74\14\75\4\72\27\0\3\72\6\76"+
    "\1\77\5\76\1\0\3\76\1\100\40\76\1\101\1\76"+
    "\1\102\17\76\14\10\1\72\34\10\27\103\3\10\5\0"+
    "\1\104\1\0\1\105\2\104\2\106\6\104\3\0\3\104"+
    "\1\107\14\75\4\104\27\0\3\104\5\0\1\104\1\0"+
    "\1\105\1\104\1\110\2\106\6\104\3\0\4\104\14\75"+
    "\4\104\27\0\3\104\12\0\1\106\3\0\1\106\1\0"+
    "\1\106\4\0\2\106\16\0\1\106\32\0\1\106\1\0"+
    "\1\106\12\0\2\106\2\0\1\106\1\0\1\106\4\0"+
    "\2\106\16\0\2\106\31\0\1\106\1\0\1\106\5\0"+
    "\1\104\1\0\1\105\2\104\2\106\1\104\1\111\4\104"+
    "\3\0\3\104\1\107\14\75\4\104\27\0\3\104\5\0"+
    "\1\72\1\0\1\73\2\72\2\106\2\72\1\104\1\72"+
    "\1\104\1\72\3\0\2\104\2\72\14\75\2\104\2\72"+
    "\27\0\1\104\1\72\1\104\5\0\1\104\1\0\1\105"+
    "\2\104\2\106\3\104\1\111\2\104\1\0\2\112\3\104"+
    "\1\107\14\75\4\104\27\0\3\104\5\0\1\72\1\0"+
    "\1\73\1\104\1\72\2\0\1\113\1\104\1\72\1\104"+
    "\1\72\1\114\3\0\3\72\1\107\14\75\2\72\1\104"+
    "\1\72\27\0\3\72\16\0\1\115\1\0\1\116\1\0"+
    "\1\117\2\120\24\0\27\121\21\0\1\115\1\0\1\116"+
    "\1\0\3\25\24\0\27\121\21\0\1\115\1\0\1\122"+
    "\1\0\3\25\24\0\27\121\10\0\1\72\1\0\1\73"+
    "\2\72\2\0\6\72\3\0\3\72\1\123\14\75\4\72"+
    "\27\0\3\72\5\0\1\72\1\0\1\73\2\72\2\0"+
    "\6\72\3\0\3\72\1\124\14\75\4\72\27\0\3\72"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\7\34\1\130\4\34\3\125\30\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\16\34\1\131\11\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\30\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\16\34\1\132"+
    "\11\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\7\34\1\133\20\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\1\34\1\134\26\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\5\34\1\135\22\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\12\34\1\136\1\34\3\125\30\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\1\34\1\137\16\34\1\140\7\34\3\125\5\0"+
    "\1\72\1\0\1\73\2\72\2\106\2\72\1\104\1\72"+
    "\1\104\1\72\3\0\2\104\2\72\14\75\1\104\3\72"+
    "\27\0\1\104\1\72\1\104\5\0\1\104\1\0\1\105"+
    "\2\104\2\106\6\104\3\0\4\104\14\75\4\104\27\0"+
    "\3\104\5\0\1\72\1\0\1\141\2\72\2\0\6\72"+
    "\3\0\4\72\14\75\3\72\1\142\27\143\1\142\1\72"+
    "\1\142\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\30\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\16\47\1\146\11\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\1\47\1\147\11\47\1\150\2\47\1\151\11\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\5\47\1\152\22\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\13\47\1\153"+
    "\1\47\1\154\3\47\1\155\6\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\1\47"+
    "\1\156\7\47\1\157\16\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\1\47\1\160"+
    "\26\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\15\47\1\161\12\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\5\47\1\162\10\47\1\163\11\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\5\47"+
    "\1\164\3\47\1\165\16\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\23\47\1\166"+
    "\4\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\1\47\1\167\16\47\1\170\2\47"+
    "\1\171\4\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\1\47\1\172\3\47\1\173"+
    "\22\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\5\47\1\174\3\47\1\175\16\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\1\47\1\176\26\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\5\47"+
    "\1\177\22\47\1\106\1\0\1\106\5\0\1\72\1\0"+
    "\1\141\2\72\2\106\2\72\1\104\1\72\1\104\1\72"+
    "\3\0\2\104\2\72\14\75\2\104\1\72\1\142\27\143"+
    "\1\200\1\72\1\200\5\0\1\104\1\0\1\105\2\104"+
    "\2\106\6\104\3\0\4\104\14\75\4\104\27\0\1\104"+
    "\1\110\1\104\5\0\1\72\1\0\1\73\2\72\2\0"+
    "\6\72\3\0\4\72\14\75\4\72\27\0\3\72\14\73"+
    "\1\72\14\73\14\201\36\73\7\0\1\202\12\0\3\203"+
    "\4\0\14\75\3\0\30\75\3\0\6\76\1\204\102\76"+
    "\1\205\102\76\1\204\11\76\1\206\70\76\1\204\55\76"+
    "\1\207\24\76\1\204\46\76\1\210\25\76\5\10\1\211"+
    "\1\10\1\105\4\211\1\104\5\211\3\212\4\211\14\103"+
    "\3\211\30\103\3\211\14\105\1\104\66\105\5\0\1\106"+
    "\1\0\1\144\12\106\3\0\4\106\14\0\4\106\27\0"+
    "\3\106\16\0\1\115\1\0\1\213\1\0\3\112\24\0"+
    "\27\121\3\0\5\214\1\215\1\214\1\216\2\215\2\217"+
    "\6\215\3\214\4\215\14\220\4\215\27\214\3\215\2\221"+
    "\1\222\1\221\1\223\1\114\1\221\1\224\2\114\2\221"+
    "\6\114\3\221\4\114\14\225\4\114\27\221\3\114\17\0"+
    "\1\226\2\0\1\227\2\230\75\0\1\226\1\213\1\0"+
    "\1\231\2\232\74\0\1\115\1\0\1\213\1\0\1\117"+
    "\2\120\24\0\27\121\21\0\1\115\1\0\1\213\2\0"+
    "\2\120\24\0\27\121\25\0\3\233\4\0\14\121\3\0"+
    "\30\121\22\0\1\226\1\213\1\0\1\234\2\232\63\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\0\4\125"+
    "\14\0\4\125\27\0\3\125\14\126\1\125\66\126\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\4\125\27\0\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\3\34\1\136\10\34"+
    "\3\125\30\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\16\34\1\235"+
    "\11\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\2\34\1\236\25\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\23\34\1\237\4\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\26\34\1\240\1\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\7\34\1\241\20\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\20\34\1\242\7\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\11\34\1\243\16\34\3\125\14\141\1\72\14\141\14\244"+
    "\4\141\27\245\3\141\5\0\1\106\1\0\1\144\12\106"+
    "\3\246\4\106\14\143\3\106\30\143\3\106\14\144\1\106"+
    "\66\144\7\0\1\144\12\0\3\145\24\0\27\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\13\47\1\247\14\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\4\47\1\250"+
    "\23\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\1\47\1\251\26\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\15\47\1\252\3\47\1\253\6\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\21\47"+
    "\1\254\2\47\1\255\3\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\11\47\1\256"+
    "\16\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\22\47\1\257\5\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\3\47\1\260\16\47\1\261\5\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\13\47"+
    "\1\262\14\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\15\47\1\263\12\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\3\47\1\264\24\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\3\47\1\265"+
    "\15\47\1\266\6\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\5\47\1\267\22\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\7\47\1\270\20\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\22\47"+
    "\1\271\5\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\5\47\1\272\22\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\13\47\1\273\14\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\20\47\1\274"+
    "\7\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\11\47\1\275\4\47\1\276\11\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\2\47\1\277\25\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\11\47"+
    "\1\300\16\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\1\47\1\301\26\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\15\47\1\302\12\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\15\47\1\303"+
    "\12\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\15\47\1\304\12\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\20\47\1\305\7\47\1\106\1\0\1\106\5\0\1\104"+
    "\1\0\1\105\2\104\2\106\6\104\3\0\4\104\14\75"+
    "\3\104\1\200\27\143\1\200\1\104\1\200\7\73\1\306"+
    "\4\73\1\72\5\73\3\307\4\73\14\201\3\73\30\201"+
    "\3\73\14\202\1\0\66\202\7\0\1\202\12\0\3\203"+
    "\4\0\14\75\44\0\1\310\74\0\6\76\1\204\12\76"+
    "\1\311\67\76\1\204\60\76\1\312\21\76\1\204\44\76"+
    "\1\313\27\76\5\10\1\211\1\10\1\105\4\211\1\104"+
    "\5\211\3\10\4\211\14\10\4\211\27\103\3\211\5\10"+
    "\1\211\1\10\1\105\4\211\1\104\5\211\3\212\4\211"+
    "\14\10\4\211\27\103\3\211\17\0\1\226\1\213\1\0"+
    "\1\227\2\230\56\0\14\214\1\314\73\214\1\215\1\214"+
    "\1\216\2\215\2\217\1\315\5\215\3\214\4\215\14\220"+
    "\4\215\27\214\3\215\14\216\1\315\66\216\5\214\1\217"+
    "\1\214\1\316\4\217\1\317\5\217\3\214\4\217\14\214"+
    "\4\217\27\214\3\217\7\214\1\320\4\214\1\314\5\214"+
    "\3\321\4\214\14\220\3\214\30\220\3\214\2\221\1\222"+
    "\1\221\1\223\76\221\2\0\1\222\100\0\2\224\1\322"+
    "\1\224\1\323\7\224\1\114\14\224\14\324\36\224\2\221"+
    "\1\222\1\221\1\223\2\221\1\325\12\221\3\326\4\221"+
    "\14\225\3\221\30\225\3\221\23\0\2\230\100\0\1\327"+
    "\102\0\3\230\100\0\1\330\2\331\100\0\1\332\2\232"+
    "\100\0\3\233\24\0\27\121\10\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\13\34"+
    "\1\333\14\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\13\34\1\334"+
    "\14\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\1\34\1\335\26\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\6\34\1\336\5\34\3\125\30\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\1\34\1\337\26\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\5\34\1\340\22\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\15\34\1\341\12\34\3\125\7\141\1\10\4\141"+
    "\1\72\5\141\3\342\4\141\14\244\3\141\1\244\27\245"+
    "\10\141\1\343\1\141\1\105\4\343\1\104\5\343\3\344"+
    "\4\343\14\245\3\343\30\245\3\343\5\0\1\106\1\0"+
    "\1\144\12\106\3\246\4\106\14\0\4\106\27\143\3\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\5\47"+
    "\1\345\22\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\5\47\1\346\22\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\21\47\1\347\6\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\21\47\1\350"+
    "\6\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\5\47\1\174\22\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\4\47\1\351\15\47\1\352\5\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\16\47"+
    "\1\353\11\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\14\47\1\354\13\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\5\47\1\355\10\47\1\356\11\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\20\47\1\357\7\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\1\47\1\360\26\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\21\47\1\361\6\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\21\47"+
    "\1\362\6\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\5\47\1\363\22\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\13\47\1\364\14\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\22\47\1\365"+
    "\5\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\20\47\1\366\7\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\1\47\1\367\26\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\16\47\1\370\11\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\15\47\1\371\12\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\16\47"+
    "\1\372\11\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\1\47\1\373\26\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\24\47\1\374\3\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\17\47\1\375"+
    "\2\47\1\376\5\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\13\47\1\377\14\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\27\47\1\373\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\13\47\1\u0100"+
    "\14\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\16\47\1\373\11\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\16\47\1\u0101\11\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\7\47\1\u0102\20\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\4\47\1\u0103\23\47\1\106\1\0\1\106"+
    "\14\306\1\72\66\306\7\73\1\306\4\73\1\72\5\73"+
    "\3\307\4\73\14\201\36\73\6\76\1\204\11\76\1\100"+
    "\40\76\1\101\1\76\1\102\25\76\1\204\61\76\1\u0104"+
    "\20\76\1\204\63\76\1\u0105\10\76\14\214\1\314\4\214"+
    "\1\222\66\214\1\215\1\214\1\216\2\215\2\217\1\315"+
    "\4\215\1\104\3\214\4\215\14\220\4\215\27\214\3\215"+
    "\14\316\1\317\66\316\5\214\1\217\1\214\1\316\4\217"+
    "\1\317\4\217\1\106\3\214\4\217\14\214\4\217\27\214"+
    "\3\217\14\320\1\314\66\320\7\214\1\320\4\214\1\314"+
    "\5\214\3\321\4\214\14\220\36\214\2\73\1\322\11\73"+
    "\1\72\14\73\14\201\36\73\2\224\1\322\1\224\1\323"+
    "\2\224\1\u0106\4\224\1\114\5\224\3\u0107\4\224\14\324"+
    "\3\224\30\324\3\224\2\325\1\202\1\325\1\202\7\325"+
    "\1\221\66\325\2\221\1\222\1\221\1\223\2\221\1\325"+
    "\12\221\3\326\4\221\14\225\36\221\22\0\1\u0108\102\0"+
    "\1\u0109\2\331\100\0\1\u010a\2\331\100\0\1\u010b\2\232"+
    "\63\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\7\34\1\u010c\3\34\1\u010d\3\125\30\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\5\34\1\u010e\22\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\13\34\1\u010f\14\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\5\34\1\u0110\22\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\20\34\1\u0111\7\34\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\15\34"+
    "\1\u0112\12\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\3\34\1\u0113"+
    "\24\34\3\125\7\141\1\10\4\141\1\72\5\141\3\342"+
    "\4\141\14\244\4\141\27\245\10\141\1\343\1\141\1\105"+
    "\4\343\1\104\5\343\3\141\4\343\14\244\4\343\27\245"+
    "\3\343\5\141\1\343\1\141\1\105\4\343\1\104\5\343"+
    "\3\344\4\343\14\244\4\343\27\245\3\343\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\1\47\1\u0114\26\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\15\47\1\u0115\12\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\5\47"+
    "\1\u0116\22\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\22\47\1\u0117\5\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\5\47\1\373\22\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\20\47\1\u0118"+
    "\7\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\13\47\1\u0119\14\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\11\47\1\u011a\16\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\20\47\1\u011b\7\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\15\47\1\u011c\12\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\11\47"+
    "\1\u011d\16\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\22\47\1\u011e\5\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\16\47\1\u011f\11\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\11\47\1\u0120"+
    "\16\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\20\47\1\373\7\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\23\47\1\u0121\4\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\1\47\1\u0122\26\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\20\47\1\u0123\7\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\4\47"+
    "\1\u0124\23\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\22\47\1\u0125\5\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\1\47\1\u0126\26\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\11\47\1\u0127"+
    "\16\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\5\47\1\u0128\22\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\11\47\1\u0129\16\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\5\47\1\u012a\22\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\1\47\1\u012b\26\47\1\106\1\0\1\106"+
    "\6\76\1\204\46\76\1\u012c\33\76\1\204\64\76\1\u012d"+
    "\7\76\2\u0106\1\306\1\u0106\1\306\7\u0106\1\114\66\u0106"+
    "\2\224\1\322\1\224\1\323\2\224\1\u0106\4\224\1\114"+
    "\5\224\3\u0107\4\224\14\324\36\224\22\0\1\u012e\2\331"+
    "\100\0\1\u012f\2\232\63\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\23\34\1\u0130"+
    "\4\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\5\34\1\u0131\22\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\5\34\1\u0132\6\34\3\125\30\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\6\34\1\37\5\34\3\125\30\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\15\34\1\u0111\12\34\3\125\5\0\1\u0133"+
    "\1\0\1\u0134\12\u0133\3\127\4\u0133\3\34\1\u0135\1\34"+
    "\1\u0136\1\u0137\1\u0138\4\34\3\u0133\1\u0139\27\34\3\u0133"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\22\34\1\u013a\5\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\11\34\1\u013b\16\34\3\125\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\15\47\1\u013c\12\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\1\47\1\u013d\26\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\20\47"+
    "\1\u013e\7\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\23\47\1\u013f\4\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\24\47\1\264\3\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\15\47\1\u0140"+
    "\12\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\16\47\1\u0141\11\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\3\47\1\u0142\24\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\2\47\1\u0143\25\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\11\47\1\u0144\16\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\11\47"+
    "\1\u0145\16\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\15\47\1\u0146\12\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\11\47\1\u0147\16\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\16\47\1\u0148"+
    "\11\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\20\47\1\u0149\7\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\4\47\1\u014a\23\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\5\47\1\u014b\22\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\7\47\1\u014c\20\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\3\47"+
    "\1\u014a\24\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\15\47\1\u014d\12\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\4\47\1\u014e\23\47\1\106\1\0\1\106\6\76"+
    "\1\204\62\76\1\u014f\17\76\1\204\61\76\1\u0150\12\76"+
    "\22\0\1\u0151\2\331\63\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\14\34\1\u0152"+
    "\13\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\25\34\1\u0153\2\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\7\34\1\u0154\20\34\3\125"+
    "\5\0\1\u0133\1\0\1\u0134\12\u0133\3\0\4\u0133\3\0"+
    "\1\u0155\1\0\1\u0156\1\u0157\1\u0158\4\0\4\u0133\27\0"+
    "\3\u0133\14\u0134\1\u0133\66\u0134\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\16\34"+
    "\1\u0159\11\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\7\34\1\u015a"+
    "\20\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\1\34\1\u015b\26\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\5\34\1\u015c\22\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\5\34\1\u015d\22\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\17\34\1\u015e\10\34\3\125\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\16\47\1\u015f\11\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\1\u0160\13\47\3\0\30\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\23\47\1\u0161"+
    "\4\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\3\47\1\u0162\24\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\1\47\1\u0163\26\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\5\47\1\u0164\22\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\11\47\1\u0165\16\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\3\47"+
    "\1\302\24\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\20\47\1\u0166\7\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\3\47\1\u0167\24\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\22\47\1\u0168"+
    "\5\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\21\47\1\u0169\6\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\1\47\1\u016a\26\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\1\47\1\u016b\14\47"+
    "\1\u016c\11\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\4\47\1\u016d\23\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\11\47\1\u0126\16\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\22\47\1\351"+
    "\5\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\5\47\1\u016e\22\47\1\106\1\0"+
    "\1\106\6\76\1\204\52\76\1\u016f\27\76\1\204\42\76"+
    "\1\u0170\31\76\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\22\34\1\u0152\5\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\23\34\1\u0171\4\34\3\125"+
    "\66\0\1\u0172\73\0\1\u0173\74\0\1\u0174\106\0\1\u0175"+
    "\32\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\2\34\1\u0176\25\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\23\34\1\u0177\4\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\26\34\1\u0178\1\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\7\34\1\u0179\20\34\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\21\34"+
    "\1\u017a\6\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\1\34\1\u017b"+
    "\26\34\3\125\7\0\1\144\12\0\3\145\4\0\1\47"+
    "\1\u017c\2\47\1\u017d\5\47\1\u017e\1\47\3\0\30\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\3\47\1\u017f\24\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\22\47"+
    "\1\u0180\5\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\20\47\1\u0181\7\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\21\47\1\u0182\6\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\20\47\1\u0183"+
    "\7\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\11\47\1\u0184\16\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\14\47\1\302\13\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\21\47\1\373\6\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\21\47\1\u0185\6\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\21\47"+
    "\1\u0186\6\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\1\47\1\u0187\26\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\20\47\1\361\7\47\1\106\1\0\1\106\6\76"+
    "\1\204\57\76\1\u0188\22\76\1\204\11\76\1\u0189\62\76"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\1\34\1\u018a\26\34\3\125\52\0"+
    "\1\u018b\123\0\1\u018c\105\0\1\u018d\63\0\1\u018e\30\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\13\34\1\u018f\14\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\1\34\1\u0190\26\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\6\34\1\u0191"+
    "\5\34\3\125\30\34\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\1\34"+
    "\1\u0192\26\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\11\34\1\u0193"+
    "\16\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\13\34\1\u0194\14\34"+
    "\3\125\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\16\47\1\u0195\11\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\15\47\1\u0196\12\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\5\47\1\u0197\22\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\22\47"+
    "\1\u0198\5\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\16\47\1\u0199\11\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\1\47\1\u019a\26\47\1\106\1\0\1\106\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\4\47\1\u019b"+
    "\23\47\1\106\1\0\1\106\6\76\1\204\56\76\1\u019c"+
    "\23\76\1\204\54\76\1\u019d\17\76\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\13\34\1\u0111\14\34\3\125\63\0\1\u019e\70\0\1\u019f"+
    "\70\0\1\u01a0\114\0\1\u01a1\36\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\5\34"+
    "\1\u01a2\22\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\13\34\1\u01a3"+
    "\14\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\5\34\1\u01a4\22\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\20\34\1\u0139\7\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\21\34\1\u01a5\6\34\3\125\7\0"+
    "\1\144\12\0\3\145\4\0\14\47\3\0\13\47\1\u01a6"+
    "\14\47\1\106\1\0\1\106\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\22\47\1\u01a7\5\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\1\47\1\u01a8\26\47\1\106\1\0\1\106\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\16\47\1\u01a9\11\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\20\47\1\u01aa\7\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\20\47"+
    "\1\u01ab\7\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\5\47\1\u01ac\22\47\1\106"+
    "\1\0\1\106\6\76\1\204\11\76\1\u01ad\70\76\1\204"+
    "\57\76\1\u01ae\14\76\55\0\1\u01af\110\0\1\u01b0\74\0"+
    "\1\u01b1\115\0\1\u0133\17\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\5\34\1\u01b2\6\34\3\125"+
    "\30\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\6\34\1\u0137\5\34\3\125\30\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\15\34\1\u0139\12\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\1\u01b3\27\34\3\125\7\0\1\144"+
    "\12\0\3\145\4\0\14\47\3\0\5\47\1\u01b4\22\47"+
    "\1\106\1\0\1\106\7\0\1\144\12\0\3\145\4\0"+
    "\14\47\3\0\5\47\1\u01b5\22\47\1\106\1\0\1\106"+
    "\7\0\1\144\12\0\3\145\4\0\14\47\3\0\13\47"+
    "\1\373\14\47\1\106\1\0\1\106\7\0\1\144\12\0"+
    "\3\145\4\0\14\47\3\0\20\47\1\u01b6\7\47\1\106"+
    "\1\0\1\106\7\0\1\144\12\0\3\145\4\0\14\47"+
    "\3\0\21\47\1\u01b7\6\47\1\106\1\0\1\106\6\76"+
    "\1\204\54\76\1\u01b8\25\76\1\204\57\76\1\u01b9\14\76"+
    "\36\0\1\u01ba\103\0\1\u0157\130\0\1\u0133\22\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\7\34\1\u01bb\20\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\1\34\1\u01bc\26\34\3\125\7\0\1\144\12\0\3\145"+
    "\4\0\14\47\3\0\1\47\1\174\26\47\1\106\1\0"+
    "\1\106\7\0\1\144\12\0\3\145\4\0\14\47\3\0"+
    "\20\47\1\302\7\47\1\106\1\0\1\106\6\76\1\204"+
    "\57\76\1\u01bd\22\76\1\204\60\76\1\u01be\13\76\57\0"+
    "\1\u01bf\30\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\23\34\1\u01c0\4\34\3\125"+
    "\5\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\11\34\1\u01c1\2\34\3\125\30\34\3\125\6\76"+
    "\1\204\57\76\1\u01c2\22\76\1\u01c3\74\76\73\0\1\u01c4"+
    "\14\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\1\34\1\u01c5\26\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\1\34\1\u01c6\26\34\3\125\6\76\1\204"+
    "\60\76\1\u01c7\13\76\51\0\1\u01c8\36\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\13\34\1\u0139\14\34\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\20\34"+
    "\1\u01c9\7\34\3\125\6\76\1\u01ca\74\76\63\0\1\u0133"+
    "\24\0\1\125\1\0\1\126\2\125\2\0\6\125\3\127"+
    "\4\125\14\34\3\125\5\34\1\u01cb\22\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\15\34\1\u01cc\12\34\3\125\5\0\1\125"+
    "\1\0\1\126\2\125\2\0\6\125\3\127\4\125\14\34"+
    "\3\125\22\34\1\u01cd\5\34\3\125\5\0\1\125\1\0"+
    "\1\126\2\125\2\0\6\125\3\127\4\125\14\34\3\125"+
    "\5\34\1\u01ce\22\34\3\125\5\0\1\125\1\0\1\126"+
    "\2\125\2\0\6\125\3\127\4\125\14\34\3\125\21\34"+
    "\1\u01cf\6\34\3\125\5\0\1\125\1\0\1\126\2\125"+
    "\2\0\6\125\3\127\4\125\14\34\3\125\11\34\1\u01d0"+
    "\16\34\3\125\5\0\1\125\1\0\1\126\2\125\2\0"+
    "\6\125\3\127\4\125\14\34\3\125\21\34\1\u01d1\6\34"+
    "\3\125\5\0\1\125\1\0\1\126\2\125\2\0\6\125"+
    "\3\127\4\125\14\34\3\125\1\u01d2\27\34\3\125\5\0"+
    "\1\125\1\0\1\126\2\125\2\0\6\125\3\127\4\125"+
    "\14\34\3\125\3\34\1\u01d3\24\34\3\125";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27805];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\67\1\2\0\2\1\1\0\1\1\3\0"+
    "\12\1\2\0\3\1\1\0\16\1\2\0\41\1\1\11"+
    "\1\1\3\0\2\1\2\0\5\1\1\11\3\1\1\0"+
    "\62\1\4\0\12\1\1\0\54\1\2\0\46\1\2\0"+
    "\41\1\3\0\3\1\4\0\26\1\2\0\1\1\4\0"+
    "\22\1\2\0\1\1\4\0\15\1\6\0\13\1\5\0"+
    "\6\1\3\0\2\1\3\0\2\1\1\0\1\11\1\0"+
    "\2\1\2\0\1\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[467];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error"+yytext());return new Symbol(sym.error);
            }
            // fall through
          case 63: break;
          case 2:
            { 
            }
            // fall through
          case 64: break;
          case 3:
            { return new Symbol(sym.FINLINEA,yytext());
            }
            // fall through
          case 65: break;
          case 4:
            { return new Symbol(sym.COMILLAS,yytext());
            }
            // fall through
          case 66: break;
          case 5:
            { return new Symbol(sym.MOD,yytext());
            }
            // fall through
          case 67: break;
          case 6:
            { return new Symbol(sym.PARENTESISA,yytext());
            }
            // fall through
          case 68: break;
          case 7:
            { return new Symbol(sym.PARENTESISC,yytext());
            }
            // fall through
          case 69: break;
          case 8:
            { return new Symbol(sym.MULTIPLICACION,yytext());
            }
            // fall through
          case 70: break;
          case 9:
            { return new Symbol(sym.SUMA,yytext());
            }
            // fall through
          case 71: break;
          case 10:
            { return new Symbol(sym.COMA,yytext());
            }
            // fall through
          case 72: break;
          case 11:
            { return new Symbol(sym.RESTA,yytext());
            }
            // fall through
          case 73: break;
          case 12:
            { return new Symbol(sym.PUNTO,yytext());
            }
            // fall through
          case 74: break;
          case 13:
            { return new Symbol(sym.DIVISION,yytext());
            }
            // fall through
          case 75: break;
          case 14:
            { return new Symbol(sym.NUMERO,Integer.parseInt(yytext()));
            }
            // fall through
          case 76: break;
          case 15:
            { return new Symbol(sym.DOSPUNTOS,yytext());
            }
            // fall through
          case 77: break;
          case 16:
            { return new Symbol(sym.PUNTOYCOMA,yytext());
            }
            // fall through
          case 78: break;
          case 17:
            { return new Symbol(sym.MAYMEN,yytext());
            }
            // fall through
          case 79: break;
          case 18:
            { return new Symbol(sym.SIGUAL,yytext());
            }
            // fall through
          case 80: break;
          case 19:
            { return new Symbol(sym.NAMECLASS,yytext());
            }
            // fall through
          case 81: break;
          case 20:
            { return new Symbol(sym.CORCHETEA,yytext());
            }
            // fall through
          case 82: break;
          case 21:
            { return new Symbol(sym.CORCHETEC,yytext());
            }
            // fall through
          case 83: break;
          case 22:
            { return new Symbol(sym.EXPONENTE,yytext());
            }
            // fall through
          case 84: break;
          case 23:
            { System.out.println("Identificador"+yytext());return new Symbol(sym.IDENTIFICADOR,yytext());
            }
            // fall through
          case 85: break;
          case 24:
            { return new Symbol(sym.LLAVEA,yytext());
            }
            // fall through
          case 86: break;
          case 25:
            { return new Symbol(sym.LLAVEC,yytext());
            }
            // fall through
          case 87: break;
          case 26:
            { return new Symbol(sym.NEGAR,yytext());
            }
            // fall through
          case 88: break;
          case 27:
            { return new Symbol(sym.CADTEXTO,yytext());
            }
            // fall through
          case 89: break;
          case 28:
            { return new Symbol(sym.OPATRIBUCION,yytext());
            }
            // fall through
          case 90: break;
          case 29:
            { return new Symbol(sym.OPARBOOL,yytext());
            }
            // fall through
          case 91: break;
          case 30:
            { return new Symbol(sym.OPINCREMENTO,yytext());
            }
            // fall through
          case 92: break;
          case 31:
            { return new Symbol(sym.IGUALMAYMEN,yytext());
            }
            // fall through
          case 93: break;
          case 32:
            { return new Symbol(sym.DOBLEIGUAL,yytext());
            }
            // fall through
          case 94: break;
          case 33:
            { return new Symbol(sym.SI,yytext());
            }
            // fall through
          case 95: break;
          case 34:
            { return new Symbol(sym.BOOLNUM,yytext());
            }
            // fall through
          case 96: break;
          case 35:
            { return new Symbol(sym.DECIMAL,Float.parseFloat(yytext()));
            }
            // fall through
          case 97: break;
          case 36:
            { return new Symbol(sym.LEER,yytext());
            }
            // fall through
          case 98: break;
          case 37:
            { return new Symbol(sym.NULO,yytext());
            }
            // fall through
          case 99: break;
          case 38:
            { return new Symbol(sym.REAL,yytext());
            }
            // fall through
          case 100: break;
          case 39:
            { return new Symbol(sym.SINO,yytext());
            }
            // fall through
          case 101: break;
          case 40:
            { return new Symbol(sym.OPRELACIONAL,yytext());
            }
            // fall through
          case 102: break;
          case 41:
            { return new Symbol(sym.CLASE,yytext());
            }
            // fall through
          case 103: break;
          case 42:
            { return new Symbol(sym.BOOLTEXT,yytext());
            }
            // fall through
          case 104: break;
          case 43:
            { return new Symbol(sym.FINSI,yytext());
            }
            // fall through
          case 105: break;
          case 44:
            { return new Symbol(sym.CADENA,yytext());
            }
            // fall through
          case 106: break;
          case 45:
            { return new Symbol(sym.ENTERO,yytext());
            }
            // fall through
          case 107: break;
          case 46:
            { return new Symbol(sym.OPBOLEANO,yytext());
            }
            // fall through
          case 108: break;
          case 47:
            { return new Symbol(sym.BOLEANO,yytext());
            }
            // fall through
          case 109: break;
          case 48:
            { return new Symbol(sym.INCLUIR,yytext());
            }
            // fall through
          case 110: break;
          case 49:
            { return new Symbol(sym.METODO,yytext());
            }
            // fall through
          case 111: break;
          case 50:
            { return new Symbol(sym.ELIMINAR,yytext());
            }
            // fall through
          case 112: break;
          case 51:
            { return new Symbol(sym.ENTONCES,yytext());
            }
            // fall through
          case 113: break;
          case 52:
            { return new Symbol(sym.ESCRIBIR,yytext());
            }
            // fall through
          case 114: break;
          case 53:
            { return new Symbol(sym.TDISPONIBLEP,yytext());
            }
            // fall through
          case 115: break;
          case 54:
            { return new Symbol(sym.TDISPONIBLEM,yytext());
            }
            // fall through
          case 116: break;
          case 55:
            { return new Symbol(sym.PRINCIPAL,yytext());
            }
            // fall through
          case 117: break;
          case 56:
            { return new Symbol(sym.DESTRUCTOR,yytext());
            }
            // fall through
          case 118: break;
          case 57:
            { return new Symbol(sym.INSTANCIAR,yytext());
            }
            // fall through
          case 119: break;
          case 58:
            { return new Symbol(sym.CONSTRUCTOR,yytext());
            }
            // fall through
          case 120: break;
          case 59:
            { return new Symbol(sym.PROPIEDAD,yytext());
            }
            // fall through
          case 121: break;
          case 60:
            { return new Symbol(sym.BibliLECT,yytext());
            }
            // fall through
          case 122: break;
          case 61:
            { return new Symbol(sym.BibliPRINT,yytext());
            }
            // fall through
          case 123: break;
          case 62:
            { return new Symbol(sym.THEPARENTHESIS,yytext());
            }
            // fall through
          case 124: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
