// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexicocup.flex

package gt.edu.url.compiladores.prueba1;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\0\1\7\1\31"+
    "\1\32\1\33\1\34\1\35\3\33\1\36\4\33\1\37"+
    "\1\40\1\41\1\33\1\42\10\33\1\43\1\0\1\44"+
    "\1\45\1\46\1\0\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\57\2\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\60\1\66\1\67\1\70\1\71\1\72"+
    "\3\60\1\73\1\74\1\75\1\76\7\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\1\21\1\22\1\23\1\24\6\25\1\26"+
    "\1\27\1\30\1\1\20\31\1\32\1\7\1\33\2\0"+
    "\1\34\1\35\1\0\1\36\3\0\1\5\3\37\1\40"+
    "\2\7\1\41\1\7\1\42\1\43\1\44\1\43\1\20"+
    "\1\37\1\2\2\0\2\45\1\46\1\0\3\47\1\23"+
    "\2\35\1\50\2\35\4\25\1\41\1\25\2\51\2\0"+
    "\2\52\1\31\1\52\27\31\1\53\2\31\1\43\3\35"+
    "\2\36\3\0\2\5\1\52\1\5\1\37\3\54\1\7"+
    "\1\42\1\43\3\55\1\43\2\0\4\37\1\35\5\2"+
    "\1\0\2\56\1\57\1\60\1\46\1\56\1\47\2\0"+
    "\2\35\3\25\2\51\1\35\2\52\37\31\1\43\2\35"+
    "\1\61\3\0\1\52\1\54\1\55\1\35\1\0\3\37"+
    "\1\2\2\35\5\2\1\0\3\60\2\0\2\35\3\25"+
    "\3\35\2\52\21\31\1\62\3\31\1\63\1\64\4\31"+
    "\1\65\1\66\1\67\2\31\1\35\1\52\2\0\2\35"+
    "\6\2\2\56\2\60\2\0\2\35\1\25\1\23\1\25"+
    "\2\35\1\52\2\31\1\70\1\31\1\71\7\31\1\57"+
    "\1\72\1\73\13\31\2\35\2\52\2\0\2\2\1\60"+
    "\1\56\2\0\1\35\1\47\5\25\2\52\1\31\1\74"+
    "\4\31\1\75\15\31\1\52\4\0\1\35\4\25\1\76"+
    "\10\31\1\77\2\31\1\100\6\31\2\52\3\0\1\35"+
    "\4\25\5\31\1\101\1\102\1\103\1\104\1\105\1\31"+
    "\1\106\1\107\1\110\1\31\3\0\1\35\3\25\1\111"+
    "\7\31\2\0\1\35\1\25\4\31\1\112\1\113\1\31"+
    "\2\0\1\25\2\31\1\114\1\115\1\0\1\25\2\31"+
    "\1\0\1\25\1\31\1\116\1\117\1\25\1\120";

  private static int [] zzUnpackAction() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u01b9\0\u02b5\0\u02f4\0\u0333"+
    "\0\u02f4\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u02f4\0\u02f4\0\u046e"+
    "\0\u04ad\0\u04ec\0\u052b\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\u02f4\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\u0ad4\0\u0b13\0\u0b52\0\u0b13\0\u0b91\0\u0bd0"+
    "\0\u0b91\0\u0c0f\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\u06a5\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0e85\0\u0f03"+
    "\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275\0\u12b4\0\u12f3"+
    "\0\u1275\0\u1332\0\u1371\0\u0b91\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u052b\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u06e4"+
    "\0\u1626\0\u1665\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df"+
    "\0\u181e\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7"+
    "\0\u1a16\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf"+
    "\0\u1c0e\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7"+
    "\0\u1e06\0\u1e45\0\77\0\u1e84\0\u1ec3\0\u1f02\0\u1f41\0\u1f80"+
    "\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u0e46\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u0fc0\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2"+
    "\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c\0\77\0\u24ab"+
    "\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3"+
    "\0\u2625\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u1e84\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed"+
    "\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u2331\0\u3528\0\u3567\0\u0bd0"+
    "\0\u35a6\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f"+
    "\0\u379e\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957"+
    "\0\u3996\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f"+
    "\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47"+
    "\0\u3d86\0\u3dc5\0\u3e04\0\u3e43\0\u3e82\0\u0723\0\u3ec1\0\u3f00"+
    "\0\u3f3f\0\u0723\0\u0723\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u0723"+
    "\0\u0723\0\u0723\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u06a5\0\u0e07\0\u4272\0\u42b1\0\u1e06\0\u42f0"+
    "\0\u36a2\0\u36e1\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a"+
    "\0\u44a9\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662"+
    "\0\u0723\0\u46a1\0\u0723\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc"+
    "\0\u481b\0\u485a\0\u0723\0\u0723\0\u0723\0\u4899\0\u48d8\0\u4917"+
    "\0\u4956\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f"+
    "\0\u4b4e\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u31f5\0\u4cc8"+
    "\0\u4d07\0\u436e\0\u4d46\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u44e8\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a"+
    "\0\u5079\0\u50b8\0\u50f7\0\u0723\0\u5136\0\u5175\0\u51b4\0\u51f3"+
    "\0\u5232\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u4d07\0\u5526\0\u5565\0\u55a4"+
    "\0\u55e3\0\u5622\0\u5661\0\u0723\0\u56a0\0\u56df\0\u571e\0\u575d"+
    "\0\u579c\0\u57db\0\u581a\0\u5859\0\u0723\0\u5898\0\u58d7\0\u0723"+
    "\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf"+
    "\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7"+
    "\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u0723\0\u0723\0\u0723"+
    "\0\u0723\0\u0723\0\u5e41\0\u0723\0\u0723\0\u0723\0\u5e80\0\u5ebf"+
    "\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u052b\0\u6078"+
    "\0\u60b7\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231\0\u6270"+
    "\0\u62af\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u0723\0\u0723"+
    "\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u0723\0\u0723"+
    "\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f\0\u66de\0\u671d\0\u0723"+
    "\0\77\0\u675c\0\u0723";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\2\33\1\34\2\33\1\35\1\36\1\37"+
    "\1\33\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\44\1\52\1\53\1\44\1\54"+
    "\1\55\1\56\1\44\1\57\1\60\1\61\1\62\1\44"+
    "\1\63\1\44\1\64\1\65\1\66\100\0\2\3\1\0"+
    "\1\3\73\0\1\3\1\4\1\0\1\3\77\0\1\67"+
    "\1\0\1\70\2\67\2\0\6\67\3\0\3\67\1\71"+
    "\12\72\4\67\25\0\3\67\6\73\1\74\5\73\1\0"+
    "\3\73\1\75\36\73\1\76\1\73\1\77\15\73\14\10"+
    "\1\67\32\10\25\100\3\10\5\0\1\101\1\0\1\102"+
    "\2\101\2\103\6\101\3\0\3\101\1\104\12\72\4\101"+
    "\25\0\3\101\5\0\1\105\1\0\1\106\1\105\1\107"+
    "\2\110\6\105\3\0\4\105\12\72\4\105\25\0\3\105"+
    "\12\0\1\111\3\0\1\111\1\0\1\111\4\0\2\111"+
    "\14\0\1\111\30\0\1\111\1\0\1\111\12\0\2\112"+
    "\2\0\1\112\1\0\1\112\4\0\2\112\14\0\2\112"+
    "\27\0\1\112\1\0\1\112\5\0\1\101\1\0\1\102"+
    "\2\101\2\103\1\101\1\113\4\101\3\0\3\101\1\104"+
    "\12\72\4\101\25\0\3\101\5\0\1\67\1\0\1\70"+
    "\2\67\2\112\2\67\1\114\1\67\1\114\1\67\3\0"+
    "\2\114\2\67\12\72\2\114\2\67\25\0\1\114\1\67"+
    "\1\114\5\0\1\101\1\0\1\102\2\101\2\103\3\101"+
    "\1\113\2\101\1\0\2\115\3\101\1\104\12\72\4\101"+
    "\25\0\3\101\5\0\1\67\1\0\1\70\1\101\1\67"+
    "\2\0\1\116\1\101\1\67\1\101\1\67\1\117\3\0"+
    "\3\67\1\104\12\72\2\67\1\101\1\67\25\0\3\67"+
    "\16\0\1\120\1\0\1\121\1\0\1\122\2\123\22\0"+
    "\25\124\21\0\1\120\1\0\1\121\1\0\3\25\22\0"+
    "\25\124\21\0\1\120\1\0\1\125\1\0\3\25\22\0"+
    "\25\124\10\0\1\126\1\0\1\127\2\126\2\130\6\126"+
    "\3\0\3\126\1\131\3\72\1\132\2\72\1\133\3\72"+
    "\4\126\25\0\3\126\5\0\1\67\1\0\1\70\2\67"+
    "\2\0\6\67\3\0\3\67\1\134\12\72\4\67\25\0"+
    "\3\67\5\0\1\135\1\0\1\136\2\135\2\0\6\135"+
    "\3\137\4\135\6\33\1\140\3\33\3\135\26\33\3\135"+
    "\5\0\1\135\1\0\1\136\2\135\2\0\6\135\3\137"+
    "\4\135\12\33\3\135\26\33\3\135\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\12\33\3\135"+
    "\16\33\1\141\7\33\3\135\5\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\5\33"+
    "\1\142\20\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\11\33\1\143\3\135\26\33"+
    "\3\135\5\0\1\135\1\0\1\136\2\135\2\0\6\135"+
    "\3\137\4\135\12\33\3\135\20\33\1\144\5\33\3\135"+
    "\5\0\1\67\1\0\1\70\2\67\2\145\2\67\1\146"+
    "\1\67\1\146\1\67\3\0\2\146\2\67\12\72\1\146"+
    "\3\67\25\0\1\146\1\67\1\146\5\0\1\101\1\0"+
    "\1\102\2\101\2\103\6\101\3\0\4\101\12\72\4\101"+
    "\25\0\3\101\5\0\1\67\1\0\1\147\2\67\2\0"+
    "\6\67\3\0\4\67\12\72\3\67\1\150\25\151\1\150"+
    "\1\67\1\150\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\26\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\16\44\1\155\7\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\1\44\1\156\11\44\1\157\2\44\1\160\7\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\5\44\1\161\20\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\13\44"+
    "\1\162\1\44\1\163\3\44\1\164\4\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\1\44\1\165\7\44\1\166\14\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\1\44"+
    "\1\167\24\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\170\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\5\44\1\171\10\44\1\172\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\5\44\1\173\3\44\1\174\14\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\23\44"+
    "\1\175\2\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\1\44\1\176\16\44\1\177"+
    "\2\44\1\200\2\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\1\44\1\201\3\44"+
    "\1\202\20\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\5\44\1\203\3\44\1\204"+
    "\14\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\1\44\1\205\24\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\5\44\1\206\20\44\1\154\1\0\1\154\5\0\1\67"+
    "\1\0\1\147\2\67\2\112\2\67\1\114\1\67\1\114"+
    "\1\67\3\0\2\114\2\67\12\72\2\114\1\67\1\150"+
    "\25\151\1\207\1\67\1\207\5\0\1\105\1\0\1\106"+
    "\2\105\2\110\6\105\3\0\4\105\12\72\4\105\25\0"+
    "\1\105\1\107\1\105\5\0\1\67\1\0\1\70\2\67"+
    "\2\0\6\67\3\0\4\67\12\72\4\67\25\0\3\67"+
    "\14\70\1\67\14\70\12\210\34\70\7\0\1\211\12\0"+
    "\3\212\4\0\12\72\3\0\26\72\3\0\6\73\1\213"+
    "\76\73\1\214\76\73\1\213\11\73\1\215\64\73\1\213"+
    "\53\73\1\216\22\73\1\213\44\73\1\217\23\73\5\10"+
    "\1\220\1\10\1\221\4\220\1\222\5\220\3\223\4\220"+
    "\12\100\3\220\26\100\3\220\14\102\1\101\62\102\5\0"+
    "\1\103\1\0\1\224\12\103\3\0\4\103\12\0\4\103"+
    "\25\0\3\103\5\0\1\225\1\0\1\226\2\225\2\227"+
    "\6\225\3\0\4\225\12\72\4\225\25\0\3\225\5\0"+
    "\1\105\1\0\1\106\2\105\2\110\6\105\3\0\4\105"+
    "\12\72\4\105\25\0\3\105\14\106\1\105\62\106\5\0"+
    "\1\110\1\0\1\230\12\110\3\0\4\110\12\0\4\110"+
    "\25\0\3\110\5\0\1\111\1\0\1\231\12\111\3\0"+
    "\4\111\12\0\4\111\25\0\3\111\5\0\1\112\1\0"+
    "\1\232\12\112\3\0\4\112\12\0\4\112\25\0\3\112"+
    "\5\0\1\233\1\0\1\234\2\233\2\235\6\233\3\0"+
    "\4\233\12\72\4\233\25\0\3\233\5\0\1\114\1\0"+
    "\1\236\2\114\2\112\6\114\3\0\4\114\12\72\4\114"+
    "\25\0\3\114\16\0\1\120\1\0\1\237\1\0\3\115"+
    "\22\0\25\124\3\0\5\240\1\241\1\240\1\242\2\241"+
    "\2\243\1\244\5\241\3\240\4\241\12\245\4\241\25\240"+
    "\3\241\2\246\1\247\1\246\1\250\1\117\1\246\1\251"+
    "\2\117\2\246\6\117\3\246\4\117\12\252\4\117\25\246"+
    "\3\117\17\0\1\253\2\0\1\254\2\255\71\0\1\253"+
    "\1\237\1\0\1\256\2\257\70\0\1\120\1\0\1\237"+
    "\1\0\1\122\2\123\22\0\25\124\21\0\1\120\1\0"+
    "\1\237\2\0\2\123\22\0\25\124\25\0\3\260\4\0"+
    "\12\124\3\0\26\124\22\0\1\253\1\237\1\0\1\261"+
    "\2\257\57\0\1\126\1\0\1\127\2\126\2\130\6\126"+
    "\3\0\4\126\3\72\1\132\2\72\1\133\3\72\4\126"+
    "\25\0\3\126\14\127\1\126\62\127\5\0\1\130\1\0"+
    "\1\262\12\130\3\0\4\130\3\0\1\263\2\0\1\264"+
    "\3\0\4\130\25\0\3\130\7\0\1\211\12\0\3\212"+
    "\4\0\12\72\3\0\16\72\1\265\7\72\12\0\1\211"+
    "\12\0\3\212\4\0\12\72\3\0\5\72\1\266\20\72"+
    "\10\0\1\135\1\0\1\136\2\135\2\0\6\135\3\0"+
    "\4\135\12\0\4\135\25\0\3\135\14\136\1\135\62\136"+
    "\5\0\1\135\1\0\1\136\2\135\2\0\6\135\3\137"+
    "\4\135\12\33\4\135\25\0\3\135\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\3\33\1\143"+
    "\6\33\3\135\26\33\3\135\5\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\2\33"+
    "\1\267\23\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\12\33\3\135\7\33\1\270"+
    "\16\33\3\135\5\0\1\135\1\0\1\136\2\135\2\0"+
    "\6\135\3\137\4\135\12\33\3\135\11\33\1\271\14\33"+
    "\3\135\5\0\1\145\1\0\1\272\12\145\3\0\4\145"+
    "\12\0\4\145\25\0\3\145\5\0\1\146\1\0\1\273"+
    "\2\146\2\145\6\146\3\0\4\146\12\72\4\146\25\0"+
    "\3\146\14\147\1\67\14\147\12\274\4\147\25\275\3\147"+
    "\5\0\1\154\1\0\1\152\12\154\3\276\4\154\12\151"+
    "\3\154\26\151\3\154\14\152\1\154\62\152\7\0\1\152"+
    "\12\0\3\153\22\0\25\44\1\154\1\0\1\154\5\0"+
    "\1\154\1\0\1\152\12\154\3\0\4\154\12\0\4\154"+
    "\25\0\3\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\13\44\1\277\12\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\4\44\1\300"+
    "\21\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\1\44\1\301\24\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\15\44\1\302\3\44\1\303\4\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\21\44"+
    "\1\304\2\44\1\305\1\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\11\44\1\306"+
    "\14\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\22\44\1\307\3\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\3\44\1\310\16\44\1\311\3\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\13\44"+
    "\1\312\12\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\313\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\3\44\1\314\22\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\3\44\1\315"+
    "\15\44\1\316\4\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\5\44\1\317\20\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\7\44\1\320\16\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\22\44"+
    "\1\321\3\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\5\44\1\322\20\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\13\44\1\323\12\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\20\44\1\324"+
    "\5\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\11\44\1\325\4\44\1\326\7\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\2\44\1\327\23\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\11\44"+
    "\1\330\14\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\1\44\1\331\24\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\15\44\1\332\10\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\15\44\1\333"+
    "\10\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\15\44\1\334\10\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\20\44\1\335\5\44\1\154\1\0\1\154\5\0\1\114"+
    "\1\0\1\336\2\114\2\112\6\114\3\0\4\114\12\72"+
    "\3\114\1\207\25\151\1\207\1\114\1\207\7\70\1\337"+
    "\4\70\1\67\5\70\3\340\4\70\12\210\3\70\26\210"+
    "\3\70\14\211\1\0\62\211\7\0\1\211\12\0\3\212"+
    "\4\0\12\72\42\0\1\341\70\0\6\73\1\213\12\73"+
    "\1\342\63\73\1\213\56\73\1\343\17\73\1\213\42\73"+
    "\1\344\25\73\5\10\1\220\1\10\1\221\4\220\1\222"+
    "\5\220\3\10\4\220\12\10\4\220\25\100\3\220\14\221"+
    "\1\222\62\221\5\0\1\222\1\0\1\345\2\222\2\154"+
    "\6\222\3\0\4\222\12\72\4\222\25\0\3\222\5\10"+
    "\1\220\1\10\1\221\4\220\1\222\5\220\3\223\4\220"+
    "\12\10\4\220\25\100\3\220\14\224\1\103\62\224\14\226"+
    "\1\225\62\226\5\0\1\227\1\0\1\346\12\227\3\0"+
    "\4\227\12\0\4\227\25\0\3\227\14\230\1\110\62\230"+
    "\14\231\1\111\62\231\14\232\1\112\62\232\14\234\1\233"+
    "\62\234\5\0\1\235\1\0\1\347\12\235\3\0\4\235"+
    "\12\0\4\235\25\0\3\235\14\236\1\114\14\236\12\350"+
    "\34\236\17\0\1\253\1\237\1\0\1\254\2\255\52\0"+
    "\14\240\1\351\67\240\1\241\1\240\1\242\2\241\2\243"+
    "\1\352\5\241\3\240\4\241\12\245\4\241\25\240\3\241"+
    "\14\242\1\352\62\242\5\240\1\243\1\240\1\353\4\243"+
    "\1\354\5\243\3\240\4\243\12\240\4\243\25\240\3\243"+
    "\5\240\1\241\1\240\1\242\2\241\2\243\1\352\4\241"+
    "\1\355\3\240\4\241\12\245\4\241\25\240\3\241\7\240"+
    "\1\356\4\240\1\351\5\240\3\357\4\240\12\245\3\240"+
    "\26\245\3\240\2\246\1\247\1\246\1\250\72\246\2\0"+
    "\1\247\74\0\2\251\1\360\1\251\1\361\7\251\1\117"+
    "\14\251\12\362\34\251\2\246\1\247\1\246\1\250\2\246"+
    "\1\363\12\246\3\364\4\246\12\252\3\246\26\252\3\246"+
    "\23\0\2\255\74\0\1\365\76\0\3\255\74\0\1\366"+
    "\2\367\74\0\1\370\2\257\74\0\3\260\22\0\25\124"+
    "\3\0\14\262\1\130\62\262\64\0\1\371\65\0\1\372"+
    "\32\0\1\211\12\0\3\212\4\0\12\72\3\0\2\72"+
    "\1\373\23\72\12\0\1\211\12\0\3\212\4\0\12\72"+
    "\3\0\7\72\1\374\16\72\10\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\13\33"+
    "\1\375\12\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\12\33\3\135\1\33\1\376"+
    "\24\33\3\135\5\0\1\135\1\0\1\136\2\135\2\0"+
    "\6\135\3\137\4\135\12\33\3\135\15\33\1\377\10\33"+
    "\3\135\14\272\1\145\62\272\14\273\1\146\14\273\12\u0100"+
    "\34\273\7\147\1\u0101\4\147\1\67\5\147\3\u0102\4\147"+
    "\12\274\3\147\1\274\25\275\10\147\1\u0103\1\147\1\345"+
    "\4\u0103\1\222\5\u0103\3\u0104\4\u0103\12\275\3\u0103\26\275"+
    "\3\u0103\5\0\1\154\1\0\1\152\12\154\3\276\4\154"+
    "\12\0\4\154\25\151\3\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\5\44\1\u0105\20\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\5\44\1\u0106\20\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\21\44\1\u0107\4\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\21\44\1\u0108\4\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\5\44"+
    "\1\203\20\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\4\44\1\u0109\15\44\1\u010a"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u010b\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\14\44\1\u010c\11\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\5\44\1\u010d\10\44"+
    "\1\u010e\7\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\20\44\1\u010f\5\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\1\44\1\u0110\24\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\21\44\1\u0111"+
    "\4\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\21\44\1\u0112\4\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\5\44\1\u0113\20\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\13\44\1\u0114\12\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\22\44\1\u0115\3\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\20\44"+
    "\1\u0116\5\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\1\44\1\u0117\24\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\16\44\1\u0118\7\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\15\44\1\u0119"+
    "\10\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u011a\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\1\44\1\u011b\24\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\24\44\1\u011c\1\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\17\44\1\u011d\2\44\1\u011e\3\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\13\44\1\u011f\12\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\25\44\1\u0120"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\13\44\1\u0121\12\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\16\44"+
    "\1\u0120\7\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\16\44\1\u0122\7\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\7\44\1\u0123\16\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\4\44\1\u0124"+
    "\21\44\1\154\1\0\1\154\14\336\1\114\14\336\12\u0125"+
    "\4\336\25\u0126\3\336\14\337\1\67\62\337\7\70\1\337"+
    "\4\70\1\67\5\70\3\340\4\70\12\210\34\70\6\73"+
    "\1\213\11\73\1\75\36\73\1\76\1\73\1\77\23\73"+
    "\1\213\57\73\1\u0127\16\73\1\213\61\73\1\u0128\6\73"+
    "\14\345\1\222\62\345\14\346\1\227\62\346\14\347\1\235"+
    "\62\347\7\236\1\u0129\4\236\1\114\5\236\3\u012a\4\236"+
    "\12\350\3\236\26\350\3\236\14\240\1\351\4\240\1\247"+
    "\62\240\1\241\1\240\1\242\2\241\2\243\1\352\4\241"+
    "\1\u012b\3\240\4\241\12\245\4\241\25\240\3\241\14\353"+
    "\1\354\62\353\5\240\1\243\1\240\1\353\4\243\1\354"+
    "\4\243\1\u012c\3\240\4\243\12\240\4\243\25\240\3\243"+
    "\14\356\1\351\62\356\7\240\1\356\4\240\1\351\5\240"+
    "\3\357\4\240\12\245\34\240\2\70\1\360\11\70\1\67"+
    "\14\70\12\210\34\70\2\251\1\360\1\251\1\361\2\251"+
    "\1\u012d\4\251\1\117\5\251\3\u012e\4\251\12\362\3\251"+
    "\26\362\3\251\2\363\1\u012f\1\363\1\u0130\7\363\1\246"+
    "\62\363\2\246\1\247\1\246\1\250\2\246\1\363\12\246"+
    "\3\364\4\246\12\252\34\246\22\0\1\u0131\76\0\1\u0132"+
    "\2\367\74\0\1\u0133\2\367\74\0\1\u0134\2\257\122\0"+
    "\1\u0135\103\0\1\u0136\30\0\1\211\12\0\3\212\4\0"+
    "\12\72\3\0\13\72\1\u0137\12\72\12\0\1\211\12\0"+
    "\3\212\4\0\12\72\3\0\1\72\1\u0138\24\72\10\0"+
    "\1\135\1\0\1\136\2\135\2\0\6\135\3\137\4\135"+
    "\12\33\3\135\5\33\1\u0139\20\33\3\135\5\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\20\33\1\u013a\5\33\3\135\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\12\33\3\135"+
    "\3\33\1\u013b\22\33\3\135\7\273\1\u013c\4\273\1\146"+
    "\5\273\3\u013d\4\273\12\u0100\3\273\26\u0100\3\273\14\u0101"+
    "\1\67\32\u0101\25\u013e\3\u0101\7\147\1\u0101\4\147\1\67"+
    "\5\147\3\u0102\4\147\12\274\4\147\25\275\10\147\1\u0103"+
    "\1\147\1\345\4\u0103\1\222\5\u0103\3\147\4\u0103\12\274"+
    "\4\u0103\25\275\3\u0103\5\147\1\u0103\1\147\1\345\4\u0103"+
    "\1\222\5\u0103\3\u0104\4\u0103\12\274\4\u0103\25\275\3\u0103"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\1\44"+
    "\1\u013f\24\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\u0140\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\5\44\1\u0141\20\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\22\44\1\u0142"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\5\44\1\u0143\20\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\20\44\1\u0144\5\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\13\44\1\u0145\12\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\11\44\1\u0146\14\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\20\44"+
    "\1\u0147\5\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\u0148\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\11\44\1\u0149\14\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\22\44\1\u014a"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u014b\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\11\44\1\u014c\14\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\20\44\1\u014d\5\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\23\44\1\u014e\2\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\1\44"+
    "\1\u014f\24\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\20\44\1\u0150\5\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\4\44\1\u0151\21\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\22\44\1\u0152"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\1\44\1\u0153\24\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\11\44\1\u0154\14\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\5\44\1\u0155\20\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\11\44\1\u0156\14\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\5\44"+
    "\1\u0157\20\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\1\44\1\u0158\24\44\1\154"+
    "\1\0\1\154\7\336\1\u0159\4\336\1\114\5\336\3\u015a"+
    "\4\336\12\u0125\3\336\1\u0125\25\u0126\10\336\1\u015b\1\336"+
    "\1\345\4\u015b\1\222\5\u015b\3\u015c\4\u015b\12\u0126\3\u015b"+
    "\26\u0126\3\u015b\6\73\1\213\44\73\1\u015d\31\73\1\213"+
    "\62\73\1\u015e\5\73\14\u0129\1\114\62\u0129\7\236\1\u0129"+
    "\4\236\1\114\5\236\3\u012a\4\236\12\350\34\236\2\u012d"+
    "\1\u015f\1\u012d\1\u0160\7\u012d\1\117\62\u012d\2\251\1\360"+
    "\1\251\1\361\2\251\1\u012d\4\251\1\117\5\251\3\u012e"+
    "\4\251\12\362\34\251\2\211\1\u012f\11\211\1\0\62\211"+
    "\22\0\1\u0161\2\367\74\0\1\u0162\2\257\133\0\1\u0163"+
    "\64\0\1\u0164\36\0\1\211\12\0\3\212\4\0\12\72"+
    "\3\0\5\72\1\u0165\20\72\12\0\1\211\12\0\3\212"+
    "\4\0\12\72\3\0\20\72\1\u0166\5\72\10\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\5\33"+
    "\1\u0167\4\33\3\135\26\33\3\135\5\0\1\130\1\0"+
    "\1\262\12\130\3\137\4\130\3\33\1\u0168\2\33\1\u0169"+
    "\3\33\3\130\1\u016a\25\33\3\130\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\12\33\3\135"+
    "\11\33\1\u016b\14\33\3\135\14\u013c\1\146\62\u013c\7\273"+
    "\1\u013c\4\273\1\146\5\273\3\u013d\4\273\12\u0100\34\273"+
    "\5\u0101\1\u016c\1\u0101\1\345\4\u016c\1\222\5\u016c\3\u016d"+
    "\4\u016c\12\u013e\3\u016c\26\u013e\3\u016c\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\u016e\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\1\44\1\u016f\24\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\20\44\1\u0170"+
    "\5\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\23\44\1\u0171\2\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\24\44\1\u0172\1\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\15\44\1\u0173\10\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\16\44\1\u0174\7\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\3\44"+
    "\1\u0175\22\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\2\44\1\u0176\23\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\11\44\1\u0177\14\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\11\44\1\u0178"+
    "\14\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\15\44\1\u0179\10\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\11\44\1\u017a\14\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\16\44\1\u017b\7\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\20\44\1\u017c\5\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\4\44"+
    "\1\u017d\21\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\5\44\1\u017e\20\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\7\44\1\u017f\16\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\3\44\1\u017d"+
    "\22\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\15\44\1\u0180\10\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\4\44\1\u0181\21\44\1\154\1\0\1\154\14\u0159\1\114"+
    "\32\u0159\25\u0182\3\u0159\7\336\1\u0159\4\336\1\114\5\336"+
    "\3\u015a\4\336\12\u0125\4\336\25\u0126\10\336\1\u015b\1\336"+
    "\1\345\4\u015b\1\222\5\u015b\3\336\4\u015b\12\u0125\4\u015b"+
    "\25\u0126\3\u015b\5\336\1\u015b\1\336\1\345\4\u015b\1\222"+
    "\5\u015b\3\u015c\4\u015b\12\u0125\4\u015b\25\u0126\3\u015b\6\73"+
    "\1\213\60\73\1\u0183\15\73\1\213\57\73\1\u0184\10\73"+
    "\2\337\1\u015f\11\337\1\67\62\337\22\0\1\u0185\2\367"+
    "\125\0\1\u0186\111\0\1\130\17\0\1\211\12\0\3\212"+
    "\4\0\5\72\1\u0187\4\72\3\0\26\72\10\0\1\130"+
    "\1\0\1\262\12\130\3\212\4\130\3\72\1\132\2\72"+
    "\1\133\3\72\3\130\1\u0166\25\72\3\130\5\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\7\33\1\u0188\16\33\3\135\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\12\33\3\135"+
    "\16\33\1\u0189\7\33\3\135\5\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\5\33"+
    "\1\u018a\20\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\12\33\3\135\17\33\1\u018b"+
    "\6\33\3\135\5\u0101\1\u016c\1\u0101\1\345\4\u016c\1\222"+
    "\5\u016c\3\u0101\4\u016c\12\u0101\4\u016c\25\u013e\3\u016c\5\u0101"+
    "\1\u016c\1\u0101\1\345\4\u016c\1\222\5\u016c\3\u016d\4\u016c"+
    "\12\u0101\4\u016c\25\u013e\3\u016c\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u018c\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\1\u018d\11\44"+
    "\3\0\26\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\23\44\1\u018e\2\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\3\44\1\u018f\22\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\5\44\1\u0190"+
    "\20\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\1\44\1\u0191\24\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\5\44\1\u0192\20\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\11\44\1\u0193\14\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\3\44\1\u0194\22\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\20\44"+
    "\1\u0195\5\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\3\44\1\u0196\22\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\22\44\1\u0197\3\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\21\44\1\u0198"+
    "\4\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\1\44\1\u0199\24\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\1\44\1\u019a\14\44\1\u019b\7\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\4\44"+
    "\1\u019c\21\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\11\44\1\u0153\14\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\22\44\1\u019d\3\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\5\44\1\u019e"+
    "\20\44\1\154\1\0\1\154\5\u0159\1\u019f\1\u0159\1\345"+
    "\4\u019f\1\222\5\u019f\3\u01a0\4\u019f\12\u0182\3\u019f\26\u0182"+
    "\3\u019f\6\73\1\213\50\73\1\u01a1\25\73\1\213\40\73"+
    "\1\u01a2\27\73\36\0\1\u01a3\47\0\1\211\12\0\3\212"+
    "\4\0\12\72\3\0\7\72\1\u01a4\16\72\10\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\23\33\1\u01a5\2\33\3\135\5\0\1\135\1\0"+
    "\1\136\2\135\2\0\6\135\3\137\4\135\12\33\3\135"+
    "\2\33\1\u01a6\23\33\3\135\5\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\7\33"+
    "\1\u01a7\16\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\12\33\3\135\1\33\1\u01a8"+
    "\24\33\3\135\7\0\1\152\12\0\3\153\4\0\1\44"+
    "\1\u01a9\2\44\1\u01aa\4\44\1\u01ab\3\0\26\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\3\44\1\u01ac\22\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\22\44\1\u01ad"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\20\44\1\u01ae\5\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\20\44\1\u01af\5\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\21\44\1\u01b0\4\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\20\44\1\u01b1\5\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\16\44"+
    "\1\u01b2\7\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\11\44\1\u01b3\14\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\14\44\1\332\11\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\21\44\1\u01b4"+
    "\4\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\21\44\1\u01b5\4\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\21\44\1\u01b6\4\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\1\44\1\u01b7\24\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\5\44\1\u0120\20\44\1\154\1\0\1\154"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\20\44"+
    "\1\u0111\5\44\1\154\1\0\1\154\5\u0159\1\u019f\1\u0159"+
    "\1\345\4\u019f\1\222\5\u019f\3\u0159\4\u019f\12\u0159\4\u019f"+
    "\25\u0182\3\u019f\5\u0159\1\u019f\1\u0159\1\345\4\u019f\1\222"+
    "\5\u019f\3\u01a0\4\u019f\12\u0159\4\u019f\25\u0182\3\u019f\6\73"+
    "\1\213\55\73\1\u01b8\20\73\1\213\11\73\1\u01b9\56\73"+
    "\55\0\1\u01ba\30\0\1\211\12\0\3\212\4\0\12\72"+
    "\3\0\23\72\1\u01bb\2\72\10\0\1\135\1\0\1\136"+
    "\2\135\2\0\6\135\3\137\4\135\12\33\3\135\1\33"+
    "\1\u01bc\24\33\3\135\5\0\1\135\1\0\1\136\2\135"+
    "\2\0\6\135\3\137\4\135\12\33\3\135\13\33\1\u01bd"+
    "\12\33\3\135\5\0\1\135\1\0\1\136\2\135\2\0"+
    "\6\135\3\137\4\135\12\33\3\135\1\33\1\u01be\24\33"+
    "\3\135\5\0\1\135\1\0\1\136\2\135\2\0\6\135"+
    "\3\137\4\135\12\33\3\135\13\33\1\u01bf\12\33\3\135"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\16\44"+
    "\1\u01c0\7\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\u01c1\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\5\44\1\u01c2\20\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\22\44\1\u01c3"+
    "\3\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u01c4\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\1\44\1\u01c5\24\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\4\44\1\u01c6\21\44"+
    "\1\154\1\0\1\154\6\73\1\213\54\73\1\u01a2\21\73"+
    "\1\213\52\73\1\u01c7\15\73\71\0\1\u01c8\14\0\1\211"+
    "\12\0\3\212\4\0\12\72\3\0\1\72\1\u01c9\24\72"+
    "\10\0\1\135\1\0\1\136\2\135\2\0\6\135\3\137"+
    "\4\135\12\33\3\135\13\33\1\u013a\12\33\3\135\5\0"+
    "\1\135\1\0\1\136\2\135\2\0\6\135\3\137\4\135"+
    "\12\33\3\135\5\33\1\u01ca\20\33\3\135\5\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\20\33\1\u016a\5\33\3\135\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\13\44\1\u01cb\12\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\22\44\1\u01cc\3\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\1\44\1\u01cd"+
    "\24\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\16\44\1\u01ce\7\44\1\154\1\0"+
    "\1\154\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\20\44\1\u01cf\5\44\1\154\1\0\1\154\7\0\1\152"+
    "\12\0\3\153\4\0\12\44\3\0\20\44\1\u01d0\5\44"+
    "\1\154\1\0\1\154\7\0\1\152\12\0\3\153\4\0"+
    "\12\44\3\0\5\44\1\u01d1\20\44\1\154\1\0\1\154"+
    "\6\73\1\213\55\73\1\u01d2\12\73\47\0\1\u01d3\36\0"+
    "\1\211\12\0\3\212\4\0\12\72\3\0\13\72\1\u0166"+
    "\12\72\10\0\1\135\1\0\1\136\2\135\2\0\6\135"+
    "\3\137\4\135\5\33\1\u01d4\4\33\3\135\26\33\3\135"+
    "\7\0\1\152\12\0\3\153\4\0\12\44\3\0\5\44"+
    "\1\u01d5\20\44\1\154\1\0\1\154\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\5\44\1\u01d6\20\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\13\44\1\u0120\12\44\1\154\1\0\1\154\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\20\44\1\u01d7"+
    "\5\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\21\44\1\u01d8\4\44\1\154\1\0"+
    "\1\154\6\73\1\213\55\73\1\u01d9\12\73\61\0\1\130"+
    "\22\0\1\135\1\0\1\136\2\135\2\0\6\135\3\137"+
    "\4\135\12\33\3\135\7\33\1\u01da\16\33\3\135\7\0"+
    "\1\152\12\0\3\153\4\0\12\44\3\0\1\44\1\u01db"+
    "\24\44\1\154\1\0\1\154\7\0\1\152\12\0\3\153"+
    "\4\0\12\44\3\0\20\44\1\u01dc\5\44\1\154\1\0"+
    "\1\154\6\73\1\213\56\73\1\u01dd\11\73\5\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\23\33\1\u01de\2\33\3\135\7\0\1\152\12\0"+
    "\3\153\4\0\12\44\3\0\15\44\1\u01df\10\44\1\154"+
    "\1\0\1\154\7\0\1\152\12\0\3\153\4\0\12\44"+
    "\3\0\16\44\1\u01e0\7\44\1\154\1\0\1\154\6\73"+
    "\1\u01e1\70\73\5\0\1\135\1\0\1\136\2\135\2\0"+
    "\6\135\3\137\4\135\12\33\3\135\1\33\1\u01e2\24\33"+
    "\3\135\7\0\1\152\12\0\3\153\4\0\12\44\3\0"+
    "\16\44\1\u01e3\7\44\1\154\1\0\1\154\5\0\1\135"+
    "\1\0\1\136\2\135\2\0\6\135\3\137\4\135\12\33"+
    "\3\135\13\33\1\u016a\12\33\3\135";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26523];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\64\1\2\0\2\1\1\0\1\1\3\0"+
    "\20\1\2\0\3\1\1\0\21\1\2\0\42\1\1\11"+
    "\1\1\3\0\17\1\2\0\6\1\1\11\3\1\1\0"+
    "\7\1\2\0\55\1\3\0\4\1\1\0\13\1\1\0"+
    "\3\1\2\0\54\1\2\0\14\1\2\0\46\1\2\0"+
    "\4\1\2\0\36\1\4\0\32\1\3\0\24\1\3\0"+
    "\14\1\2\0\11\1\2\0\5\1\1\0\3\1\1\0"+
    "\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[483];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error"+yytext());return new Symbol(sym.error);
            }
            // fall through
          case 81: break;
          case 2:
            { 
            }
            // fall through
          case 82: break;
          case 3:
            { return new Symbol(sym.FINLINEA,yytext());
            }
            // fall through
          case 83: break;
          case 4:
            { return new Symbol(sym.COMILLAS,yytext());
            }
            // fall through
          case 84: break;
          case 5:
            { return new Symbol(sym.ERRORSIG,yytext());
            }
            // fall through
          case 85: break;
          case 6:
            { return new Symbol(sym.MOD,yytext());
            }
            // fall through
          case 86: break;
          case 7:
            { return new Symbol(sym.ERROROPARBO,yytext());
            }
            // fall through
          case 87: break;
          case 8:
            { return new Symbol(sym.PARENTESISA,yytext());
            }
            // fall through
          case 88: break;
          case 9:
            { return new Symbol(sym.PARENTESISC,yytext());
            }
            // fall through
          case 89: break;
          case 10:
            { return new Symbol(sym.MULTIPLICACION,yytext());
            }
            // fall through
          case 90: break;
          case 11:
            { return new Symbol(sym.SUMA,yytext());
            }
            // fall through
          case 91: break;
          case 12:
            { return new Symbol(sym.COMA,yytext());
            }
            // fall through
          case 92: break;
          case 13:
            { return new Symbol(sym.RESTA,yytext());
            }
            // fall through
          case 93: break;
          case 14:
            { return new Symbol(sym.PUNTO,yytext());
            }
            // fall through
          case 94: break;
          case 15:
            { return new Symbol(sym.DIVISION,yytext());
            }
            // fall through
          case 95: break;
          case 16:
            { return new Symbol(sym.NUMERO,Integer.parseInt(yytext()));
            }
            // fall through
          case 96: break;
          case 17:
            { return new Symbol(sym.DOSPUNTOS,yytext());
            }
            // fall through
          case 97: break;
          case 18:
            { return new Symbol(sym.PUNTOYCOMA,yytext());
            }
            // fall through
          case 98: break;
          case 19:
            { return new Symbol(sym.OPRELACIONAL,yytext());
            }
            // fall through
          case 99: break;
          case 20:
            { return new Symbol(sym.SIGUAL,yytext());
            }
            // fall through
          case 100: break;
          case 21:
            { return new Symbol(sym.NAMECLASS,yytext());
            }
            // fall through
          case 101: break;
          case 22:
            { return new Symbol(sym.CORCHETEA,yytext());
            }
            // fall through
          case 102: break;
          case 23:
            { return new Symbol(sym.CORCHETEC,yytext());
            }
            // fall through
          case 103: break;
          case 24:
            { return new Symbol(sym.EXPONENTE,yytext());
            }
            // fall through
          case 104: break;
          case 25:
            { System.out.println("Identificador"+yytext());return new Symbol(sym.IDENTIFICADOR,yytext());
            }
            // fall through
          case 105: break;
          case 26:
            { return new Symbol(sym.LLAVEA,yytext());
            }
            // fall through
          case 106: break;
          case 27:
            { return new Symbol(sym.LLAVEC,yytext());
            }
            // fall through
          case 107: break;
          case 28:
            { return new Symbol(sym.NEGAR,yytext());
            }
            // fall through
          case 108: break;
          case 29:
            { return new Symbol(sym.ERRORNAMECLASS,yytext());
            }
            // fall through
          case 109: break;
          case 30:
            { return new Symbol(sym.CADTEXTO,yytext());
            }
            // fall through
          case 110: break;
          case 31:
            { return new Symbol(sym.ERRORSIGP,yytext());
            }
            // fall through
          case 111: break;
          case 32:
            { return new Symbol(sym.OPATRIBUCION,yytext());
            }
            // fall through
          case 112: break;
          case 33:
            { return new Symbol(sym.OPARBOOL,yytext());
            }
            // fall through
          case 113: break;
          case 34:
            { return new Symbol(sym.ERRORSIGNOS1,yytext());
            }
            // fall through
          case 114: break;
          case 35:
            { return new Symbol(sym.ERRORSIGNOS,yytext());
            }
            // fall through
          case 115: break;
          case 36:
            { return new Symbol(sym.OPINCREMENTO,yytext());
            }
            // fall through
          case 116: break;
          case 37:
            { return new Symbol(sym.ERRORCERO,yytext());
            }
            // fall through
          case 117: break;
          case 38:
            { return new Symbol(sym.ERRORNUM,yytext());
            }
            // fall through
          case 118: break;
          case 39:
            { return new Symbol(sym.ERROREAL,yytext());
            }
            // fall through
          case 119: break;
          case 40:
            { return new Symbol(sym.DOBLEIGUAL,yytext());
            }
            // fall through
          case 120: break;
          case 41:
            { return new Symbol(sym.ERRORSIGNOS2,yytext());
            }
            // fall through
          case 121: break;
          case 42:
            { return new Symbol(sym.ERRORID,yytext());
            }
            // fall through
          case 122: break;
          case 43:
            { return new Symbol(sym.SI,yytext());
            }
            // fall through
          case 123: break;
          case 44:
            { return new Symbol(sym.ERRORARIT,yytext());
            }
            // fall through
          case 124: break;
          case 45:
            { return new Symbol(sym.ERROROPINC,yytext());
            }
            // fall through
          case 125: break;
          case 46:
            { return new Symbol(sym.ERRORDECIM,yytext());
            }
            // fall through
          case 126: break;
          case 47:
            { return new Symbol(sym.OPBOLEANO,yytext());
            }
            // fall through
          case 127: break;
          case 48:
            { return new Symbol(sym.DECIMAL,Float.parseFloat(yytext()));
            }
            // fall through
          case 128: break;
          case 49:
            { return new Symbol(sym.ERRORCOM,yytext());
            }
            // fall through
          case 129: break;
          case 50:
            { return new Symbol(sym.LEER,yytext());
            }
            // fall through
          case 130: break;
          case 51:
            { return new Symbol(sym.NULO,yytext());
            }
            // fall through
          case 131: break;
          case 52:
            { return new Symbol(sym.PARA,yytext());
            }
            // fall through
          case 132: break;
          case 53:
            { return new Symbol(sym.FUNespREAL,yytext());
            }
            // fall through
          case 133: break;
          case 54:
            { return new Symbol(sym.REAL,yytext());
            }
            // fall through
          case 134: break;
          case 55:
            { return new Symbol(sym.SINO,yytext());
            }
            // fall through
          case 135: break;
          case 56:
            { return new Symbol(sym.CLASE,yytext());
            }
            // fall through
          case 136: break;
          case 57:
            { return new Symbol(sym.DESDE,yytext());
            }
            // fall through
          case 137: break;
          case 58:
            { return new Symbol(sym.FINSI,yytext());
            }
            // fall through
          case 138: break;
          case 59:
            { return new Symbol(sym.HACER,yytext());
            }
            // fall through
          case 139: break;
          case 60:
            { return new Symbol(sym.CADENA,yytext());
            }
            // fall through
          case 140: break;
          case 61:
            { return new Symbol(sym.ENTERO,yytext());
            }
            // fall through
          case 141: break;
          case 62:
            { return new Symbol(sym.BOLEANO,yytext());
            }
            // fall through
          case 142: break;
          case 63:
            { return new Symbol(sym.INCLUIR,yytext());
            }
            // fall through
          case 143: break;
          case 64:
            { return new Symbol(sym.METODO,yytext());
            }
            // fall through
          case 144: break;
          case 65:
            { return new Symbol(sym.DEVOLVER,yytext());
            }
            // fall through
          case 145: break;
          case 66:
            { return new Symbol(sym.ELIMINAR,yytext());
            }
            // fall through
          case 146: break;
          case 67:
            { return new Symbol(sym.ENTONCES,yytext());
            }
            // fall through
          case 147: break;
          case 68:
            { return new Symbol(sym.ESCRIBIR,yytext());
            }
            // fall through
          case 148: break;
          case 69:
            { return new Symbol(sym.ESTATICO,yytext());
            }
            // fall through
          case 149: break;
          case 70:
            { return new Symbol(sym.MIENTRAS,yytext());
            }
            // fall through
          case 150: break;
          case 71:
            { return new Symbol(sym.TDISPONIBLEP,yytext());
            }
            // fall through
          case 151: break;
          case 72:
            { return new Symbol(sym.TDISPONIBLEM,yytext());
            }
            // fall through
          case 152: break;
          case 73:
            { return new Symbol(sym.PRINCIPAL,yytext());
            }
            // fall through
          case 153: break;
          case 74:
            { return new Symbol(sym.DESTRUCTOR,yytext());
            }
            // fall through
          case 154: break;
          case 75:
            { return new Symbol(sym.INSTANCIAR,yytext());
            }
            // fall through
          case 155: break;
          case 76:
            { return new Symbol(sym.CONSTRUCTOR,yytext());
            }
            // fall through
          case 156: break;
          case 77:
            { return new Symbol(sym.PROPIEDAD,yytext());
            }
            // fall through
          case 157: break;
          case 78:
            { return new Symbol(sym.CADENAaENTERO,yytext());
            }
            // fall through
          case 158: break;
          case 79:
            { return new Symbol(sym.EXTENCIONBIB,yytext());
            }
            // fall through
          case 159: break;
          case 80:
            { return new Symbol(sym.CADaBOOL,yytext());
            }
            // fall through
          case 160: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
