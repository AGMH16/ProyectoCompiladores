
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package gt.edu.url.compiladores.prueba1;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\234\000\002\002\004\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\007\000\002\010\007\000\002" +
    "\010\007\000\002\010\007\000\002\010\010\000\002\010" +
    "\010\000\002\010\010\000\002\010\010\000\002\010\010" +
    "\000\002\010\010\000\002\010\010\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\011\000\002" +
    "\010\011\000\002\010\011\000\002\010\011\000\002\010" +
    "\011\000\002\010\011\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\012\000\002\010\012\000" +
    "\002\010\012\000\002\010\012\000\002\010\012\000\002" +
    "\010\013\000\002\010\013\000\002\010\013\000\002\010" +
    "\013\000\002\010\013\000\002\010\013\000\002\010\013" +
    "\000\002\010\013\000\002\010\013\000\002\010\014\000" +
    "\002\010\014\000\002\010\014\000\002\010\014\000\002" +
    "\010\014\000\002\010\015\000\002\010\015\000\002\010" +
    "\015\000\002\010\015\000\002\010\015\000\002\022\004" +
    "\000\002\022\004\000\002\022\004\000\002\022\004\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\006\000\002\022\006" +
    "\000\002\022\006\000\002\022\006\000\002\022\006\000" +
    "\002\022\006\000\002\022\006\000\002\022\006\000\002" +
    "\022\007\000\002\022\007\000\002\022\007\000\002\022" +
    "\007\000\002\025\005\000\002\025\005\000\002\025\005" +
    "\000\002\025\005\000\002\025\006\000\002\025\006\000" +
    "\002\025\006\000\002\025\006\000\002\025\007\000\002" +
    "\025\007\000\002\025\007\000\002\025\007\000\002\023" +
    "\004\000\002\023\006\000\002\023\006\000\002\023\006" +
    "\000\002\023\006\000\002\023\007\000\002\023\007\000" +
    "\002\023\007\000\002\023\007\000\002\007\004\000\002" +
    "\007\004\000\002\007\004\000\002\007\004\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\006\000\002\007\006\000\002\007\006\000" +
    "\002\007\006\000\002\006\003\000\002\006\005\000\002" +
    "\006\005\000\002\006\007\000\002\005\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\007\000\002\003\003" +
    "\000\002\003\005\000\002\003\005\000\002\003\007\000" +
    "\002\004\003\000\002\004\005\000\002\004\005\000\002" +
    "\004\007\000\002\017\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\004\000\002\020\004\000\002" +
    "\020\004\000\002\021\004\000\002\021\005\000\002\021" +
    "\006\000\002\011\003\000\002\011\005\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\014\003\000\002\014\005\000\002\015\003\000\002" +
    "\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\020\040\013\041\004\043\006\044\020\056" +
    "\012\057\011\103\017\001\002\000\004\103\u0100\001\002" +
    "\000\004\002\uffff\001\002\000\004\103\377\001\002\000" +
    "\004\002\376\001\002\000\004\002\ufffd\001\002\000\016" +
    "\031\335\032\332\101\273\102\265\103\274\104\333\001" +
    "\002\000\004\103\327\001\002\000\004\103\326\001\002" +
    "\000\004\002\ufffc\001\002\000\004\002\ufffe\001\002\000" +
    "\004\002\000\001\002\000\006\011\264\027\101\001\002" +
    "\000\004\103\022\001\002\000\006\002\uff98\004\220\001" +
    "\002\000\014\002\uff8f\004\uff8f\011\024\027\025\035\023" +
    "\001\002\000\004\103\216\001\002\000\004\033\213\001" +
    "\002\000\006\030\027\101\026\001\002\000\004\030\172" +
    "\001\002\000\006\002\ufff8\004\030\001\002\000\016\002" +
    "\ufff4\040\031\041\036\043\035\044\034\103\032\001\002" +
    "\000\004\103\152\001\002\000\006\011\100\027\101\001" +
    "\002\000\004\002\uffec\001\002\000\004\103\077\001\002" +
    "\000\004\103\057\001\002\000\004\103\037\001\002\000" +
    "\004\027\040\001\002\000\006\030\042\101\041\001\002" +
    "\000\004\030\045\001\002\000\006\002\ufffa\004\043\001" +
    "\002\000\016\002\ufff6\040\031\041\036\043\035\044\034" +
    "\103\032\001\002\000\004\002\uffee\001\002\000\004\011" +
    "\046\001\002\000\004\025\047\001\002\000\004\104\050" +
    "\001\002\000\006\026\uff6b\035\055\001\002\000\004\026" +
    "\052\001\002\000\006\002\uffda\004\053\001\002\000\016" +
    "\002\uffd1\040\031\041\036\043\035\044\034\103\032\001" +
    "\002\000\004\002\uffcc\001\002\000\004\104\050\001\002" +
    "\000\004\026\uff6a\001\002\000\004\027\060\001\002\000" +
    "\006\030\062\101\061\001\002\000\004\030\065\001\002" +
    "\000\006\002\ufff9\004\063\001\002\000\016\002\ufff5\040" +
    "\031\041\036\043\035\044\034\103\032\001\002\000\004" +
    "\002\uffed\001\002\000\004\011\066\001\002\000\004\025" +
    "\067\001\002\000\004\043\071\001\002\000\004\026\074" +
    "\001\002\000\006\026\uff6d\035\072\001\002\000\004\043" +
    "\071\001\002\000\004\026\uff6c\001\002\000\006\002\uffd9" +
    "\004\075\001\002\000\016\002\uffd0\040\031\041\036\043" +
    "\035\044\034\103\032\001\002\000\004\002\uffcb\001\002" +
    "\000\004\027\025\001\002\000\004\071\121\001\002\000" +
    "\004\101\102\001\002\000\004\030\103\001\002\000\004" +
    "\011\104\001\002\000\012\033\106\101\105\102\110\104" +
    "\107\001\002\000\006\002\ufff3\004\117\001\002\000\006" +
    "\002\ufff0\004\115\001\002\000\006\002\ufff1\004\113\001" +
    "\002\000\006\002\ufff2\004\111\001\002\000\016\002\uffe9" +
    "\040\031\041\036\043\035\044\034\103\032\001\002\000" +
    "\004\002\uffe1\001\002\000\016\002\uffe5\040\031\041\036" +
    "\043\035\044\034\103\032\001\002\000\004\002\uffe0\001" +
    "\002\000\016\002\uffe4\040\031\041\036\043\035\044\034" +
    "\103\032\001\002\000\004\002\uffdd\001\002\000\016\002" +
    "\uffea\040\031\041\036\043\035\044\034\103\032\001\002" +
    "\000\004\002\uffe2\001\002\000\012\040\122\041\125\043" +
    "\124\044\123\001\002\000\004\027\145\001\002\000\004" +
    "\027\140\001\002\000\004\027\133\001\002\000\004\027" +
    "\126\001\002\000\004\101\127\001\002\000\004\030\130" +
    "\001\002\000\006\002\uffe8\004\131\001\002\000\016\002" +
    "\uffdf\040\031\041\036\043\035\044\034\103\032\001\002" +
    "\000\004\002\uffd5\001\002\000\004\101\134\001\002\000" +
    "\004\030\135\001\002\000\006\002\uffe7\004\136\001\002" +
    "\000\016\002\uffde\040\031\041\036\043\035\044\034\103" +
    "\032\001\002\000\004\002\uffd4\001\002\000\004\101\141" +
    "\001\002\000\004\030\142\001\002\000\006\002\uffe6\004" +
    "\143\001\002\000\016\002\uffdc\040\031\041\036\043\035" +
    "\044\034\103\032\001\002\000\004\002\uffd3\001\002\000" +
    "\004\101\146\001\002\000\004\030\147\001\002\000\006" +
    "\002\uffeb\004\150\001\002\000\016\002\uffe3\040\031\041" +
    "\036\043\035\044\034\103\032\001\002\000\004\002\uffd6" +
    "\001\002\000\004\027\153\001\002\000\006\030\155\101" +
    "\154\001\002\000\004\030\160\001\002\000\006\002\ufffb" +
    "\004\156\001\002\000\016\002\ufff7\040\031\041\036\043" +
    "\035\044\034\103\032\001\002\000\004\002\uffef\001\002" +
    "\000\004\011\161\001\002\000\004\025\162\001\002\000" +
    "\004\102\164\001\002\000\004\026\167\001\002\000\006" +
    "\026\uff6f\035\165\001\002\000\004\102\164\001\002\000" +
    "\004\026\uff6e\001\002\000\006\002\uffdb\004\170\001\002" +
    "\000\016\002\uffd2\040\031\041\036\043\035\044\034\103" +
    "\032\001\002\000\004\002\uffcd\001\002\000\004\011\173" +
    "\001\002\000\004\025\174\001\002\000\006\031\177\032" +
    "\176\001\002\000\004\026\210\001\002\000\006\026\uff67" +
    "\035\206\001\002\000\006\026\uff69\035\204\001\002\000" +
    "\004\026\201\001\002\000\006\002\uffd8\004\202\001\002" +
    "\000\016\002\uffcf\040\031\041\036\043\035\044\034\103" +
    "\032\001\002\000\004\002\uffca\001\002\000\004\031\177" +
    "\001\002\000\004\026\uff68\001\002\000\004\032\176\001" +
    "\002\000\004\026\uff66\001\002\000\006\002\uffd7\004\211" +
    "\001\002\000\016\002\uffce\040\031\041\036\043\035\044" +
    "\034\103\032\001\002\000\004\002\uffc9\001\002\000\010" +
    "\002\uff8d\004\uff8d\035\214\001\002\000\004\103\216\001" +
    "\002\000\006\002\uff8c\004\uff8c\001\002\000\012\002\uff8f" +
    "\004\uff8f\011\024\035\023\001\002\000\006\002\uff8e\004" +
    "\uff8e\001\002\000\014\002\uff94\040\222\041\224\043\225" +
    "\044\223\001\002\000\004\002\uff90\001\002\000\004\103" +
    "\253\001\002\000\004\103\216\001\002\000\004\103\240" +
    "\001\002\000\004\103\227\001\002\000\006\002\uff99\004" +
    "\236\001\002\000\012\002\uff83\004\uff83\011\231\035\230" +
    "\001\002\000\004\103\227\001\002\000\004\101\232\001" +
    "\002\000\010\002\uff81\004\uff81\035\233\001\002\000\004" +
    "\103\227\001\002\000\006\002\uff80\004\uff80\001\002\000" +
    "\006\002\uff82\004\uff82\001\002\000\014\002\uff95\040\222" +
    "\041\224\043\225\044\223\001\002\000\004\002\uff91\001" +
    "\002\000\012\002\uff87\004\uff87\011\244\035\245\001\002" +
    "\000\006\002\uff9a\004\242\001\002\000\014\002\uff96\040" +
    "\222\041\224\043\225\044\223\001\002\000\004\002\uff92" +
    "\001\002\000\004\104\247\001\002\000\004\103\240\001" +
    "\002\000\006\002\uff86\004\uff86\001\002\000\010\002\uff85" +
    "\004\uff85\035\250\001\002\000\004\103\240\001\002\000" +
    "\006\002\uff84\004\uff84\001\002\000\006\002\uff9b\004\262" +
    "\001\002\000\012\002\uff8b\004\uff8b\011\255\035\254\001" +
    "\002\000\004\103\253\001\002\000\004\102\256\001\002" +
    "\000\010\002\uff89\004\uff89\035\257\001\002\000\004\103" +
    "\253\001\002\000\006\002\uff88\004\uff88\001\002\000\006" +
    "\002\uff8a\004\uff8a\001\002\000\014\002\uff97\040\222\041" +
    "\224\043\225\044\223\001\002\000\004\002\uff93\001\002" +
    "\000\020\031\272\032\270\071\121\101\273\102\265\103" +
    "\274\104\266\001\002\000\030\002\uff77\004\uff77\012\uff77" +
    "\013\uff77\014\uff77\015\uff77\016\uff77\036\uff77\101\273\102" +
    "\265\103\274\001\002\000\006\002\uffae\004\323\001\002" +
    "\000\022\002\uffaf\004\321\012\301\013\276\014\277\015" +
    "\303\016\300\036\302\001\002\000\006\002\uffb0\004\317" +
    "\001\002\000\022\002\uff7f\004\uff7f\012\uff7f\013\uff7f\014" +
    "\uff7f\015\uff7f\016\uff7f\036\uff7f\001\002\000\006\002\uffad" +
    "\004\313\001\002\000\030\002\uff78\004\uff78\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\036\uff78\101\273\102\265" +
    "\103\274\001\002\000\030\002\uff76\004\uff76\012\uff76\013" +
    "\uff76\014\uff76\015\uff76\016\uff76\036\uff76\101\273\102\265" +
    "\103\274\001\002\000\022\002\uff73\004\uff73\012\301\013" +
    "\276\014\277\015\303\016\300\036\302\001\002\000\010" +
    "\101\273\102\265\103\274\001\002\000\010\101\273\102" +
    "\265\103\274\001\002\000\010\101\273\102\265\103\274" +
    "\001\002\000\010\101\273\102\265\103\274\001\002\000" +
    "\010\101\273\102\265\103\274\001\002\000\010\101\273" +
    "\102\265\103\274\001\002\000\022\002\uff7b\004\uff7b\012" +
    "\301\013\276\014\277\015\303\016\300\036\302\001\002" +
    "\000\022\002\uff7a\004\uff7a\012\301\013\276\014\277\015" +
    "\303\016\300\036\302\001\002\000\022\002\uff7d\004\uff7d" +
    "\012\301\013\276\014\277\015\303\016\300\036\302\001" +
    "\002\000\022\002\uff7e\004\uff7e\012\301\013\276\014\277" +
    "\015\303\016\300\036\302\001\002\000\022\002\uff79\004" +
    "\uff79\012\301\013\276\014\277\015\303\016\300\036\302" +
    "\001\002\000\022\002\uff7c\004\uff7c\012\301\013\276\014" +
    "\277\015\303\016\300\036\302\001\002\000\022\002\uff75" +
    "\004\uff75\012\301\013\276\014\277\015\303\016\300\036" +
    "\302\001\002\000\006\002\uffaa\103\314\001\002\000\004" +
    "\011\316\001\002\000\004\002\uffa6\001\002\000\016\031" +
    "\272\032\270\101\273\102\265\103\274\104\266\001\002" +
    "\000\006\002\uffac\103\314\001\002\000\004\002\uffa8\001" +
    "\002\000\006\002\uffa9\103\314\001\002\000\004\002\uffa5" +
    "\001\002\000\006\002\uffab\103\314\001\002\000\004\002" +
    "\uffa7\001\002\000\022\002\uff74\004\uff74\012\301\013\276" +
    "\014\277\015\303\016\300\036\302\001\002\000\014\002" +
    "\uff8b\004\uff8b\011\255\027\153\035\254\001\002\000\006" +
    "\002\uff72\004\330\001\002\000\006\002\uff71\056\012\001" +
    "\002\000\004\002\uff70\001\002\000\010\002\uffc8\004\372" +
    "\012\340\001\002\000\010\002\uffc7\004\365\012\340\001" +
    "\002\000\022\002\uffc5\004\360\012\351\013\276\014\277" +
    "\015\303\016\300\036\302\001\002\000\010\002\uffc6\004" +
    "\337\012\340\001\002\000\006\002\uffbf\004\355\001\002" +
    "\000\006\002\uffc3\057\011\001\002\000\004\104\341\001" +
    "\002\000\010\002\uffa4\004\uffa4\012\342\001\002\000\016" +
    "\031\346\032\343\101\273\102\265\103\274\104\344\001" +
    "\002\000\010\002\uffa3\004\uffa3\012\340\001\002\000\010" +
    "\002\uffa1\004\uffa1\012\340\001\002\000\022\002\uffa0\004" +
    "\uffa0\012\351\013\276\014\277\015\303\016\300\036\302" +
    "\001\002\000\010\002\uffa2\004\uffa2\012\340\001\002\000" +
    "\006\002\uff9e\004\uff9e\001\002\000\006\002\uff9c\004\uff9c" +
    "\001\002\000\012\101\273\102\265\103\274\104\341\001" +
    "\002\000\006\002\uff9d\004\uff9d\001\002\000\006\002\uff9f" +
    "\004\uff9f\001\002\000\004\002\uffbb\001\002\000\006\002" +
    "\uffb6\057\011\001\002\000\004\002\uffb3\001\002\000\006" +
    "\002\uffbd\004\362\001\002\000\006\002\uffc1\057\011\001" +
    "\002\000\004\002\uffb9\001\002\000\006\002\uffb5\057\011" +
    "\001\002\000\004\002\uffb2\001\002\000\006\002\uffbe\004" +
    "\367\001\002\000\006\002\uffc2\057\011\001\002\000\004" +
    "\002\uffba\001\002\000\006\002\uffb7\057\011\001\002\000" +
    "\004\002\uffb1\001\002\000\006\002\uffc0\004\374\001\002" +
    "\000\006\002\uffc4\057\011\001\002\000\004\002\uffbc\001" +
    "\002\000\006\002\uffb8\057\011\001\002\000\004\002\uffb4" +
    "\001\002\000\004\002\001\001\002\000\014\002\uff83\004" +
    "\uff83\011\231\027\060\035\230\001\002\000\014\002\uff87" +
    "\004\uff87\011\244\027\040\035\245\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\376\000\016\007\004\010\015\016\006\021\014\022" +
    "\007\025\013\001\001\000\004\003\240\001\001\000\002" +
    "\001\001\000\004\004\225\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\333\020\270\001\001\000\002" +
    "\001\001\000\004\005\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\053\001\001\000\002\001\001\000\004\013\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\111\001\001\000\002\001\001\000\004" +
    "\010\113\001\001\000\002\001\001\000\004\010\115\001" +
    "\001\000\002\001\001\000\004\010\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\162\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\165\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\174\015" +
    "\177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\202\001\001\000\002\001\001\000\004\014\204\001\001" +
    "\000\002\001\001\000\004\015\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\211\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\214\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\220\001\001\000\002\001\001\000\004\005\251\001" +
    "\001\000\004\006\020\001\001\000\004\003\240\001\001" +
    "\000\004\004\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\233\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\250\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\260\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\257\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\262\001\001\000\002\001" +
    "\001\000\006\017\266\020\270\001\001\000\006\017\324" +
    "\020\270\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\311\020\270\001\001\000\006\017\274\020\270\001" +
    "\001\000\002\001\001\000\006\017\310\020\270\001\001" +
    "\000\006\017\307\020\270\001\001\000\006\017\306\020" +
    "\270\001\001\000\006\017\305\020\270\001\001\000\006" +
    "\017\304\020\270\001\001\000\006\017\303\020\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\314\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\017\266\020\270\001\001\000" +
    "\004\025\317\001\001\000\002\001\001\000\004\025\321" +
    "\001\001\000\002\001\001\000\004\025\323\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\330\001\001\000\002\001\001\000" +
    "\004\023\370\001\001\000\004\023\363\001\001\000\004" +
    "\023\356\001\001\000\004\023\335\001\001\000\002\001" +
    "\001\000\004\022\353\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\344\020\270\001\001\000\004\023" +
    "\352\001\001\000\004\023\351\001\001\000\004\023\347" +
    "\001\001\000\004\023\346\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\017\305\020\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\355\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\360\001\001\000\002\001\001\000\004\022\362\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\365" +
    "\001\001\000\002\001\001\000\004\022\367\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\372\001\001" +
    "\000\002\001\001\000\004\022\374\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Sintactico$actions {
  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action_part00000000(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= LECTURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S ::= ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("S",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL NUMERO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL NUMERO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL DECIMAL FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL CADTEXTO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARREGLOS ::= IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL OPBOLEANO FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR REAL CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR CADENA CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR ENTERO CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARREGLOS ::= IDENTIFICADOR SIGUAL INSTANCIAR BOLEANO CORCHETEA NUMERO CORCHETEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARREGLOS ::= REAL IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA DECIMALES LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARREGLOS ::= CADENA IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA CADENAS LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARREGLOS ::= ENTERO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA ENTEROS LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSNUM LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARREGLOS ::= BOLEANO IDENTIFICADOR CORCHETEA NUMERO CORCHETEC SIGUAL LLAVEA BOLEANOSTEXT LLAVEC FINLINEA ARREGLOS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ARREGLOS",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ESCRITURA ::= ESCRIBIR BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ESCRITURA ::= ESCRIBIR CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ESCRITURA ::= ESCRIBIR BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ESCRITURA ::= ESCRIBIR OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ESCRITURA ::= ESCRIBIR BOOLNUM FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ESCRITURA ::= ESCRIBIR BOOLTEXT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ESCRITURA ::= ESCRIBIR CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ESCRITURA ::= ESCRIBIR OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ESCRITURA ::= ESCRIBIR BOOLNUM FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ESCRITURA ::= ESCRIBIR BOOLTEXT FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ESCRITURA ::= ESCRIBIR CADTEXTO FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ESCRITURA ::= ESCRIBIR OPERACION FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ESCRITURA ::= ESCRIBIR BOOLNUM CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ESCRITURA ::= ESCRIBIR BOOLTEXT CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ESCRITURA ::= ESCRIBIR OPERACION CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ESCRITURA ::= ESCRIBIR CADTEXTO CONTENIDOESCRI FINLINEA ESCRITURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ESCRITURA",16, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLNUM FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ASIGNAR ::= IDENTIFICADOR SIGUAL CADTEXTO FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ASIGNAR ::= IDENTIFICADOR SIGUAL BOOLTEXT FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ASIGNAR ::= IDENTIFICADOR SIGUAL OPERACION FINLINEA ASIGNAR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIGNAR",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CONTENIDOESCRI ::= SUMA CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLNUM CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA BOOLTEXT CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA CADTEXTO CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CONTENIDOESCRI ::= SUMA CADTEXTO SUMA OPERACION CONTENIDOESCRI 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CONTENIDOESCRI",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECVARIABLES ::= REAL IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECVARIABLES ::= CADENA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECVARIABLES ::= ENTERO IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECVARIABLES ::= BOLEANO IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECVARIABLES ::= REAL IDREAL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECVARIABLES ::= CADENA IDCAD FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECVARIABLES ::= ENTERO IDINT FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECVARIABLES ::= BOLEANO IDBOOL FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECVARIABLES ::= REAL IDREAL FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECVARIABLES ::= CADENA IDCAD FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECVARIABLES ::= ENTERO IDINT FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECVARIABLES ::= BOLEANO IDBOOL FINLINEA DECVARIABLES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECVARIABLES",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // IDBOOL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // IDBOOL ::= IDENTIFICADOR COMA IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // IDBOOL ::= IDENTIFICADOR SIGUAL OPBOLEANO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // IDBOOL ::= IDENTIFICADOR SIGUAL OPBOLEANO COMA IDBOOL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDBOOL",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // IDREAL ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // IDREAL ::= IDENTIFICADOR COMA IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // IDREAL ::= IDENTIFICADOR SIGUAL DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // IDREAL ::= IDENTIFICADOR SIGUAL DECIMAL COMA IDREAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDREAL",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // IDCAD ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IDCAD ::= IDENTIFICADOR COMA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IDCAD ::= IDENTIFICADOR SIGUAL CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IDCAD ::= IDENTIFICADOR SIGUAL CADTEXTO COMA IDCAD 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDCAD",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IDINT ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IDINT ::= IDENTIFICADOR COMA IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // IDINT ::= IDENTIFICADOR SIGUAL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // IDINT ::= IDENTIFICADOR SIGUAL NUMERO COMA IDINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IDINT",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OPERACION ::= NUMEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OPERACION ::= OPERACION MOD OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OPERACION ::= OPERACION SUMA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // OPERACION ::= OPERACION RESTA OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // OPERACION ::= OPERACION DIVISION OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OPERACION ::= OPERACION EXPONENTE OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OPERACION ::= OPERACION MULTIPLICACION OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPERACION",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // NUMEROS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // NUMEROS ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // NUMEROS ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // NUMEROS ::= NUMERO OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // NUMEROS ::= DECIMAL OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // NUMEROS ::= IDENTIFICADOR OPERACION 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NUMEROS",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // LECTURA ::= LEER IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // LECTURA ::= LEER IDENTIFICADOR FINLINEA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // LECTURA ::= LEER IDENTIFICADOR FINLINEA LECTURA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LECTURA",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECIMALES ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECIMALES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECIMALES ::= DECIMAL COMA DECIMALES 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("DECIMALES",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ENTEROS ::= ENTERO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTEROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ENTEROS ::= ENTERO COMA ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENTEROS",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // CADENAS ::= CADTEXTO 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CADENAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // CADENAS ::= CADTEXTO COMA CADENAS 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CADENAS",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // BOLEANOSTEXT ::= BOOLTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSTEXT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // BOLEANOSTEXT ::= BOOLTEXT COMA BOLEANOSTEXT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSTEXT",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // BOLEANOSNUM ::= BOOLNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSNUM",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // BOLEANOSNUM ::= BOOLNUM COMA BOLEANOSNUM 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("BOLEANOSNUM",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
              return CUP$Sintactico$do_action_part00000000(
                               CUP$Sintactico$act_num,
                               CUP$Sintactico$parser,
                               CUP$Sintactico$stack,
                               CUP$Sintactico$top);
    }
}

}
