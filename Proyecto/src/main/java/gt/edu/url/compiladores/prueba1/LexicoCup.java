// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexicocup.flex

package gt.edu.url.compiladores.prueba1;
import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class LexicoCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\0\1\7\1\31"+
    "\1\32\1\33\1\34\1\35\3\33\1\36\4\33\1\37"+
    "\1\40\1\41\1\33\1\42\1\33\1\43\6\33\1\44"+
    "\1\0\1\45\1\46\1\47\1\0\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\2\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\61\1\67\1\70\1\71"+
    "\1\72\1\73\1\61\1\74\1\61\1\75\1\76\1\77"+
    "\1\100\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\1\21\1\22\1\23\1\24\7\25\1\26"+
    "\1\27\1\30\1\1\20\31\1\32\1\7\1\33\2\0"+
    "\1\34\1\35\1\0\1\36\3\0\1\5\3\37\1\40"+
    "\2\7\1\41\1\7\1\42\1\43\1\44\1\43\1\20"+
    "\1\37\1\2\2\0\2\45\1\46\1\0\3\47\1\23"+
    "\2\35\1\50\2\35\5\25\1\41\1\25\2\51\2\0"+
    "\2\52\1\31\1\52\27\31\1\53\2\31\1\43\3\35"+
    "\2\36\3\0\2\5\1\52\1\5\1\37\3\54\1\7"+
    "\1\42\1\43\3\55\1\43\2\0\4\37\1\35\5\2"+
    "\1\0\2\56\1\57\1\60\1\46\1\56\1\47\2\0"+
    "\2\35\4\25\2\51\1\35\2\52\37\31\1\43\2\35"+
    "\1\61\3\0\1\52\1\54\1\55\1\35\1\0\3\37"+
    "\1\2\2\35\5\2\1\0\3\60\2\0\2\35\4\25"+
    "\3\35\2\52\21\31\1\62\3\31\1\63\1\64\4\31"+
    "\1\65\1\66\1\67\2\31\1\35\1\52\2\0\2\35"+
    "\6\2\2\56\2\60\2\0\2\35\3\25\1\23\1\25"+
    "\2\35\1\52\2\31\1\70\1\31\1\71\7\31\1\72"+
    "\1\73\1\74\13\31\2\35\2\52\2\0\2\2\1\60"+
    "\1\56\2\0\1\35\1\47\7\25\2\52\1\31\1\75"+
    "\4\31\1\76\15\31\1\52\4\0\1\35\1\77\5\25"+
    "\1\100\10\31\1\101\2\31\1\102\6\31\2\52\3\0"+
    "\1\35\4\25\5\31\1\103\1\104\1\105\1\106\1\107"+
    "\1\31\1\110\1\111\1\112\1\31\3\0\1\35\3\25"+
    "\1\113\7\31\2\0\1\35\1\25\4\31\1\114\1\115"+
    "\1\31\2\0\1\25\2\31\1\116\1\117\1\0\1\25"+
    "\2\31\1\0\1\25\1\31\1\120\1\121\1\25\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\202\0\303\0\u0104\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u01c7\0\u02cb\0\u030c\0\u034d"+
    "\0\u030c\0\u038e\0\u03cf\0\u0410\0\u0451\0\u030c\0\u030c\0\u0492"+
    "\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a"+
    "\0\u06db\0\u030c\0\u071c\0\u075d\0\u079e\0\u07df\0\u0820\0\u0861"+
    "\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69"+
    "\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef\0\u0bae\0\u0c30"+
    "\0\u0c71\0\u0c30\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7"+
    "\0\u0e38\0\u071c\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0f3c"+
    "\0\u0fbe\0\u0fff\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185"+
    "\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d"+
    "\0\u13ce\0\u134c\0\u140f\0\u1450\0\u0c30\0\u1491\0\u14d2\0\u1513"+
    "\0\u1554\0\u1595\0\u15d6\0\u1617\0\u0596\0\u1658\0\u1699\0\u16da"+
    "\0\u171b\0\u075d\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1"+
    "\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9"+
    "\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1"+
    "\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9"+
    "\0\u1efa\0\u1f3b\0\u1f7c\0\u1fbd\0\101\0\u1ffe\0\u203f\0\u2080"+
    "\0\u20c1\0\u2102\0\u2143\0\u2184\0\u21c5\0\u2206\0\u0efb\0\u2247"+
    "\0\u2288\0\u22c9\0\u230a\0\u234b\0\u1081\0\u238c\0\u23cd\0\u240e"+
    "\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616"+
    "\0\101\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd"+
    "\0\u281e\0\u285f\0\u27dd\0\u28a0\0\u28e1\0\u2922\0\u2963\0\u29a4"+
    "\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac"+
    "\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73\0\u2db4"+
    "\0\u2df5\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4"+
    "\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b\0\u33cc"+
    "\0\u340d\0\u344e\0\u348f\0\u1ffe\0\u34d0\0\u3511\0\u3552\0\u3593"+
    "\0\u35d4\0\u3615\0\u3656\0\u3697\0\u36d8\0\u3719\0\u375a\0\u24d1"+
    "\0\u379b\0\u37dc\0\u0c71\0\u381d\0\u385e\0\u389f\0\u38e0\0\u3921"+
    "\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7\0\u3ae8\0\u3b29"+
    "\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf\0\u3cf0\0\u3d31"+
    "\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39"+
    "\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e\0\u40bf\0\u4100\0\u4141"+
    "\0\u4182\0\u079e\0\u41c3\0\u4204\0\u4245\0\u079e\0\u079e\0\u4286"+
    "\0\u42c7\0\u4308\0\u4349\0\u079e\0\u079e\0\u079e\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u071c\0\u0eba"+
    "\0\u4592\0\u45d3\0\u1f7c\0\u4614\0\u3921\0\u3962\0\u4655\0\u4696"+
    "\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c\0\u485d\0\u489e"+
    "\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u079e\0\u4a65"+
    "\0\u079e\0\u4aa6\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb\0\u4c2c"+
    "\0\u079e\0\u079e\0\u079e\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\u4ef7\0\u4f38\0\u4f79"+
    "\0\u4fba\0\u4ffb\0\u503c\0\u507d\0\u344e\0\u50be\0\u50ff\0\u4696"+
    "\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244\0\u5285\0\u52c6\0\u5307"+
    "\0\u5348\0\u489e\0\u5389\0\u53ca\0\u540b\0\u544c\0\u548d\0\u54ce"+
    "\0\u550f\0\u5550\0\u5591\0\u079e\0\u55d2\0\u5613\0\u5654\0\u5695"+
    "\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b\0\u585c\0\u589d"+
    "\0\u58de\0\u591f\0\u5960\0\u59a1\0\u50ff\0\u59e2\0\u5a23\0\u0596"+
    "\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u079e\0\u5ba9\0\u5bea"+
    "\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5d2f\0\u5d70\0\u079e\0\u5db1"+
    "\0\u5df2\0\u079e\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78"+
    "\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180"+
    "\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u079e"+
    "\0\u079e\0\u079e\0\u079e\0\u079e\0\u6388\0\u079e\0\u079e\0\u079e"+
    "\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590"+
    "\0\u0596\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757"+
    "\0\u6798\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f"+
    "\0\u079e\0\u079e\0\u69a0\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5"+
    "\0\u079e\0\u079e\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a\0\u6c6b"+
    "\0\u6cac\0\u079e\0\101\0\u6ced\0\u079e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\0\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\34\1\36\1\37"+
    "\1\40\2\34\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\45\1\53\1\54\1\45"+
    "\1\55\1\56\1\57\1\45\1\60\1\61\1\62\1\63"+
    "\1\45\1\64\2\45\1\65\1\66\1\67\102\0\2\3"+
    "\1\0\1\3\75\0\1\3\1\4\1\0\1\3\101\0"+
    "\1\70\1\0\1\71\2\70\2\0\6\70\3\0\3\70"+
    "\1\72\13\73\4\70\26\0\3\70\6\74\1\75\5\74"+
    "\1\0\3\74\1\76\37\74\1\77\1\74\1\100\16\74"+
    "\14\10\1\70\33\10\26\101\3\10\5\0\1\102\1\0"+
    "\1\103\2\102\2\104\6\102\3\0\3\102\1\105\13\73"+
    "\4\102\26\0\3\102\5\0\1\106\1\0\1\107\1\106"+
    "\1\110\2\111\6\106\3\0\4\106\13\73\4\106\26\0"+
    "\3\106\12\0\1\112\3\0\1\112\1\0\1\112\4\0"+
    "\2\112\15\0\1\112\31\0\1\112\1\0\1\112\12\0"+
    "\2\113\2\0\1\113\1\0\1\113\4\0\2\113\15\0"+
    "\2\113\30\0\1\113\1\0\1\113\5\0\1\102\1\0"+
    "\1\103\2\102\2\104\1\102\1\114\4\102\3\0\3\102"+
    "\1\105\13\73\4\102\26\0\3\102\5\0\1\70\1\0"+
    "\1\71\2\70\2\113\2\70\1\115\1\70\1\115\1\70"+
    "\3\0\2\115\2\70\13\73\2\115\2\70\26\0\1\115"+
    "\1\70\1\115\5\0\1\102\1\0\1\103\2\102\2\104"+
    "\3\102\1\114\2\102\1\0\2\116\3\102\1\105\13\73"+
    "\4\102\26\0\3\102\5\0\1\70\1\0\1\71\1\102"+
    "\1\70\2\0\1\117\1\102\1\70\1\102\1\70\1\120"+
    "\3\0\3\70\1\105\13\73\2\70\1\102\1\70\26\0"+
    "\3\70\16\0\1\121\1\0\1\122\1\0\1\123\2\124"+
    "\23\0\26\125\21\0\1\121\1\0\1\122\1\0\3\25"+
    "\23\0\26\125\21\0\1\121\1\0\1\126\1\0\3\25"+
    "\23\0\26\125\10\0\1\127\1\0\1\130\2\127\2\131"+
    "\6\127\3\0\3\127\1\132\3\73\1\133\2\73\1\134"+
    "\4\73\4\127\26\0\3\127\5\0\1\70\1\0\1\71"+
    "\2\70\2\0\6\70\3\0\3\70\1\135\13\73\4\70"+
    "\26\0\3\70\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\6\34\1\141\4\34\3\136\27\34"+
    "\3\136\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\16\34\1\142\10\34\3\136"+
    "\5\0\1\136\1\0\1\137\2\136\2\0\6\136\3\140"+
    "\4\136\13\34\3\136\27\34\3\136\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\16\34\1\143\10\34\3\136\5\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\5\34"+
    "\1\144\21\34\3\136\5\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\11\34\1\145\1\34\3\136"+
    "\27\34\3\136\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\20\34\1\146\6\34"+
    "\3\136\5\0\1\70\1\0\1\71\2\70\2\147\2\70"+
    "\1\150\1\70\1\150\1\70\3\0\2\150\2\70\13\73"+
    "\1\150\3\70\26\0\1\150\1\70\1\150\5\0\1\102"+
    "\1\0\1\103\2\102\2\104\6\102\3\0\4\102\13\73"+
    "\4\102\26\0\3\102\5\0\1\70\1\0\1\151\2\70"+
    "\2\0\6\70\3\0\4\70\13\73\3\70\1\152\26\153"+
    "\1\152\1\70\1\152\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\27\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\16\45\1\157\10\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\1\45\1\160\11\45\1\161\2\45\1\162"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\5\45\1\163\21\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\13\45\1\164\1\45\1\165\3\45\1\166\5\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\1\45\1\167\7\45\1\170\15\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\1\45\1\171\25\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\15\45\1\172\11\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\5\45\1\173\10\45\1\174\10\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\5\45\1\175\3\45\1\176\15\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\23\45\1\177\3\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\1\45\1\200\16\45"+
    "\1\201\2\45\1\202\3\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\203"+
    "\3\45\1\204\21\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\5\45\1\205\3\45"+
    "\1\206\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\1\45\1\207\25\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\5\45\1\210\21\45\1\156\1\0\1\156\5\0"+
    "\1\70\1\0\1\151\2\70\2\113\2\70\1\115\1\70"+
    "\1\115\1\70\3\0\2\115\2\70\13\73\2\115\1\70"+
    "\1\152\26\153\1\211\1\70\1\211\5\0\1\106\1\0"+
    "\1\107\2\106\2\111\6\106\3\0\4\106\13\73\4\106"+
    "\26\0\1\106\1\110\1\106\5\0\1\70\1\0\1\71"+
    "\2\70\2\0\6\70\3\0\4\70\13\73\4\70\26\0"+
    "\3\70\14\71\1\70\14\71\13\212\35\71\7\0\1\213"+
    "\12\0\3\214\4\0\13\73\3\0\27\73\3\0\6\74"+
    "\1\215\100\74\1\216\100\74\1\215\11\74\1\217\66\74"+
    "\1\215\54\74\1\220\23\74\1\215\45\74\1\221\24\74"+
    "\5\10\1\222\1\10\1\223\4\222\1\224\5\222\3\225"+
    "\4\222\13\101\3\222\27\101\3\222\14\103\1\102\64\103"+
    "\5\0\1\104\1\0\1\226\12\104\3\0\4\104\13\0"+
    "\4\104\26\0\3\104\5\0\1\227\1\0\1\230\2\227"+
    "\2\231\6\227\3\0\4\227\13\73\4\227\26\0\3\227"+
    "\5\0\1\106\1\0\1\107\2\106\2\111\6\106\3\0"+
    "\4\106\13\73\4\106\26\0\3\106\14\107\1\106\64\107"+
    "\5\0\1\111\1\0\1\232\12\111\3\0\4\111\13\0"+
    "\4\111\26\0\3\111\5\0\1\112\1\0\1\233\12\112"+
    "\3\0\4\112\13\0\4\112\26\0\3\112\5\0\1\113"+
    "\1\0\1\234\12\113\3\0\4\113\13\0\4\113\26\0"+
    "\3\113\5\0\1\235\1\0\1\236\2\235\2\237\6\235"+
    "\3\0\4\235\13\73\4\235\26\0\3\235\5\0\1\115"+
    "\1\0\1\240\2\115\2\113\6\115\3\0\4\115\13\73"+
    "\4\115\26\0\3\115\16\0\1\121\1\0\1\241\1\0"+
    "\3\116\23\0\26\125\3\0\5\242\1\243\1\242\1\244"+
    "\2\243\2\245\1\246\5\243\3\242\4\243\13\247\4\243"+
    "\26\242\3\243\2\250\1\251\1\250\1\252\1\120\1\250"+
    "\1\253\2\120\2\250\6\120\3\250\4\120\13\254\4\120"+
    "\26\250\3\120\17\0\1\255\2\0\1\256\2\257\73\0"+
    "\1\255\1\241\1\0\1\260\2\261\72\0\1\121\1\0"+
    "\1\241\1\0\1\123\2\124\23\0\26\125\21\0\1\121"+
    "\1\0\1\241\2\0\2\124\23\0\26\125\25\0\3\262"+
    "\4\0\13\125\3\0\27\125\22\0\1\255\1\241\1\0"+
    "\1\263\2\261\61\0\1\127\1\0\1\130\2\127\2\131"+
    "\6\127\3\0\4\127\3\73\1\133\2\73\1\134\4\73"+
    "\4\127\26\0\3\127\14\130\1\127\64\130\5\0\1\131"+
    "\1\0\1\264\12\131\3\0\4\131\3\0\1\265\2\0"+
    "\1\266\4\0\4\131\26\0\3\131\7\0\1\213\12\0"+
    "\3\214\4\0\13\73\3\0\16\73\1\267\10\73\12\0"+
    "\1\213\12\0\3\214\4\0\13\73\3\0\5\73\1\270"+
    "\21\73\10\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\0\4\136\13\0\4\136\26\0\3\136\14\137\1\136"+
    "\64\137\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\4\136\26\0\3\136\5\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\3\34"+
    "\1\145\7\34\3\136\27\34\3\136\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\16\34\1\271\10\34\3\136\5\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\2\34"+
    "\1\272\24\34\3\136\5\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\13\34\3\136\7\34\1\273"+
    "\17\34\3\136\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\11\34\1\274\15\34"+
    "\3\136\5\0\1\147\1\0\1\275\12\147\3\0\4\147"+
    "\13\0\4\147\26\0\3\147\5\0\1\150\1\0\1\276"+
    "\2\150\2\147\6\150\3\0\4\150\13\73\4\150\26\0"+
    "\3\150\14\151\1\70\14\151\13\277\4\151\26\300\3\151"+
    "\5\0\1\156\1\0\1\154\12\156\3\301\4\156\13\153"+
    "\3\156\27\153\3\156\14\154\1\156\64\154\7\0\1\154"+
    "\12\0\3\155\23\0\26\45\1\156\1\0\1\156\5\0"+
    "\1\156\1\0\1\154\12\156\3\0\4\156\13\0\4\156"+
    "\26\0\3\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\13\45\1\302\13\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\4\45\1\303"+
    "\22\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\1\45\1\304\25\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\15\45\1\305\3\45\1\306\5\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\21\45"+
    "\1\307\2\45\1\310\2\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\11\45\1\311"+
    "\15\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\22\45\1\312\4\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\3\45\1\313\16\45\1\314\4\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\13\45"+
    "\1\315\13\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\15\45\1\316\11\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\3\45\1\317\23\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\3\45\1\320"+
    "\15\45\1\321\5\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\5\45\1\322\21\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\7\45\1\323\17\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\22\45"+
    "\1\324\4\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\5\45\1\325\21\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\13\45\1\326\13\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\20\45\1\327"+
    "\6\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\11\45\1\330\4\45\1\331\10\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\2\45\1\332\24\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\11\45"+
    "\1\333\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\1\45\1\334\25\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\15\45\1\335\11\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\15\45\1\336"+
    "\11\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\15\45\1\337\11\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\20\45\1\340\6\45\1\156\1\0\1\156\5\0\1\115"+
    "\1\0\1\341\2\115\2\113\6\115\3\0\4\115\13\73"+
    "\3\115\1\211\26\153\1\211\1\115\1\211\7\71\1\342"+
    "\4\71\1\70\5\71\3\343\4\71\13\212\3\71\27\212"+
    "\3\71\14\213\1\0\64\213\7\0\1\213\12\0\3\214"+
    "\4\0\13\73\43\0\1\344\72\0\6\74\1\215\12\74"+
    "\1\345\65\74\1\215\57\74\1\346\20\74\1\215\43\74"+
    "\1\347\26\74\5\10\1\222\1\10\1\223\4\222\1\224"+
    "\5\222\3\10\4\222\13\10\4\222\26\101\3\222\14\223"+
    "\1\224\64\223\5\0\1\224\1\0\1\350\2\224\2\156"+
    "\6\224\3\0\4\224\13\73\4\224\26\0\3\224\5\10"+
    "\1\222\1\10\1\223\4\222\1\224\5\222\3\225\4\222"+
    "\13\10\4\222\26\101\3\222\14\226\1\104\64\226\14\230"+
    "\1\227\64\230\5\0\1\231\1\0\1\351\12\231\3\0"+
    "\4\231\13\0\4\231\26\0\3\231\14\232\1\111\64\232"+
    "\14\233\1\112\64\233\14\234\1\113\64\234\14\236\1\235"+
    "\64\236\5\0\1\237\1\0\1\352\12\237\3\0\4\237"+
    "\13\0\4\237\26\0\3\237\14\240\1\115\14\240\13\353"+
    "\35\240\17\0\1\255\1\241\1\0\1\256\2\257\54\0"+
    "\14\242\1\354\71\242\1\243\1\242\1\244\2\243\2\245"+
    "\1\355\5\243\3\242\4\243\13\247\4\243\26\242\3\243"+
    "\14\244\1\355\64\244\5\242\1\245\1\242\1\356\4\245"+
    "\1\357\5\245\3\242\4\245\13\242\4\245\26\242\3\245"+
    "\5\242\1\243\1\242\1\244\2\243\2\245\1\355\4\243"+
    "\1\360\3\242\4\243\13\247\4\243\26\242\3\243\7\242"+
    "\1\361\4\242\1\354\5\242\3\362\4\242\13\247\3\242"+
    "\27\247\3\242\2\250\1\251\1\250\1\252\74\250\2\0"+
    "\1\251\76\0\2\253\1\363\1\253\1\364\7\253\1\120"+
    "\14\253\13\365\35\253\2\250\1\251\1\250\1\252\2\250"+
    "\1\366\12\250\3\367\4\250\13\254\3\250\27\254\3\250"+
    "\23\0\2\257\76\0\1\370\100\0\3\257\76\0\1\371"+
    "\2\372\76\0\1\373\2\261\76\0\3\262\23\0\26\125"+
    "\3\0\14\264\1\131\64\264\65\0\1\374\67\0\1\375"+
    "\33\0\1\213\12\0\3\214\4\0\13\73\3\0\2\73"+
    "\1\376\24\73\12\0\1\213\12\0\3\214\4\0\13\73"+
    "\3\0\7\73\1\377\17\73\10\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\13\34"+
    "\1\u0100\13\34\3\136\5\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\13\34\3\136\13\34\1\u0101"+
    "\13\34\3\136\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\1\34\1\u0102\25\34"+
    "\3\136\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\15\34\1\u0103\11\34\3\136"+
    "\14\275\1\147\64\275\14\276\1\150\14\276\13\u0104\35\276"+
    "\7\151\1\u0105\4\151\1\70\5\151\3\u0106\4\151\13\277"+
    "\3\151\1\277\26\300\10\151\1\u0107\1\151\1\350\4\u0107"+
    "\1\224\5\u0107\3\u0108\4\u0107\13\300\3\u0107\27\300\3\u0107"+
    "\5\0\1\156\1\0\1\154\12\156\3\301\4\156\13\0"+
    "\4\156\26\153\3\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\5\45\1\u0109\21\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\5\45"+
    "\1\u010a\21\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\21\45\1\u010b\5\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\21\45\1\u010c\5\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\5\45\1\205"+
    "\21\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\4\45\1\u010d\15\45\1\u010e\4\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u010f\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\14\45"+
    "\1\u0110\12\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\5\45\1\u0111\10\45\1\u0112"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\20\45\1\u0113\6\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\1\45\1\u0114\25\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\21\45\1\u0115\5\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\21\45\1\u0116\5\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\5\45"+
    "\1\u0117\21\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\13\45\1\u0118\13\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\22\45\1\u0119\4\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\20\45\1\u011a"+
    "\6\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\1\45\1\u011b\25\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\16\45\1\u011c\10\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\15\45\1\u011d\11\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u011e\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\1\45"+
    "\1\u011f\25\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\24\45\1\u0120\2\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\17\45\1\u0121\2\45\1\u0122\4\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\13\45\1\u0123\13\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\26\45\1\u0124\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\13\45\1\u0125\13\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\16\45\1\u0124"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\16\45\1\u0126\10\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\7\45\1\u0127\17\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\4\45\1\u0128\22\45"+
    "\1\156\1\0\1\156\14\341\1\115\14\341\13\u0129\4\341"+
    "\26\u012a\3\341\14\342\1\70\64\342\7\71\1\342\4\71"+
    "\1\70\5\71\3\343\4\71\13\212\35\71\6\74\1\215"+
    "\11\74\1\76\37\74\1\77\1\74\1\100\24\74\1\215"+
    "\60\74\1\u012b\17\74\1\215\62\74\1\u012c\7\74\14\350"+
    "\1\224\64\350\14\351\1\231\64\351\14\352\1\237\64\352"+
    "\7\240\1\u012d\4\240\1\115\5\240\3\u012e\4\240\13\353"+
    "\3\240\27\353\3\240\14\242\1\354\4\242\1\251\64\242"+
    "\1\243\1\242\1\244\2\243\2\245\1\355\4\243\1\u012f"+
    "\3\242\4\243\13\247\4\243\26\242\3\243\14\356\1\357"+
    "\64\356\5\242\1\245\1\242\1\356\4\245\1\357\4\245"+
    "\1\u0130\3\242\4\245\13\242\4\245\26\242\3\245\14\361"+
    "\1\354\64\361\7\242\1\361\4\242\1\354\5\242\3\362"+
    "\4\242\13\247\35\242\2\71\1\363\11\71\1\70\14\71"+
    "\13\212\35\71\2\253\1\363\1\253\1\364\2\253\1\u0131"+
    "\4\253\1\120\5\253\3\u0132\4\253\13\365\3\253\27\365"+
    "\3\253\2\366\1\u0133\1\366\1\u0134\7\366\1\250\64\366"+
    "\2\250\1\251\1\250\1\252\2\250\1\366\12\250\3\367"+
    "\4\250\13\254\35\250\22\0\1\u0135\100\0\1\u0136\2\372"+
    "\76\0\1\u0137\2\372\76\0\1\u0138\2\261\125\0\1\u0139"+
    "\105\0\1\u013a\31\0\1\213\12\0\3\214\4\0\13\73"+
    "\3\0\13\73\1\u013b\13\73\12\0\1\213\12\0\3\214"+
    "\4\0\13\73\3\0\1\73\1\u013c\25\73\10\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\6\34"+
    "\1\u013d\3\34\1\u013e\3\136\27\34\3\136\5\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\13\34"+
    "\3\136\5\34\1\u013f\21\34\3\136\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\20\34\1\u0140\6\34\3\136\5\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\3\34"+
    "\1\u0141\23\34\3\136\7\276\1\u0142\4\276\1\150\5\276"+
    "\3\u0143\4\276\13\u0104\3\276\27\u0104\3\276\14\u0105\1\70"+
    "\33\u0105\26\u0144\3\u0105\7\151\1\u0105\4\151\1\70\5\151"+
    "\3\u0106\4\151\13\277\4\151\26\300\10\151\1\u0107\1\151"+
    "\1\350\4\u0107\1\224\5\u0107\3\151\4\u0107\13\277\4\u0107"+
    "\26\300\3\u0107\5\151\1\u0107\1\151\1\350\4\u0107\1\224"+
    "\5\u0107\3\u0108\4\u0107\13\277\4\u0107\26\300\3\u0107\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\u0145"+
    "\25\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\15\45\1\u0146\11\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\5\45\1\u0147\21\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\22\45\1\u0148\4\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\5\45\1\u0149\21\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\20\45"+
    "\1\u014a\6\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\13\45\1\u014b\13\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\11\45\1\u014c\15\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\20\45\1\u014d"+
    "\6\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\15\45\1\u014e\11\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\11\45\1\u014f\15\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\22\45\1\u0150\4\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u0151\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\11\45"+
    "\1\u0152\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\20\45\1\u0153\6\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\23\45\1\u0154\3\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\u0155"+
    "\25\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\20\45\1\u0156\6\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\4\45\1\u0157\22\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\22\45\1\u0158\4\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\1\45\1\u0159\25\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\11\45"+
    "\1\u015a\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\5\45\1\u015b\21\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\11\45\1\u015c\15\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\5\45\1\u015d"+
    "\21\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\1\45\1\u015e\25\45\1\156\1\0"+
    "\1\156\7\341\1\u015f\4\341\1\115\5\341\3\u0160\4\341"+
    "\13\u0129\3\341\1\u0129\26\u012a\10\341\1\u0161\1\341\1\350"+
    "\4\u0161\1\224\5\u0161\3\u0162\4\u0161\13\u012a\3\u0161\27\u012a"+
    "\3\u0161\6\74\1\215\45\74\1\u0163\32\74\1\215\63\74"+
    "\1\u0164\6\74\14\u012d\1\115\64\u012d\7\240\1\u012d\4\240"+
    "\1\115\5\240\3\u012e\4\240\13\353\35\240\2\u0131\1\u0165"+
    "\1\u0131\1\u0166\7\u0131\1\120\64\u0131\2\253\1\363\1\253"+
    "\1\364\2\253\1\u0131\4\253\1\120\5\253\3\u0132\4\253"+
    "\13\365\35\253\2\213\1\u0133\11\213\1\0\64\213\22\0"+
    "\1\u0167\2\372\76\0\1\u0168\2\261\136\0\1\u0169\66\0"+
    "\1\u016a\37\0\1\213\12\0\3\214\4\0\13\73\3\0"+
    "\5\73\1\u016b\21\73\12\0\1\213\12\0\3\214\4\0"+
    "\13\73\3\0\20\73\1\u016c\6\73\10\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\23\34\1\u016d\3\34\3\136\5\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\5\34"+
    "\1\u016e\21\34\3\136\5\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\5\34\1\u016f\5\34\3\136"+
    "\27\34\3\136\5\0\1\131\1\0\1\264\12\131\3\140"+
    "\4\131\3\34\1\u0170\2\34\1\u0171\4\34\3\131\1\u0172"+
    "\26\34\3\131\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\11\34\1\u0173\15\34"+
    "\3\136\14\u0142\1\150\64\u0142\7\276\1\u0142\4\276\1\150"+
    "\5\276\3\u0143\4\276\13\u0104\35\276\5\u0105\1\u0174\1\u0105"+
    "\1\350\4\u0174\1\224\5\u0174\3\u0175\4\u0174\13\u0144\3\u0174"+
    "\27\u0144\3\u0174\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\15\45\1\u0176\11\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\u0177"+
    "\25\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\20\45\1\u0178\6\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\23\45\1\u0179\3\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\24\45\1\u017a\2\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\15\45\1\u017b\11\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\16\45"+
    "\1\u017c\10\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\3\45\1\u017d\23\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\2\45\1\u017e\24\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\11\45\1\u017f"+
    "\15\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\11\45\1\u0180\15\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\15\45\1\u0181\11\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\11\45\1\u0182\15\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u0183\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\20\45"+
    "\1\u0184\6\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\4\45\1\u0185\22\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\5\45\1\u0186\21\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\7\45\1\u0187"+
    "\17\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\3\45\1\u0185\23\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\15\45\1\u0188\11\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\4\45\1\u0189\22\45"+
    "\1\156\1\0\1\156\14\u015f\1\115\33\u015f\26\u018a\3\u015f"+
    "\7\341\1\u015f\4\341\1\115\5\341\3\u0160\4\341\13\u0129"+
    "\4\341\26\u012a\10\341\1\u0161\1\341\1\350\4\u0161\1\224"+
    "\5\u0161\3\341\4\u0161\13\u0129\4\u0161\26\u012a\3\u0161\5\341"+
    "\1\u0161\1\341\1\350\4\u0161\1\224\5\u0161\3\u0162\4\u0161"+
    "\13\u0129\4\u0161\26\u012a\3\u0161\6\74\1\215\61\74\1\u018b"+
    "\16\74\1\215\60\74\1\u018c\11\74\2\342\1\u0165\11\342"+
    "\1\70\64\342\22\0\1\u018d\2\372\130\0\1\u018e\113\0"+
    "\1\131\20\0\1\213\12\0\3\214\4\0\5\73\1\u018f"+
    "\5\73\3\0\27\73\10\0\1\131\1\0\1\264\12\131"+
    "\3\214\4\131\3\73\1\133\2\73\1\134\4\73\3\131"+
    "\1\u016c\26\73\3\131\5\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\13\34\3\136\14\34\1\u0190"+
    "\12\34\3\136\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\25\34\1\u0191\1\34"+
    "\3\136\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\7\34\1\u0192\17\34\3\136"+
    "\5\0\1\136\1\0\1\137\2\136\2\0\6\136\3\140"+
    "\4\136\13\34\3\136\16\34\1\u0193\10\34\3\136\5\0"+
    "\1\136\1\0\1\137\2\136\2\0\6\136\3\140\4\136"+
    "\13\34\3\136\5\34\1\u0194\21\34\3\136\5\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\13\34"+
    "\3\136\17\34\1\u0195\7\34\3\136\5\u0105\1\u0174\1\u0105"+
    "\1\350\4\u0174\1\224\5\u0174\3\u0105\4\u0174\13\u0105\4\u0174"+
    "\26\u0144\3\u0174\5\u0105\1\u0174\1\u0105\1\350\4\u0174\1\224"+
    "\5\u0174\3\u0175\4\u0174\13\u0105\4\u0174\26\u0144\3\u0174\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\16\45\1\u0196"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\1\u0197\12\45\3\0\27\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\23\45"+
    "\1\u0198\3\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\3\45\1\u0199\23\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\5\45\1\u019a\21\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\u019b"+
    "\25\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\5\45\1\u019c\21\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\11\45\1\u019d\15\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\3\45\1\u019e\23\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\20\45\1\u019f\6\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\3\45"+
    "\1\u01a0\23\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\22\45\1\u01a1\4\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\21\45\1\u01a2\5\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\1\45\1\u01a3"+
    "\25\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\1\45\1\u01a4\14\45\1\u01a5\10\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\4\45\1\u01a6\22\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\11\45"+
    "\1\u0159\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\22\45\1\u01a7\4\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\5\45\1\u01a8\21\45\1\156\1\0\1\156\5\u015f"+
    "\1\u01a9\1\u015f\1\350\4\u01a9\1\224\5\u01a9\3\u01aa\4\u01a9"+
    "\13\u018a\3\u01a9\27\u018a\3\u01a9\6\74\1\215\51\74\1\u01ab"+
    "\26\74\1\215\41\74\1\u01ac\30\74\36\0\1\u01ad\51\0"+
    "\1\213\12\0\3\214\4\0\13\73\3\0\7\73\1\u01ae"+
    "\17\73\10\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\22\34\1\u0190\4\34\3\136"+
    "\5\0\1\136\1\0\1\137\2\136\2\0\6\136\3\140"+
    "\4\136\13\34\3\136\23\34\1\u01af\3\34\3\136\5\0"+
    "\1\136\1\0\1\137\2\136\2\0\6\136\3\140\4\136"+
    "\13\34\3\136\2\34\1\u01b0\24\34\3\136\5\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\13\34"+
    "\3\136\7\34\1\u01b1\17\34\3\136\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\1\34\1\u01b2\25\34\3\136\7\0\1\154\12\0\3\155"+
    "\4\0\1\45\1\u01b3\2\45\1\u01b4\4\45\1\u01b5\1\45"+
    "\3\0\27\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\3\45\1\u01b6\23\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\22\45\1\u01b7\4\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\20\45\1\u01b8"+
    "\6\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\20\45\1\u01b9\6\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\21\45\1\u01ba\5\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\20\45\1\u01bb\6\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u01bc\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\11\45"+
    "\1\u01bd\15\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\14\45\1\335\12\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\21\45\1\u01be\5\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\21\45\1\u01bf"+
    "\5\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\21\45\1\u01c0\5\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\1\45\1\u01c1\25\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\5\45\1\u0124\21\45"+
    "\1\156\1\0\1\156\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\20\45\1\u0115\6\45\1\156\1\0\1\156"+
    "\5\u015f\1\u01a9\1\u015f\1\350\4\u01a9\1\224\5\u01a9\3\u015f"+
    "\4\u01a9\13\u015f\4\u01a9\26\u018a\3\u01a9\5\u015f\1\u01a9\1\u015f"+
    "\1\350\4\u01a9\1\224\5\u01a9\3\u01aa\4\u01a9\13\u015f\4\u01a9"+
    "\26\u018a\3\u01a9\6\74\1\215\56\74\1\u01c2\21\74\1\215"+
    "\11\74\1\u01c3\60\74\56\0\1\u01c4\31\0\1\213\12\0"+
    "\3\214\4\0\13\73\3\0\23\73\1\u01c5\3\73\10\0"+
    "\1\136\1\0\1\137\2\136\2\0\6\136\3\140\4\136"+
    "\13\34\3\136\1\34\1\u01c6\25\34\3\136\5\0\1\136"+
    "\1\0\1\137\2\136\2\0\6\136\3\140\4\136\13\34"+
    "\3\136\13\34\1\u01c7\13\34\3\136\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\1\34\1\u01c8\25\34\3\136\5\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\13\34\3\136\13\34"+
    "\1\u01c9\13\34\3\136\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\16\45\1\u01ca\10\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\15\45"+
    "\1\u01cb\11\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\5\45\1\u01cc\21\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\22\45\1\u01cd\4\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\16\45\1\u01ce"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\1\45\1\u01cf\25\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\4\45\1\u01d0\22\45\1\156\1\0\1\156\6\74\1\215"+
    "\55\74\1\u01ac\22\74\1\215\53\74\1\u01d1\16\74\72\0"+
    "\1\u01d2\15\0\1\213\12\0\3\214\4\0\13\73\3\0"+
    "\1\73\1\u01d3\25\73\10\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\13\34\3\136\13\34\1\u0140"+
    "\13\34\3\136\5\0\1\136\1\0\1\137\2\136\2\0"+
    "\6\136\3\140\4\136\13\34\3\136\5\34\1\u01d4\21\34"+
    "\3\136\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\20\34\1\u0172\6\34\3\136"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\13\45"+
    "\1\u01d5\13\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\22\45\1\u01d6\4\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\1\45\1\u01d7\25\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\16\45\1\u01d8"+
    "\10\45\1\156\1\0\1\156\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\20\45\1\u01d9\6\45\1\156\1\0"+
    "\1\156\7\0\1\154\12\0\3\155\4\0\13\45\3\0"+
    "\20\45\1\u01da\6\45\1\156\1\0\1\156\7\0\1\154"+
    "\12\0\3\155\4\0\13\45\3\0\5\45\1\u01db\21\45"+
    "\1\156\1\0\1\156\6\74\1\215\56\74\1\u01dc\13\74"+
    "\50\0\1\u01dd\37\0\1\213\12\0\3\214\4\0\13\73"+
    "\3\0\13\73\1\u016c\13\73\10\0\1\136\1\0\1\137"+
    "\2\136\2\0\6\136\3\140\4\136\5\34\1\u01de\5\34"+
    "\3\136\27\34\3\136\7\0\1\154\12\0\3\155\4\0"+
    "\13\45\3\0\5\45\1\u01df\21\45\1\156\1\0\1\156"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\5\45"+
    "\1\u01e0\21\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\13\45\1\u0124\13\45\1\156"+
    "\1\0\1\156\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\20\45\1\u01e1\6\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\21\45\1\u01e2"+
    "\5\45\1\156\1\0\1\156\6\74\1\215\56\74\1\u01e3"+
    "\13\74\62\0\1\131\23\0\1\136\1\0\1\137\2\136"+
    "\2\0\6\136\3\140\4\136\13\34\3\136\7\34\1\u01e4"+
    "\17\34\3\136\7\0\1\154\12\0\3\155\4\0\13\45"+
    "\3\0\1\45\1\u01e5\25\45\1\156\1\0\1\156\7\0"+
    "\1\154\12\0\3\155\4\0\13\45\3\0\20\45\1\u01e6"+
    "\6\45\1\156\1\0\1\156\6\74\1\215\57\74\1\u01e7"+
    "\12\74\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\23\34\1\u01e8\3\34\3\136"+
    "\7\0\1\154\12\0\3\155\4\0\13\45\3\0\15\45"+
    "\1\u01e9\11\45\1\156\1\0\1\156\7\0\1\154\12\0"+
    "\3\155\4\0\13\45\3\0\16\45\1\u01ea\10\45\1\156"+
    "\1\0\1\156\6\74\1\u01eb\72\74\5\0\1\136\1\0"+
    "\1\137\2\136\2\0\6\136\3\140\4\136\13\34\3\136"+
    "\1\34\1\u01ec\25\34\3\136\7\0\1\154\12\0\3\155"+
    "\4\0\13\45\3\0\16\45\1\u01ed\10\45\1\156\1\0"+
    "\1\156\5\0\1\136\1\0\1\137\2\136\2\0\6\136"+
    "\3\140\4\136\13\34\3\136\13\34\1\u0172\13\34\3\136";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27950];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\65\1\2\0\2\1\1\0\1\1\3\0"+
    "\20\1\2\0\3\1\1\0\22\1\2\0\42\1\1\11"+
    "\1\1\3\0\17\1\2\0\6\1\1\11\3\1\1\0"+
    "\7\1\2\0\56\1\3\0\4\1\1\0\13\1\1\0"+
    "\3\1\2\0\55\1\2\0\14\1\2\0\50\1\2\0"+
    "\4\1\2\0\40\1\4\0\34\1\3\0\24\1\3\0"+
    "\14\1\2\0\11\1\2\0\5\1\1\0\3\1\1\0"+
    "\3\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[493];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexicoCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error"+yytext());return new Symbol(sym.error);
            }
            // fall through
          case 83: break;
          case 2:
            { 
            }
            // fall through
          case 84: break;
          case 3:
            { return new Symbol(sym.FINLINEA,yytext());
            }
            // fall through
          case 85: break;
          case 4:
            { return new Symbol(sym.COMILLAS,yytext());
            }
            // fall through
          case 86: break;
          case 5:
            { return new Symbol(sym.ERRORSIG,yytext());
            }
            // fall through
          case 87: break;
          case 6:
            { return new Symbol(sym.MOD,yytext());
            }
            // fall through
          case 88: break;
          case 7:
            { return new Symbol(sym.ERROROPARBO,yytext());
            }
            // fall through
          case 89: break;
          case 8:
            { return new Symbol(sym.PARENTESISA,yytext());
            }
            // fall through
          case 90: break;
          case 9:
            { return new Symbol(sym.PARENTESISC,yytext());
            }
            // fall through
          case 91: break;
          case 10:
            { return new Symbol(sym.MULTIPLICACION,yytext());
            }
            // fall through
          case 92: break;
          case 11:
            { return new Symbol(sym.SUMA,yytext());
            }
            // fall through
          case 93: break;
          case 12:
            { return new Symbol(sym.COMA,yytext());
            }
            // fall through
          case 94: break;
          case 13:
            { return new Symbol(sym.RESTA,yytext());
            }
            // fall through
          case 95: break;
          case 14:
            { return new Symbol(sym.PUNTO,yytext());
            }
            // fall through
          case 96: break;
          case 15:
            { return new Symbol(sym.DIVISION,yytext());
            }
            // fall through
          case 97: break;
          case 16:
            { return new Symbol(sym.NUMERO,Integer.parseInt(yytext()));
            }
            // fall through
          case 98: break;
          case 17:
            { return new Symbol(sym.DOSPUNTOS,yytext());
            }
            // fall through
          case 99: break;
          case 18:
            { return new Symbol(sym.PUNTOYCOMA,yytext());
            }
            // fall through
          case 100: break;
          case 19:
            { return new Symbol(sym.OPRELACIONAL,yytext());
            }
            // fall through
          case 101: break;
          case 20:
            { return new Symbol(sym.SIGUAL,yytext());
            }
            // fall through
          case 102: break;
          case 21:
            { return new Symbol(sym.NAMECLASS,yytext());
            }
            // fall through
          case 103: break;
          case 22:
            { return new Symbol(sym.CORCHETEA,yytext());
            }
            // fall through
          case 104: break;
          case 23:
            { return new Symbol(sym.CORCHETEC,yytext());
            }
            // fall through
          case 105: break;
          case 24:
            { return new Symbol(sym.EXPONENTE,yytext());
            }
            // fall through
          case 106: break;
          case 25:
            { System.out.println("Identificador"+yytext());return new Symbol(sym.IDENTIFICADOR,yytext());
            }
            // fall through
          case 107: break;
          case 26:
            { return new Symbol(sym.LLAVEA,yytext());
            }
            // fall through
          case 108: break;
          case 27:
            { return new Symbol(sym.LLAVEC,yytext());
            }
            // fall through
          case 109: break;
          case 28:
            { return new Symbol(sym.NEGAR,yytext());
            }
            // fall through
          case 110: break;
          case 29:
            { return new Symbol(sym.ERRORNAMECLASS,yytext());
            }
            // fall through
          case 111: break;
          case 30:
            { return new Symbol(sym.CADTEXTO,yytext());
            }
            // fall through
          case 112: break;
          case 31:
            { return new Symbol(sym.ERRORSIGP,yytext());
            }
            // fall through
          case 113: break;
          case 32:
            { return new Symbol(sym.OPATRIBUCION,yytext());
            }
            // fall through
          case 114: break;
          case 33:
            { return new Symbol(sym.OPARBOOL,yytext());
            }
            // fall through
          case 115: break;
          case 34:
            { return new Symbol(sym.ERRORSIGNOS1,yytext());
            }
            // fall through
          case 116: break;
          case 35:
            { return new Symbol(sym.ERRORSIGNOS,yytext());
            }
            // fall through
          case 117: break;
          case 36:
            { return new Symbol(sym.OPINCREMENTO,yytext());
            }
            // fall through
          case 118: break;
          case 37:
            { return new Symbol(sym.ERRORCERO,yytext());
            }
            // fall through
          case 119: break;
          case 38:
            { return new Symbol(sym.ERRORNUM,yytext());
            }
            // fall through
          case 120: break;
          case 39:
            { return new Symbol(sym.ERROREAL,yytext());
            }
            // fall through
          case 121: break;
          case 40:
            { return new Symbol(sym.DOBLEIGUAL,yytext());
            }
            // fall through
          case 122: break;
          case 41:
            { return new Symbol(sym.ERRORSIGNOS2,yytext());
            }
            // fall through
          case 123: break;
          case 42:
            { return new Symbol(sym.ERRORID,yytext());
            }
            // fall through
          case 124: break;
          case 43:
            { return new Symbol(sym.SI,yytext());
            }
            // fall through
          case 125: break;
          case 44:
            { return new Symbol(sym.ERRORARIT,yytext());
            }
            // fall through
          case 126: break;
          case 45:
            { return new Symbol(sym.ERROROPINC,yytext());
            }
            // fall through
          case 127: break;
          case 46:
            { return new Symbol(sym.ERRORDECIM,yytext());
            }
            // fall through
          case 128: break;
          case 47:
            { return new Symbol(sym.BOOLNUM,yytext());
            }
            // fall through
          case 129: break;
          case 48:
            { return new Symbol(sym.DECIMAL,Float.parseFloat(yytext()));
            }
            // fall through
          case 130: break;
          case 49:
            { return new Symbol(sym.ERRORCOM,yytext());
            }
            // fall through
          case 131: break;
          case 50:
            { return new Symbol(sym.LEER,yytext());
            }
            // fall through
          case 132: break;
          case 51:
            { return new Symbol(sym.NULO,yytext());
            }
            // fall through
          case 133: break;
          case 52:
            { return new Symbol(sym.PARA,yytext());
            }
            // fall through
          case 134: break;
          case 53:
            { return new Symbol(sym.FUNespREAL,yytext());
            }
            // fall through
          case 135: break;
          case 54:
            { return new Symbol(sym.REAL,yytext());
            }
            // fall through
          case 136: break;
          case 55:
            { return new Symbol(sym.SINO,yytext());
            }
            // fall through
          case 137: break;
          case 56:
            { return new Symbol(sym.CLASE,yytext());
            }
            // fall through
          case 138: break;
          case 57:
            { return new Symbol(sym.DESDE,yytext());
            }
            // fall through
          case 139: break;
          case 58:
            { return new Symbol(sym.BOOLTEXT,yytext());
            }
            // fall through
          case 140: break;
          case 59:
            { return new Symbol(sym.FINSI,yytext());
            }
            // fall through
          case 141: break;
          case 60:
            { return new Symbol(sym.HACER,yytext());
            }
            // fall through
          case 142: break;
          case 61:
            { return new Symbol(sym.CADENA,yytext());
            }
            // fall through
          case 143: break;
          case 62:
            { return new Symbol(sym.ENTERO,yytext());
            }
            // fall through
          case 144: break;
          case 63:
            { return new Symbol(sym.OPBOLEANO,yytext());
            }
            // fall through
          case 145: break;
          case 64:
            { return new Symbol(sym.BOLEANO,yytext());
            }
            // fall through
          case 146: break;
          case 65:
            { return new Symbol(sym.INCLUIR,yytext());
            }
            // fall through
          case 147: break;
          case 66:
            { return new Symbol(sym.METODO,yytext());
            }
            // fall through
          case 148: break;
          case 67:
            { return new Symbol(sym.DEVOLVER,yytext());
            }
            // fall through
          case 149: break;
          case 68:
            { return new Symbol(sym.ELIMINAR,yytext());
            }
            // fall through
          case 150: break;
          case 69:
            { return new Symbol(sym.ENTONCES,yytext());
            }
            // fall through
          case 151: break;
          case 70:
            { return new Symbol(sym.ESCRIBIR,yytext());
            }
            // fall through
          case 152: break;
          case 71:
            { return new Symbol(sym.ESTATICO,yytext());
            }
            // fall through
          case 153: break;
          case 72:
            { return new Symbol(sym.MIENTRAS,yytext());
            }
            // fall through
          case 154: break;
          case 73:
            { return new Symbol(sym.TDISPONIBLEP,yytext());
            }
            // fall through
          case 155: break;
          case 74:
            { return new Symbol(sym.TDISPONIBLEM,yytext());
            }
            // fall through
          case 156: break;
          case 75:
            { return new Symbol(sym.PRINCIPAL,yytext());
            }
            // fall through
          case 157: break;
          case 76:
            { return new Symbol(sym.DESTRUCTOR,yytext());
            }
            // fall through
          case 158: break;
          case 77:
            { return new Symbol(sym.INSTANCIAR,yytext());
            }
            // fall through
          case 159: break;
          case 78:
            { return new Symbol(sym.CONSTRUCTOR,yytext());
            }
            // fall through
          case 160: break;
          case 79:
            { return new Symbol(sym.PROPIEDAD,yytext());
            }
            // fall through
          case 161: break;
          case 80:
            { return new Symbol(sym.CADENAaENTERO,yytext());
            }
            // fall through
          case 162: break;
          case 81:
            { return new Symbol(sym.EXTENCIONBIB,yytext());
            }
            // fall through
          case 163: break;
          case 82:
            { return new Symbol(sym.CADaBOOL,yytext());
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
