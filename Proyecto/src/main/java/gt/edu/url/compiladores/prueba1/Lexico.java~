// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexico.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\0\1\7\1\31"+
    "\1\32\1\33\1\34\1\35\10\33\1\36\1\37\1\40"+
    "\1\33\1\41\10\33\1\42\1\0\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\57\1\65\1\66\1\67\1\70\1\71\3\57\1\72"+
    "\1\73\1\74\1\75\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\3\17\1\20\1\21\1\22\1\23\4\24\1\25\1\26"+
    "\1\27\1\1\20\30\1\31\1\6\1\32\2\0\1\22"+
    "\1\33\1\34\1\0\1\35\3\0\2\4\3\36\1\37"+
    "\2\6\1\40\1\6\1\41\1\42\1\43\1\42\1\17"+
    "\1\36\1\2\2\0\2\44\1\45\1\0\3\46\2\33"+
    "\3\24\1\40\1\24\2\47\2\34\30\30\1\50\2\30"+
    "\1\33\1\34\1\33\1\34\2\35\3\0\2\4\1\33"+
    "\3\4\1\34\1\4\1\36\3\51\1\6\1\41\1\42"+
    "\3\52\1\42\2\0\4\36\1\33\1\34\6\2\1\0"+
    "\2\53\1\54\1\55\1\45\1\53\1\46\1\24\2\47"+
    "\36\30\3\33\3\34\1\56\3\0\1\4\1\51\1\52"+
    "\1\33\1\34\1\0\3\36\1\2\4\33\4\34\12\2"+
    "\1\0\3\55\1\24\1\33\1\34\20\30\1\57\3\30"+
    "\1\60\1\61\4\30\1\62\1\63\1\64\2\30\1\34"+
    "\2\0\2\4\2\33\2\34\20\2\2\53\2\55\1\24"+
    "\2\33\2\34\2\30\1\65\1\30\1\66\7\30\1\54"+
    "\1\67\13\30\2\34\2\0\5\2\1\55\1\53\1\24"+
    "\1\30\1\70\4\30\1\71\15\30\2\0\2\2\1\0"+
    "\1\24\1\72\10\30\1\73\2\30\1\74\6\30\2\0"+
    "\1\24\5\30\1\75\1\76\1\77\1\100\1\101\1\30"+
    "\1\102\1\103\1\104\1\30\2\0\1\105\7\30\1\0"+
    "\4\30\1\106\1\107\1\30\1\0\2\30\1\110\1\111"+
    "\1\0\2\30\1\0\1\30\1\112\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u0174\0\u026c\0\u02aa\0\u02e8\0\u022e\0\u0326"+
    "\0\u0364\0\u03a2\0\u03e0\0\u02aa\0\u02aa\0\u041e\0\272\0\u045c"+
    "\0\u049a\0\u04d8\0\u0516\0\u0554\0\u02aa\0\u0592\0\u05d0\0\u060e"+
    "\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe"+
    "\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u02aa"+
    "\0\u09ee\0\u02aa\0\u05d0\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24"+
    "\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0592\0\u0cd6"+
    "\0\u0d14\0\u0d52\0\u0d90\0\u0dce\0\u0d90\0\u0e0c\0\u0e4a\0\u0e88"+
    "\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078"+
    "\0\u10b6\0\u10f4\0\u1132\0\u0a6a\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u049a\0\u1322\0\u1360\0\u139e\0\u13dc"+
    "\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550\0\u158e\0\u15cc"+
    "\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740\0\u177e\0\u17bc"+
    "\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2\0\u1930\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\76\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e"+
    "\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u0d52\0\u1f00"+
    "\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u0ec6\0\u2036\0\u2074\0\u20b2"+
    "\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u21e8\0\u2226\0\u2264\0\u22a2"+
    "\0\u22e0\0\76\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416\0\u2454"+
    "\0\u2492\0\u24d0\0\u250e\0\u254c\0\u24d0\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\u29e6"+
    "\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6"+
    "\0\u2e04\0\u2e42\0\u2e80\0\u2ebe\0\u2efc\0\u1bda\0\u2f3a\0\u2f78"+
    "\0\u2fb6\0\u2ff4\0\u3032\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168"+
    "\0\u31a6\0\u31e4\0\u216c\0\u3222\0\u3260\0\u329e\0\u32dc\0\u331a"+
    "\0\u3358\0\u3396\0\u33d4\0\u0a2c\0\u3412\0\u3450\0\u348e\0\u34cc"+
    "\0\u350a\0\u3548\0\u3586\0\u35c4\0\u3602\0\u3640\0\u367e\0\u36bc"+
    "\0\u36fa\0\u3738\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac"+
    "\0\u38ea\0\u3928\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u060e\0\u3bd2\0\u3c10\0\u3c4e"+
    "\0\u060e\0\u060e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u060e\0\u060e"+
    "\0\u060e\0\u3d84\0\u3dc2\0\u3e00\0\u3e3e\0\u3e7c\0\u3eba\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u0592\0\u0d14\0\u11ec\0\u13dc"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0"+
    "\0\u122a\0\u421e\0\u141a\0\u425c\0\u3640\0\u367e\0\u429a\0\u42d8"+
    "\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u060e"+
    "\0\u44c8\0\u060e\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c"+
    "\0\u467a\0\u060e\0\u060e\0\u46b8\0\u46f6\0\u4734\0\u4772\0\u47b0"+
    "\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0"+
    "\0\u49de\0\u4a1c\0\u2e04\0\u4a5a\0\u4a98\0\u2ebe\0\u4ad6\0\u4b14"+
    "\0\u42d8\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6"+
    "\0\u060e\0\u4d04\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4ef4\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068"+
    "\0\u50a6\0\u50e4\0\u4b14\0\u5122\0\u060e\0\u5160\0\u519e\0\u51dc"+
    "\0\u521a\0\u5258\0\u5296\0\u52d4\0\u5312\0\u060e\0\u5350\0\u538e"+
    "\0\u060e\0\u53cc\0\u540a\0\u5448\0\u5486\0\u54c4\0\u5502\0\u5540"+
    "\0\u557e\0\u55bc\0\u55fa\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u060e"+
    "\0\u060e\0\u060e\0\u060e\0\u060e\0\u5730\0\u060e\0\u060e\0\u060e"+
    "\0\u576e\0\u57ac\0\u57ea\0\u049a\0\u5828\0\u5866\0\u58a4\0\u58e2"+
    "\0\u5920\0\u595e\0\u599c\0\u59da\0\u5a18\0\u5a56\0\u5a94\0\u5ad2"+
    "\0\u060e\0\u060e\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca\0\u060e\0\u060e"+
    "\0\u5c08\0\u5c46\0\u5c84\0\u5cc2\0\u5d00\0\u060e\0\76\0\u060e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\5\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\40"+
    "\1\46\1\47\1\40\1\50\1\51\1\52\1\40\1\53"+
    "\1\54\1\55\1\56\1\40\1\57\1\40\1\60\1\61"+
    "\1\62\77\0\2\3\1\0\1\3\76\0\1\63\1\0"+
    "\1\64\2\63\2\0\4\63\1\0\1\63\3\0\3\63"+
    "\1\65\11\66\4\63\25\67\3\63\6\70\1\71\5\70"+
    "\1\0\3\70\1\72\35\70\1\73\1\70\1\74\15\70"+
    "\14\6\1\63\14\6\11\75\4\6\25\76\3\6\5\0"+
    "\1\77\1\0\1\100\2\77\2\101\4\77\1\101\1\77"+
    "\3\0\3\77\1\102\11\66\4\77\25\67\3\77\5\0"+
    "\1\103\1\0\1\104\1\103\1\105\2\106\4\103\1\106"+
    "\1\103\3\0\4\103\11\66\4\103\25\67\3\103\12\0"+
    "\1\107\3\0\1\107\1\0\1\107\4\0\2\107\13\0"+
    "\1\107\30\0\1\107\1\0\1\107\12\0\2\110\2\0"+
    "\1\110\1\0\1\110\4\0\2\110\13\0\2\110\27\0"+
    "\1\110\1\0\1\110\5\0\1\77\1\0\1\100\2\77"+
    "\2\101\1\77\1\111\2\77\1\101\1\77\3\0\3\77"+
    "\1\102\11\66\4\77\25\67\3\77\5\0\1\63\1\0"+
    "\1\64\2\63\2\110\2\63\1\112\1\63\1\110\1\63"+
    "\3\0\2\112\2\63\11\66\2\112\2\63\25\67\1\112"+
    "\1\63\1\112\5\0\1\77\1\0\1\100\2\77\2\101"+
    "\3\77\1\111\1\101\1\77\1\0\2\113\3\77\1\102"+
    "\11\66\4\77\25\67\3\77\5\0\1\63\1\0\1\64"+
    "\1\77\1\63\2\0\1\114\1\77\1\63\1\77\1\0"+
    "\1\115\3\0\3\63\1\102\11\66\2\63\1\77\1\63"+
    "\25\67\3\63\16\0\1\116\1\0\1\117\1\0\1\120"+
    "\2\121\21\0\25\122\21\0\1\116\1\0\1\117\1\0"+
    "\3\23\21\0\25\122\21\0\1\116\1\0\1\123\1\0"+
    "\3\23\21\0\25\122\10\0\1\124\1\0\1\125\2\124"+
    "\2\126\4\124\1\126\1\124\3\0\3\124\1\65\11\66"+
    "\4\124\25\67\3\124\5\0\1\127\1\0\1\130\2\127"+
    "\2\0\4\127\1\0\1\127\3\131\4\127\5\31\1\132"+
    "\3\31\3\127\1\133\25\31\3\127\5\0\1\127\1\0"+
    "\1\130\2\127\2\0\4\127\1\0\1\127\3\131\4\127"+
    "\11\31\3\127\1\133\25\31\3\127\5\0\1\127\1\0"+
    "\1\130\2\127\2\0\4\127\1\0\1\127\3\131\4\127"+
    "\10\31\1\134\3\127\1\133\25\31\3\127\5\0\1\127"+
    "\1\0\1\130\2\127\2\0\4\127\1\0\1\127\3\131"+
    "\4\127\11\31\3\127\1\133\17\31\1\135\5\31\3\127"+
    "\5\0\1\63\1\0\1\64\2\63\2\136\2\63\1\137"+
    "\1\63\1\136\1\63\3\0\2\137\2\63\11\66\1\137"+
    "\3\63\25\67\1\137\1\63\1\137\5\0\1\77\1\0"+
    "\1\100\2\77\2\101\4\77\1\101\1\77\3\0\4\77"+
    "\11\66\4\77\25\67\3\77\5\0\1\63\1\0\1\64"+
    "\2\63\2\0\4\63\1\0\1\63\3\0\4\63\11\66"+
    "\4\63\25\67\3\63\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\25\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\15\40\1\144\7\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\1\145\11\40\1\146\2\40\1\147"+
    "\7\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\4\40\1\150\20\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\12\40\1\151\1\40\1\152\3\40\1\153"+
    "\4\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\1\154\24\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\1\155\24\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\14\40\1\156\10\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\4\40\1\157\10\40\1\160"+
    "\7\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\4\40\1\161\3\40\1\162\14\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\22\40\1\163\2\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\1\164\16\40"+
    "\1\165\2\40\1\166\2\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\1\167\3\40\1\170\20\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\4\40\1\171"+
    "\3\40\1\172\14\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\1\173\24\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\174\20\40\3\140\5\0"+
    "\1\103\1\0\1\104\2\103\2\106\4\103\1\106\1\103"+
    "\3\0\4\103\11\66\4\103\25\67\1\103\1\105\1\103"+
    "\14\64\1\63\14\64\11\175\4\64\25\176\3\64\5\0"+
    "\1\124\1\0\1\125\2\124\2\126\4\124\1\126\1\124"+
    "\3\0\4\124\11\66\4\124\25\67\3\124\5\0\1\127"+
    "\1\0\1\130\12\127\3\177\4\127\11\66\3\127\26\66"+
    "\3\127\5\0\1\140\1\0\1\141\12\140\3\200\4\140"+
    "\11\67\3\140\26\67\3\140\6\70\1\201\75\70\1\202"+
    "\75\70\1\201\11\70\1\203\63\70\1\201\52\70\1\204"+
    "\22\70\1\201\43\70\1\205\23\70\5\6\1\206\1\6"+
    "\1\207\4\206\1\210\5\206\3\211\4\206\11\75\3\206"+
    "\1\75\25\76\3\206\5\6\1\212\1\6\1\213\4\212"+
    "\1\214\5\212\3\215\4\212\11\76\3\212\26\76\3\212"+
    "\14\100\1\77\61\100\5\0\1\101\1\0\1\216\12\101"+
    "\3\0\4\101\11\0\4\101\25\0\3\101\5\0\1\217"+
    "\1\0\1\220\2\217\2\221\4\217\1\221\1\217\3\0"+
    "\4\217\11\66\4\217\25\67\3\217\5\0\1\103\1\0"+
    "\1\104\2\103\2\106\4\103\1\106\1\103\3\0\4\103"+
    "\11\66\4\103\25\67\3\103\14\104\1\103\61\104\5\0"+
    "\1\106\1\0\1\222\12\106\3\0\4\106\11\0\4\106"+
    "\25\0\3\106\5\0\1\107\1\0\1\223\12\107\3\0"+
    "\4\107\11\0\4\107\25\0\3\107\5\0\1\110\1\0"+
    "\1\224\12\110\3\0\4\110\11\0\4\110\25\0\3\110"+
    "\5\0\1\225\1\0\1\226\2\225\2\227\4\225\1\227"+
    "\1\225\3\0\4\225\11\66\4\225\25\67\3\225\5\0"+
    "\1\112\1\0\1\230\2\112\2\110\4\112\1\110\1\112"+
    "\3\0\4\112\11\66\4\112\25\67\3\112\16\0\1\116"+
    "\1\0\1\231\1\0\3\113\21\0\25\122\3\0\5\232"+
    "\1\233\1\232\1\234\2\233\2\235\1\236\3\233\1\235"+
    "\1\233\3\232\4\233\11\237\4\233\25\240\3\233\2\241"+
    "\1\242\1\241\1\243\1\115\1\241\1\244\2\115\2\241"+
    "\4\115\1\241\1\115\3\241\4\115\11\245\4\115\25\246"+
    "\3\115\17\0\1\247\2\0\1\250\2\251\70\0\1\247"+
    "\1\231\1\0\1\252\2\253\67\0\1\116\1\0\1\231"+
    "\1\0\1\120\2\121\21\0\25\122\21\0\1\116\1\0"+
    "\1\231\2\0\2\121\21\0\25\122\25\0\3\254\4\0"+
    "\11\122\3\0\26\122\22\0\1\247\1\231\1\0\1\255"+
    "\2\253\51\0\14\125\1\124\61\125\5\0\1\126\1\0"+
    "\1\256\12\126\3\0\4\126\11\0\4\126\25\0\3\126"+
    "\5\0\1\127\1\0\1\130\12\127\3\0\4\127\11\0"+
    "\4\127\25\0\3\127\14\130\1\127\61\130\5\0\1\127"+
    "\1\0\1\130\2\127\2\0\4\127\1\0\1\127\3\131"+
    "\4\127\11\31\4\127\25\0\3\127\5\0\1\127\1\0"+
    "\1\130\2\127\2\0\4\127\1\0\1\127\3\131\4\127"+
    "\3\31\1\134\5\31\3\127\1\133\25\31\3\127\5\0"+
    "\1\127\1\0\1\130\12\127\3\131\4\127\11\31\3\127"+
    "\1\133\25\31\3\127\5\0\1\127\1\0\1\130\2\127"+
    "\2\0\4\127\1\0\1\127\3\131\4\127\11\31\3\127"+
    "\1\133\10\31\1\257\14\31\3\127\5\0\1\136\1\0"+
    "\1\260\12\136\3\0\4\136\11\0\4\136\25\0\3\136"+
    "\5\0\1\137\1\0\1\261\2\137\2\136\4\137\1\136"+
    "\1\137\3\0\4\137\11\66\4\137\25\67\3\137\5\0"+
    "\1\140\1\0\1\141\12\140\3\0\4\140\11\0\4\140"+
    "\25\0\3\140\14\141\1\140\61\141\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\0\4\140\25\40\3\140\5\0\1\140\1\0\1\141"+
    "\12\140\3\142\4\140\11\40\3\140\1\143\25\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\12\40\1\262"+
    "\12\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\3\40\1\263\21\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\1\264\24\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\14\40\1\265\3\40\1\266\4\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\20\40"+
    "\1\267\2\40\1\270\1\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\10\40\1\271\14\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\21\40\1\272\3\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\2\40"+
    "\1\273\16\40\1\274\3\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\12\40\1\275\12\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\2\40\1\276\22\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\2\40"+
    "\1\277\15\40\1\300\4\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\301\20\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\6\40\1\302\16\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\21\40"+
    "\1\303\3\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\4\40\1\304\20\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\12\40\1\305\12\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\17\40\1\306\5\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\10\40"+
    "\1\307\4\40\1\310\7\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\1\40\1\311\23\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\10\40\1\312\14\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\1\313"+
    "\24\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\14\40\1\314\10\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\14\40\1\315\10\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\14\40\1\316\10\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\17\40\1\317"+
    "\5\40\3\140\5\64\1\320\1\64\1\321\4\320\1\210"+
    "\5\320\3\322\4\320\11\175\3\320\1\175\25\176\3\320"+
    "\5\64\1\323\1\64\1\324\4\323\1\214\5\323\3\325"+
    "\4\323\11\176\3\323\26\176\3\323\5\0\1\127\1\0"+
    "\1\130\12\127\3\177\4\127\11\66\4\127\25\0\3\127"+
    "\5\0\1\140\1\0\1\141\12\140\3\200\4\140\11\0"+
    "\4\140\25\67\3\140\6\0\1\326\67\0\6\70\1\201"+
    "\12\70\1\327\62\70\1\201\55\70\1\330\17\70\1\201"+
    "\41\70\1\331\25\70\5\6\1\206\1\6\1\207\4\206"+
    "\1\210\5\206\3\6\4\206\11\75\4\206\25\76\3\206"+
    "\14\207\1\210\31\207\25\332\3\207\5\0\1\210\1\0"+
    "\1\321\2\210\2\127\4\210\1\127\1\210\3\0\4\210"+
    "\11\66\4\210\25\67\3\210\5\6\1\206\1\6\1\207"+
    "\4\206\1\210\5\206\3\211\4\206\11\75\4\206\25\76"+
    "\3\206\5\6\1\212\1\6\1\213\4\212\1\214\5\212"+
    "\3\6\4\212\11\75\4\212\25\76\3\212\14\213\1\214"+
    "\61\213\5\0\1\214\1\0\1\324\2\214\2\140\4\214"+
    "\1\140\1\214\3\0\4\214\11\66\4\214\25\67\3\214"+
    "\5\6\1\212\1\6\1\213\4\212\1\214\5\212\3\215"+
    "\4\212\11\75\4\212\25\76\3\212\14\216\1\101\61\216"+
    "\14\220\1\217\61\220\5\0\1\221\1\0\1\333\12\221"+
    "\3\0\4\221\11\0\4\221\25\0\3\221\14\222\1\106"+
    "\61\222\14\223\1\107\61\223\14\224\1\110\61\224\14\226"+
    "\1\225\61\226\5\0\1\227\1\0\1\334\12\227\3\0"+
    "\4\227\11\0\4\227\25\0\3\227\14\230\1\112\14\230"+
    "\11\335\4\230\25\336\3\230\17\0\1\247\1\231\1\0"+
    "\1\250\2\251\51\0\14\232\1\337\66\232\1\233\1\232"+
    "\1\234\2\233\2\235\1\340\3\233\1\235\1\233\3\232"+
    "\4\233\11\237\4\233\25\240\3\233\14\234\1\340\61\234"+
    "\5\232\1\235\1\232\1\341\4\235\1\342\5\235\3\232"+
    "\4\235\11\232\4\235\25\232\3\235\5\232\1\233\1\232"+
    "\1\234\2\233\2\235\1\340\3\233\1\235\1\343\3\232"+
    "\4\233\11\237\4\233\25\240\3\233\5\232\1\344\1\232"+
    "\1\345\4\344\1\346\5\344\3\347\4\344\11\237\3\344"+
    "\26\237\3\344\5\232\1\350\1\232\1\351\4\350\1\352"+
    "\5\350\3\353\4\350\11\240\3\350\26\240\3\350\2\241"+
    "\1\242\1\241\1\243\71\241\2\0\1\242\73\0\2\244"+
    "\1\354\1\244\1\355\7\244\1\115\14\244\11\356\4\244"+
    "\25\357\3\244\2\241\1\242\1\241\1\243\1\360\1\241"+
    "\1\361\12\360\3\362\4\360\11\245\3\360\26\245\3\360"+
    "\2\241\1\242\1\241\1\243\1\363\1\241\1\364\12\363"+
    "\3\365\4\363\11\246\3\363\26\246\3\363\23\0\2\251"+
    "\73\0\1\366\75\0\3\251\73\0\1\367\2\370\73\0"+
    "\1\371\2\253\73\0\3\254\21\0\25\122\3\0\14\256"+
    "\1\126\61\256\5\0\1\127\1\0\1\130\2\127\2\0"+
    "\4\127\1\0\1\127\3\131\4\127\11\31\3\127\1\133"+
    "\14\31\1\372\10\31\3\127\14\260\1\136\61\260\14\261"+
    "\1\137\14\261\11\373\4\261\25\374\3\261\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\4\40\1\375\20\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\4\40\1\376"+
    "\20\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\20\40\1\377\4\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\20\40\1\u0100\4\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\4\40\1\171\20\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\3\40\1\u0101"+
    "\15\40\1\u0102\3\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\15\40\1\u0103\7\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\13\40\1\u0104\11\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\4\40\1\u0105"+
    "\10\40\1\u0106\7\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\17\40\1\u0107\5\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\1\u0108\24\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\20\40\1\u0109\4\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\4\40"+
    "\1\u010a\20\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\12\40\1\u010b\12\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\21\40\1\u010c\3\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\17\40\1\u010d\5\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\1\u010e"+
    "\24\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\15\40\1\u010f\7\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\14\40\1\u0110\10\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\15\40\1\u0111\7\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\1\u0112\24\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\23\40"+
    "\1\u0113\1\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\16\40\1\u0114\2\40\1\u0115\3\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\12\40\1\u0116\12\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\24\40"+
    "\1\u0117\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\12\40\1\u0118\12\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\15\40\1\u0117\7\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\15\40\1\u0119\7\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\6\40\1\u011a"+
    "\16\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\3\40\1\u011b\21\40\3\140\5\64\1\320\1\64\1\321"+
    "\4\320\1\210\5\320\3\64\4\320\11\175\4\320\25\176"+
    "\3\320\14\321\1\210\31\321\25\u011c\3\321\5\64\1\320"+
    "\1\64\1\321\4\320\1\210\5\320\3\322\4\320\11\175"+
    "\4\320\25\176\3\320\5\64\1\323\1\64\1\324\4\323"+
    "\1\214\5\323\3\64\4\323\11\175\4\323\25\176\3\323"+
    "\14\324\1\214\61\324\5\64\1\323\1\64\1\324\4\323"+
    "\1\214\5\323\3\325\4\323\11\175\4\323\25\176\3\323"+
    "\6\70\1\201\11\70\1\72\35\70\1\73\1\70\1\74"+
    "\23\70\1\201\56\70\1\u011d\16\70\1\201\60\70\1\u011e"+
    "\6\70\5\207\1\u011f\1\207\1\213\4\u011f\1\214\5\u011f"+
    "\3\u0120\4\u011f\11\332\3\u011f\26\332\3\u011f\14\333\1\221"+
    "\61\333\14\334\1\227\61\334\5\230\1\u0121\1\230\1\321"+
    "\4\u0121\1\210\5\u0121\3\u0122\4\u0121\11\335\3\u0121\1\335"+
    "\25\336\3\u0121\5\230\1\u0123\1\230\1\324\4\u0123\1\214"+
    "\5\u0123\3\u0124\4\u0123\11\336\3\u0123\26\336\3\u0123\14\232"+
    "\1\337\4\232\1\242\61\232\1\233\1\232\1\234\2\233"+
    "\2\235\1\340\3\233\1\235\1\u0125\3\232\4\233\11\237"+
    "\4\233\25\240\3\233\14\341\1\342\61\341\5\232\1\235"+
    "\1\232\1\341\4\235\1\342\4\235\1\u0126\3\232\4\235"+
    "\11\232\4\235\25\232\3\235\5\232\1\344\1\232\1\345"+
    "\4\344\1\346\5\344\3\232\4\344\11\232\4\344\25\232"+
    "\3\344\14\345\1\346\61\345\5\232\1\344\1\232\1\345"+
    "\4\344\1\346\4\344\1\u0127\3\232\4\344\11\232\4\344"+
    "\25\232\3\344\5\232\1\344\1\232\1\345\4\344\1\346"+
    "\5\344\3\347\4\344\11\237\4\344\25\232\3\344\5\232"+
    "\1\350\1\232\1\351\4\350\1\352\5\350\3\232\4\350"+
    "\11\232\4\350\25\232\3\350\14\351\1\352\61\351\5\232"+
    "\1\350\1\232\1\351\4\350\1\352\4\350\1\u0128\3\232"+
    "\4\350\11\232\4\350\25\232\3\350\5\232\1\350\1\232"+
    "\1\351\4\350\1\352\5\350\3\353\4\350\11\232\4\350"+
    "\25\240\3\350\2\64\1\354\11\64\1\63\14\64\11\175"+
    "\4\64\25\176\3\64\2\244\1\354\1\244\1\355\1\u0129"+
    "\1\244\1\u012a\4\u0129\1\u012b\5\u0129\3\u012c\4\u0129\11\356"+
    "\3\u0129\1\356\25\357\3\u0129\2\244\1\354\1\244\1\355"+
    "\1\u012d\1\244\1\u012e\4\u012d\1\u012f\5\u012d\3\u0130\4\u012d"+
    "\11\357\3\u012d\26\357\3\u012d\2\241\1\242\1\241\1\243"+
    "\1\360\1\241\1\361\12\360\3\241\4\360\11\241\4\360"+
    "\25\241\3\360\2\361\1\u0131\1\361\1\u0132\7\361\1\360"+
    "\61\361\2\241\1\242\1\241\1\243\1\360\1\241\1\361"+
    "\12\360\3\362\4\360\11\245\4\360\25\241\3\360\2\241"+
    "\1\242\1\241\1\243\1\363\1\241\1\364\12\363\3\241"+
    "\4\363\11\241\4\363\25\241\3\363\2\364\1\u0133\1\364"+
    "\1\u0134\7\364\1\363\61\364\2\241\1\242\1\241\1\243"+
    "\1\363\1\241\1\364\12\363\3\365\4\363\11\241\4\363"+
    "\25\246\3\363\22\0\1\u0135\75\0\1\u0136\2\370\73\0"+
    "\1\u0137\2\370\73\0\1\u0138\2\253\56\0\1\127\1\0"+
    "\1\130\2\127\2\0\4\127\1\0\1\127\3\131\4\127"+
    "\11\31\3\127\1\133\2\31\1\u0139\22\31\3\127\5\261"+
    "\1\u013a\1\261\1\321\4\u013a\1\210\5\u013a\3\u013b\4\u013a"+
    "\11\373\3\u013a\1\373\25\374\3\u013a\5\261\1\u013c\1\261"+
    "\1\324\4\u013c\1\214\5\u013c\3\u013d\4\u013c\11\374\3\u013c"+
    "\26\374\3\u013c\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\1\u013e\24\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\14\40\1\u013f\10\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\u0140\20\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\21\40\1\u0141\3\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\4\40"+
    "\1\u0142\20\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\17\40\1\u0143\5\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\12\40\1\u0144\12\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\10\40\1\u0145\14\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\17\40"+
    "\1\u0146\5\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\14\40\1\u0147\10\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\10\40\1\u0148\14\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\21\40\1\u0149\3\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\15\40"+
    "\1\u014a\7\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\17\40\1\u014b\5\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\22\40\1\u014c\2\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\1\u014d\24\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\17\40\1\u014e"+
    "\5\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\3\40\1\u014f\21\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\21\40\1\u0150\3\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\1\u0151\24\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\10\40\1\u0152\14\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\4\40"+
    "\1\u0153\20\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\10\40\1\u0154\14\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\u0155\20\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\1\u0156\24\40\3\140"+
    "\5\321\1\u0157\1\321\1\324\4\u0157\1\214\5\u0157\3\u0158"+
    "\4\u0157\11\u011c\3\u0157\26\u011c\3\u0157\6\70\1\201\43\70"+
    "\1\u0159\31\70\1\201\61\70\1\u015a\5\70\5\207\1\u011f"+
    "\1\207\1\213\4\u011f\1\214\5\u011f\3\207\4\u011f\11\207"+
    "\4\u011f\25\332\3\u011f\5\207\1\u011f\1\207\1\213\4\u011f"+
    "\1\214\5\u011f\3\u0120\4\u011f\11\207\4\u011f\25\332\3\u011f"+
    "\5\230\1\u0121\1\230\1\321\4\u0121\1\210\5\u0121\3\230"+
    "\4\u0121\11\335\4\u0121\25\336\3\u0121\5\230\1\u0121\1\230"+
    "\1\321\4\u0121\1\210\5\u0121\3\u0122\4\u0121\11\335\4\u0121"+
    "\25\336\3\u0121\5\230\1\u0123\1\230\1\324\4\u0123\1\214"+
    "\5\u0123\3\230\4\u0123\11\335\4\u0123\25\336\3\u0123\5\230"+
    "\1\u0123\1\230\1\324\4\u0123\1\214\5\u0123\3\u0124\4\u0123"+
    "\11\335\4\u0123\25\336\3\u0123\2\244\1\354\1\244\1\355"+
    "\1\u0129\1\244\1\u012a\4\u0129\1\u012b\5\u0129\3\244\4\u0129"+
    "\11\356\4\u0129\25\357\3\u0129\2\u012a\1\u015b\1\u012a\1\u015c"+
    "\7\u012a\1\u012b\31\u012a\25\u015d\3\u012a\2\241\1\242\1\241"+
    "\1\243\1\u012b\1\241\1\u012a\2\u012b\2\360\4\u012b\1\360"+
    "\1\u012b\3\241\4\u012b\11\245\4\u012b\25\246\3\u012b\2\244"+
    "\1\354\1\244\1\355\1\u0129\1\244\1\u012a\4\u0129\1\u012b"+
    "\5\u0129\3\u012c\4\u0129\11\356\4\u0129\25\357\3\u0129\2\244"+
    "\1\354\1\244\1\355\1\u012d\1\244\1\u012e\4\u012d\1\u012f"+
    "\5\u012d\3\244\4\u012d\11\356\4\u012d\25\357\3\u012d\2\u012e"+
    "\1\u015e\1\u012e\1\u015f\7\u012e\1\u012f\61\u012e\2\241\1\242"+
    "\1\241\1\243\1\u012f\1\241\1\u012e\2\u012f\2\363\4\u012f"+
    "\1\363\1\u012f\3\241\4\u012f\11\245\4\u012f\25\246\3\u012f"+
    "\2\244\1\354\1\244\1\355\1\u012d\1\244\1\u012e\4\u012d"+
    "\1\u012f\5\u012d\3\u0130\4\u012d\11\356\4\u012d\25\357\3\u012d"+
    "\2\130\1\u0131\11\130\1\127\61\130\2\141\1\u0133\11\141"+
    "\1\140\61\141\22\0\1\u0160\2\370\73\0\1\u0161\2\253"+
    "\56\0\1\127\1\0\1\130\2\127\2\0\4\127\1\0"+
    "\1\127\3\131\4\127\11\31\3\127\1\133\10\31\1\u0162"+
    "\14\31\3\127\5\261\1\u013a\1\261\1\321\4\u013a\1\210"+
    "\5\u013a\3\261\4\u013a\11\373\4\u013a\25\374\3\u013a\5\261"+
    "\1\u013a\1\261\1\321\4\u013a\1\210\5\u013a\3\u013b\4\u013a"+
    "\11\373\4\u013a\25\374\3\u013a\5\261\1\u013c\1\261\1\324"+
    "\4\u013c\1\214\5\u013c\3\261\4\u013c\11\373\4\u013c\25\374"+
    "\3\u013c\5\261\1\u013c\1\261\1\324\4\u013c\1\214\5\u013c"+
    "\3\u013d\4\u013c\11\373\4\u013c\25\374\3\u013c\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\14\40\1\u0163\10\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\1\u0164\24\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\17\40"+
    "\1\u0165\5\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\22\40\1\u0166\2\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\23\40\1\u0167\1\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\14\40\1\u0168\10\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\15\40"+
    "\1\u0169\7\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\2\40\1\u016a\22\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\1\40\1\u016b\23\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\10\40\1\u016c\14\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\10\40"+
    "\1\u016d\14\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\14\40\1\u016e\10\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\10\40\1\u016f\14\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\15\40\1\u0170\7\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\17\40"+
    "\1\u0171\5\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\3\40\1\u0172\21\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\u0173\20\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\6\40\1\u0174\16\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\2\40"+
    "\1\u0172\22\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\14\40\1\u0175\10\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\3\40\1\u0176\21\40\3\140\5\321"+
    "\1\u0157\1\321\1\324\4\u0157\1\214\5\u0157\3\321\4\u0157"+
    "\11\321\4\u0157\25\u011c\3\u0157\5\321\1\u0157\1\321\1\324"+
    "\4\u0157\1\214\5\u0157\3\u0158\4\u0157\11\321\4\u0157\25\u011c"+
    "\3\u0157\6\70\1\201\57\70\1\u0177\15\70\1\201\56\70"+
    "\1\u0178\10\70\2\321\1\u015b\11\321\1\210\31\321\25\u011c"+
    "\3\321\2\u012a\1\u015b\1\u012a\1\u015c\1\u0179\1\u012a\1\u012e"+
    "\4\u0179\1\u012f\5\u0179\3\u017a\4\u0179\11\u015d\3\u0179\26\u015d"+
    "\3\u0179\2\324\1\u015e\11\324\1\214\61\324\22\0\1\u017b"+
    "\2\370\56\0\1\127\1\0\1\130\2\127\2\0\4\127"+
    "\1\0\1\127\3\131\4\127\11\31\3\127\1\133\16\31"+
    "\1\u017c\6\31\3\127\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\15\40\1\u017d\7\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\1\u017e\10\40\3\140\1\143\25\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\22\40\1\u017f\2\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\2\40\1\u0180"+
    "\22\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\4\40\1\u0181\20\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\1\u0182\24\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\u0183\20\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\10\40\1\u0184\14\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\2\40"+
    "\1\u0185\22\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\17\40\1\u0186\5\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\2\40\1\u0187\22\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\21\40\1\u0188\3\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\20\40"+
    "\1\u0189\4\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\1\u018a\24\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\1\u018b\14\40\1\u018c\7\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\3\40\1\u018d\21\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\10\40"+
    "\1\u0151\14\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\21\40\1\u018e\3\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\4\40\1\u018f\20\40\3\140\6\70"+
    "\1\201\47\70\1\u0190\25\70\1\201\37\70\1\u0191\27\70"+
    "\2\u012a\1\u015b\1\u012a\1\u015c\1\u0179\1\u012a\1\u012e\4\u0179"+
    "\1\u012f\5\u0179\3\u012a\4\u0179\11\u012a\4\u0179\25\u015d\3\u0179"+
    "\2\u012a\1\u015b\1\u012a\1\u015c\1\u0179\1\u012a\1\u012e\4\u0179"+
    "\1\u012f\5\u0179\3\u017a\4\u0179\11\u012a\4\u0179\25\u015d\3\u0179"+
    "\5\0\1\127\1\0\1\130\2\127\2\0\4\127\1\0"+
    "\1\127\3\131\4\127\11\31\3\127\1\133\1\u0192\24\31"+
    "\3\127\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\1\40\1\u0193\2\40\1\u0194"+
    "\3\40\1\u0195\3\140\1\143\25\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\2\40\1\u0196\22\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\21\40\1\u0197"+
    "\3\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\17\40\1\u0198\5\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\17\40\1\u0199\5\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\20\40\1\u019a\4\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\17\40\1\u019b"+
    "\5\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\15\40\1\u019c\7\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\10\40\1\u019d\14\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\13\40\1\314\11\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\20\40\1\u019e"+
    "\4\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\20\40\1\u019f\4\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\20\40\1\u01a0\4\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\1\u01a1\24\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\4\40\1\u0117\20\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\17\40"+
    "\1\u0109\5\40\3\140\6\70\1\201\54\70\1\u01a2\20\70"+
    "\1\201\11\70\1\u01a3\55\70\5\0\1\127\1\0\1\130"+
    "\2\127\2\0\4\127\1\0\1\127\3\131\4\127\11\31"+
    "\3\127\1\133\12\31\1\u01a4\12\31\3\127\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\15\40\1\u01a5\7\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\14\40\1\u01a6"+
    "\10\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\4\40\1\u01a7\20\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\21\40\1\u01a8\3\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\15\40\1\u01a9\7\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\1\u01aa\24\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\3\40"+
    "\1\u01ab\21\40\3\140\6\70\1\201\53\70\1\u0191\21\70"+
    "\1\201\51\70\1\u01ac\15\70\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\12\40\1\u01ad\12\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\21\40\1\u01ae\3\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\1\u01af\24\40"+
    "\3\140\5\0\1\140\1\0\1\141\2\140\2\0\4\140"+
    "\1\0\1\140\3\142\4\140\11\40\3\140\1\143\15\40"+
    "\1\u01b0\7\40\3\140\5\0\1\140\1\0\1\141\2\140"+
    "\2\0\4\140\1\0\1\140\3\142\4\140\11\40\3\140"+
    "\1\143\17\40\1\u01b1\5\40\3\140\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\17\40\1\u01b2\5\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\4\40\1\u01b3\20\40"+
    "\3\140\6\70\1\201\54\70\1\u01b4\12\70\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\4\40\1\u01b5\20\40\3\140"+
    "\5\0\1\140\1\0\1\141\2\140\2\0\4\140\1\0"+
    "\1\140\3\142\4\140\11\40\3\140\1\143\4\40\1\u01b6"+
    "\20\40\3\140\5\0\1\140\1\0\1\141\2\140\2\0"+
    "\4\140\1\0\1\140\3\142\4\140\11\40\3\140\1\143"+
    "\12\40\1\u0117\12\40\3\140\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\17\40\1\u01b7\5\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\20\40\1\u01b8\4\40\3\140"+
    "\6\70\1\201\54\70\1\u01b9\12\70\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\1\u01ba\24\40\3\140\5\0\1\140"+
    "\1\0\1\141\2\140\2\0\4\140\1\0\1\140\3\142"+
    "\4\140\11\40\3\140\1\143\17\40\1\u01bb\5\40\3\140"+
    "\6\70\1\201\55\70\1\u01bc\11\70\5\0\1\140\1\0"+
    "\1\141\2\140\2\0\4\140\1\0\1\140\3\142\4\140"+
    "\11\40\3\140\1\143\14\40\1\u01bd\10\40\3\140\5\0"+
    "\1\140\1\0\1\141\2\140\2\0\4\140\1\0\1\140"+
    "\3\142\4\140\11\40\3\140\1\143\15\40\1\u01be\7\40"+
    "\3\140\6\70\1\u01bf\67\70\5\0\1\140\1\0\1\141"+
    "\2\140\2\0\4\140\1\0\1\140\3\142\4\140\11\40"+
    "\3\140\1\143\15\40\1\u01c0\7\40\3\140";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23870];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\60\1\2\0\3\1\1\0\1\1\3\0"+
    "\21\1\2\0\3\1\1\0\55\1\1\11\1\1\3\0"+
    "\23\1\2\0\7\1\1\11\4\1\1\0\57\1\3\0"+
    "\5\1\1\0\26\1\1\0\46\1\2\0\72\1\2\0"+
    "\34\1\2\0\2\1\1\0\24\1\2\0\20\1\2\0"+
    "\10\1\1\0\7\1\1\0\4\1\1\0\2\1\1\0"+
    "\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[448];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 77: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 78: break;
          case 3:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 79: break;
          case 4:
            { lexeme=yytext(); return ErrorSig;
            }
            // fall through
          case 80: break;
          case 5:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 81: break;
          case 6:
            { lexeme=yytext(); return ErrorOPARBo;
            }
            // fall through
          case 82: break;
          case 7:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 83: break;
          case 8:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 84: break;
          case 9:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 85: break;
          case 10:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 86: break;
          case 11:
            { lexeme=yytext(); return Coma;
            }
            // fall through
          case 87: break;
          case 12:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 88: break;
          case 13:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 89: break;
          case 14:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 90: break;
          case 15:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 91: break;
          case 16:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 92: break;
          case 17:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 93: break;
          case 18:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 94: break;
          case 19:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 95: break;
          case 20:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 96: break;
          case 21:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 97: break;
          case 22:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 98: break;
          case 23:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 99: break;
          case 24:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 100: break;
          case 25:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 101: break;
          case 26:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 102: break;
          case 27:
            { lexeme=yytext(); return ErrorNameClss;
            }
            // fall through
          case 103: break;
          case 28:
            { lexeme=yytext(); return ErrorID;
            }
            // fall through
          case 104: break;
          case 29:
            { lexeme=yytext(); return Texto;
            }
            // fall through
          case 105: break;
          case 30:
            { lexeme=yytext(); return ErrorSigP;
            }
            // fall through
          case 106: break;
          case 31:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 107: break;
          case 32:
            { lexeme=yytext(); return OPARBool;
            }
            // fall through
          case 108: break;
          case 33:
            { lexeme=yytext(); return ErrorSIGNOS1;
            }
            // fall through
          case 109: break;
          case 34:
            { lexeme=yytext(); return ErrorSIGNOS;
            }
            // fall through
          case 110: break;
          case 35:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 111: break;
          case 36:
            { lexeme=yytext(); return ErrorCer;
            }
            // fall through
          case 112: break;
          case 37:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 113: break;
          case 38:
            { lexeme=yytext(); return ErrorOp_Rel;
            }
            // fall through
          case 114: break;
          case 39:
            { lexeme=yytext(); return ErrorSIGNOS2;
            }
            // fall through
          case 115: break;
          case 40:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 116: break;
          case 41:
            { lexeme=yytext(); return ErrorOp_Atr;
            }
            // fall through
          case 117: break;
          case 42:
            { lexeme=yytext(); return ErrorOp_IN;
            }
            // fall through
          case 118: break;
          case 43:
            { lexeme=yytext(); return ErrorDec;
            }
            // fall through
          case 119: break;
          case 44:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 120: break;
          case 45:
            { lexeme=yytext(); return Decimal;
            }
            // fall through
          case 121: break;
          case 46:
            { lexeme=yytext(); return ErrorCom;
            }
            // fall through
          case 122: break;
          case 47:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 123: break;
          case 48:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 124: break;
          case 49:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 125: break;
          case 50:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 126: break;
          case 51:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 127: break;
          case 52:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 128: break;
          case 53:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 129: break;
          case 54:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 130: break;
          case 55:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 131: break;
          case 56:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 132: break;
          case 57:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 133: break;
          case 58:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 134: break;
          case 59:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 135: break;
          case 60:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 136: break;
          case 61:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 137: break;
          case 62:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 138: break;
          case 63:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 139: break;
          case 64:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 140: break;
          case 65:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 141: break;
          case 66:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 142: break;
          case 67:
            { lexeme=yytext(); return T_DisponibleP;
            }
            // fall through
          case 143: break;
          case 68:
            { lexeme=yytext(); return T_DisponibleM;
            }
            // fall through
          case 144: break;
          case 69:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 145: break;
          case 70:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 146: break;
          case 71:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 147: break;
          case 72:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 148: break;
          case 73:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 149: break;
          case 74:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 150: break;
          case 75:
            { lexeme=yytext(); return BiExt;
            }
            // fall through
          case 151: break;
          case 76:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
