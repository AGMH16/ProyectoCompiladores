// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexico.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\1\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\23\2\0\1\25\1\26\1\27\1\30"+
    "\1\31\10\27\1\32\1\33\1\34\1\27\1\35\10\27"+
    "\1\36\1\0\1\37\1\40\1\41\1\0\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\2\53"+
    "\1\54\1\55\1\56\1\57\1\60\1\53\1\61\1\62"+
    "\1\63\1\64\1\65\3\53\1\66\1\67\1\70\1\71"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\4\21\1\22\1\23\1\24\20\25"+
    "\1\26\1\1\1\27\1\17\1\0\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\0\1\2"+
    "\1\41\1\42\1\43\1\0\1\44\1\17\2\21\1\33"+
    "\1\21\1\45\1\46\1\47\27\25\1\50\2\25\1\51"+
    "\1\52\2\30\1\0\1\53\2\0\1\54\2\0\2\2"+
    "\1\41\1\44\3\21\36\25\1\55\1\56\2\0\1\2"+
    "\3\21\20\25\1\57\3\25\1\60\1\61\4\25\1\62"+
    "\1\63\1\64\2\25\1\21\2\25\1\65\1\25\1\66"+
    "\7\25\1\67\1\70\13\25\1\21\1\25\1\71\4\25"+
    "\1\72\15\25\1\21\1\73\10\25\1\74\2\25\1\75"+
    "\6\25\1\21\5\25\1\76\1\77\1\100\1\101\1\102"+
    "\1\25\1\103\1\104\1\105\1\25\1\106\13\25\1\107"+
    "\1\110\3\25\1\111\1\112\3\25\1\113\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c\0\u0366"+
    "\0\u03a0\0\u03da\0\256\0\u0414\0\u044e\0\u0488\0\u04c2\0\u04fc"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\u0706\0\u0740\0\u077a\0\u07b4\0\u07ee\0\u0828\0\u0862\0\u089c"+
    "\0\u08d6\0\u0910\0\u094a\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c"+
    "\0\u0aa6\0\u0ae0\0\u0b1a\0\u0196\0\u01d0\0\u0b54\0\u0b8e\0\u02b8"+
    "\0\u0bc8\0\u0c02\0\u0c3c\0\u0366\0\u03a0\0\u0c76\0\u0cb0\0\u0cb0"+
    "\0\u0cea\0\u0d24\0\u0d5e\0\u0d98\0\u04fc\0\u0536\0\u0570\0\u0dd2"+
    "\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68\0\u0fa2"+
    "\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138\0\u1172"+
    "\0\u11ac\0\u11e6\0\u1220\0\u125a\0\u1294\0\u12ce\0\u1308\0\u1342"+
    "\0\u137c\0\u094a\0\u09be\0\72\0\u13b6\0\u13f0\0\u0b1a\0\u142a"+
    "\0\u1464\0\u0b8e\0\u149e\0\u14d8\0\72\0\u1512\0\u154c\0\u09f8"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\u16e2\0\u171c"+
    "\0\u1756\0\u1790\0\u17ca\0\u1804\0\u183e\0\u1878\0\u18b2\0\u18ec"+
    "\0\u1926\0\u1960\0\u199a\0\u19d4\0\u1a0e\0\u1a48\0\u1a82\0\u1abc"+
    "\0\u1af6\0\u1b30\0\u1b6a\0\u1ba4\0\u1bde\0\u1c18\0\u1c52\0\u1c8c"+
    "\0\u1cc6\0\u13b6\0\u0ae0\0\u1d00\0\u1d3a\0\u149e\0\u1d74\0\u0d5e"+
    "\0\u1dae\0\u1de8\0\u1e22\0\u1e5c\0\u1e96\0\u1ed0\0\u1f0a\0\u1f44"+
    "\0\u1f7e\0\u1fb8\0\u1ff2\0\u202c\0\u2066\0\u20a0\0\u20da\0\u2114"+
    "\0\u214e\0\u05aa\0\u2188\0\u21c2\0\u21fc\0\u05aa\0\u05aa\0\u2236"+
    "\0\u2270\0\u22aa\0\u22e4\0\u05aa\0\u05aa\0\u05aa\0\u231e\0\u2358"+
    "\0\u2392\0\u23cc\0\u2406\0\u05aa\0\u2440\0\u05aa\0\u247a\0\u24b4"+
    "\0\u24ee\0\u2528\0\u2562\0\u259c\0\u25d6\0\u05aa\0\u05aa\0\u2610"+
    "\0\u264a\0\u2684\0\u26be\0\u26f8\0\u2732\0\u276c\0\u27a6\0\u27e0"+
    "\0\u281a\0\u2854\0\u288e\0\u28c8\0\u2902\0\u293c\0\u2976\0\u29b0"+
    "\0\u29ea\0\u05aa\0\u2a24\0\u2a5e\0\u2a98\0\u2ad2\0\u2b0c\0\u2b46"+
    "\0\u2b80\0\u2bba\0\u2bf4\0\u2c2e\0\u2c68\0\u2ca2\0\u2cdc\0\u2d16"+
    "\0\u05aa\0\u2d50\0\u2d8a\0\u2dc4\0\u2dfe\0\u2e38\0\u2e72\0\u2eac"+
    "\0\u2ee6\0\u05aa\0\u2f20\0\u2f5a\0\u05aa\0\u2f94\0\u2fce\0\u3008"+
    "\0\u3042\0\u307c\0\u30b6\0\u30f0\0\u312a\0\u3164\0\u319e\0\u31d8"+
    "\0\u3212\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u324c\0\u05aa"+
    "\0\u05aa\0\u05aa\0\u3286\0\u044e\0\u32c0\0\u32fa\0\u3334\0\u336e"+
    "\0\u33a8\0\u33e2\0\u341c\0\u3456\0\u3490\0\u34ca\0\u3504\0\u05aa"+
    "\0\u05aa\0\u353e\0\u3578\0\u35b2\0\u05aa\0\u05aa\0\u35ec\0\u3626"+
    "\0\u3660\0\u05aa\0\u05aa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\5\25\1\26\1\27"+
    "\1\25\1\30\1\31\1\32\1\2\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\33\1\41\1\42\1\33\1\43"+
    "\1\44\1\45\1\33\1\46\1\47\1\50\1\51\1\33"+
    "\1\52\1\33\1\53\1\54\1\55\73\0\2\3\1\0"+
    "\1\3\111\0\1\56\45\0\6\57\1\60\4\57\1\0"+
    "\56\57\7\0\1\61\14\0\1\62\55\0\1\63\72\0"+
    "\1\64\72\0\1\65\72\0\1\66\10\0\1\62\61\0"+
    "\1\67\7\0\1\62\62\0\1\67\2\0\1\17\3\0"+
    "\1\62\63\0\1\70\66\0\1\71\3\0\1\72\4\0"+
    "\1\62\65\0\1\17\21\0\25\73\24\0\1\74\72\0"+
    "\1\75\54\0\1\76\15\0\1\77\1\100\65\0\1\101"+
    "\4\0\5\25\1\102\3\25\3\0\26\25\23\0\1\101"+
    "\4\0\11\25\3\0\26\25\23\0\1\101\4\0\10\25"+
    "\1\103\3\0\26\25\23\0\1\101\4\0\11\25\3\0"+
    "\20\25\1\104\5\25\41\0\1\105\72\0\1\106\72\0"+
    "\1\107\51\0\1\110\4\0\11\33\3\0\26\33\23\0"+
    "\1\110\4\0\11\33\3\0\16\33\1\111\7\33\23\0"+
    "\1\110\4\0\11\33\3\0\1\33\1\112\11\33\1\113"+
    "\2\33\1\114\7\33\23\0\1\110\4\0\11\33\3\0"+
    "\5\33\1\115\20\33\23\0\1\110\4\0\11\33\3\0"+
    "\13\33\1\116\1\33\1\117\3\33\1\120\4\33\23\0"+
    "\1\110\4\0\11\33\3\0\1\33\1\121\24\33\23\0"+
    "\1\110\4\0\11\33\3\0\1\33\1\122\24\33\23\0"+
    "\1\110\4\0\11\33\3\0\15\33\1\123\10\33\23\0"+
    "\1\110\4\0\11\33\3\0\5\33\1\124\10\33\1\125"+
    "\7\33\23\0\1\110\4\0\11\33\3\0\5\33\1\126"+
    "\3\33\1\127\14\33\23\0\1\110\4\0\11\33\3\0"+
    "\23\33\1\130\2\33\23\0\1\110\4\0\11\33\3\0"+
    "\1\33\1\131\16\33\1\132\2\33\1\133\2\33\23\0"+
    "\1\110\4\0\11\33\3\0\1\33\1\134\3\33\1\135"+
    "\20\33\23\0\1\110\4\0\11\33\3\0\5\33\1\136"+
    "\3\33\1\137\14\33\23\0\1\110\4\0\11\33\3\0"+
    "\1\33\1\140\24\33\23\0\1\110\4\0\11\33\3\0"+
    "\5\33\1\141\20\33\72\0\1\142\72\0\1\63\72\0"+
    "\1\143\5\0\1\76\15\0\1\77\1\76\45\0\6\57"+
    "\1\144\71\57\1\145\63\57\7\0\1\61\71\0\1\146"+
    "\3\0\3\146\1\0\1\146\62\0\1\147\14\0\1\150"+
    "\5\0\1\151\34\0\1\147\14\0\1\66\72\0\2\152"+
    "\54\0\13\153\1\154\56\153\2\72\1\155\1\72\1\156"+
    "\65\72\20\0\1\157\4\0\11\73\3\0\26\73\27\0"+
    "\1\160\52\0\1\76\15\0\2\77\65\0\1\101\4\0"+
    "\11\25\54\0\1\101\4\0\3\25\1\103\5\25\3\0"+
    "\26\25\13\0\1\147\7\0\1\101\4\0\1\161\5\25"+
    "\1\162\2\25\3\0\26\25\1\0\1\147\21\0\1\101"+
    "\4\0\11\25\3\0\11\25\1\163\14\25\23\0\1\110"+
    "\21\0\25\33\23\0\1\110\4\0\11\33\3\0\13\33"+
    "\1\164\12\33\23\0\1\110\4\0\11\33\3\0\4\33"+
    "\1\165\21\33\23\0\1\110\4\0\11\33\3\0\1\33"+
    "\1\166\24\33\23\0\1\110\4\0\11\33\3\0\15\33"+
    "\1\167\3\33\1\170\4\33\23\0\1\110\4\0\11\33"+
    "\3\0\21\33\1\171\2\33\1\172\1\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\173\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\22\33\1\174\3\33\23\0\1\110"+
    "\4\0\11\33\3\0\3\33\1\175\16\33\1\176\3\33"+
    "\23\0\1\110\4\0\11\33\3\0\13\33\1\177\12\33"+
    "\23\0\1\110\4\0\11\33\3\0\3\33\1\200\22\33"+
    "\23\0\1\110\4\0\11\33\3\0\3\33\1\201\15\33"+
    "\1\202\4\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\203\20\33\23\0\1\110\4\0\11\33\3\0\7\33"+
    "\1\204\16\33\23\0\1\110\4\0\11\33\3\0\22\33"+
    "\1\205\3\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\206\20\33\23\0\1\110\4\0\11\33\3\0\13\33"+
    "\1\207\12\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\210\5\33\23\0\1\110\4\0\11\33\3\0\11\33"+
    "\1\211\4\33\1\212\7\33\23\0\1\110\4\0\11\33"+
    "\3\0\2\33\1\213\23\33\23\0\1\110\4\0\11\33"+
    "\3\0\11\33\1\214\14\33\23\0\1\110\4\0\11\33"+
    "\3\0\1\33\1\215\24\33\23\0\1\110\4\0\11\33"+
    "\3\0\15\33\1\216\10\33\23\0\1\110\4\0\11\33"+
    "\3\0\15\33\1\217\10\33\23\0\1\110\4\0\11\33"+
    "\3\0\15\33\1\220\10\33\23\0\1\110\4\0\11\33"+
    "\3\0\20\33\1\221\5\33\11\0\1\222\107\0\1\223"+
    "\77\0\1\224\74\0\1\147\34\0\13\153\1\225\71\153"+
    "\1\225\3\153\1\226\52\153\2\0\1\155\107\0\1\157"+
    "\21\0\25\73\23\0\1\101\4\0\5\25\1\227\3\25"+
    "\3\0\26\25\23\0\1\101\4\0\10\25\1\230\3\0"+
    "\26\25\23\0\1\101\4\0\11\25\3\0\15\25\1\231"+
    "\10\25\23\0\1\110\4\0\11\33\3\0\5\33\1\232"+
    "\20\33\23\0\1\110\4\0\11\33\3\0\5\33\1\233"+
    "\20\33\23\0\1\110\4\0\11\33\3\0\21\33\1\234"+
    "\4\33\23\0\1\110\4\0\11\33\3\0\21\33\1\235"+
    "\4\33\23\0\1\110\4\0\11\33\3\0\5\33\1\136"+
    "\20\33\23\0\1\110\4\0\11\33\3\0\4\33\1\236"+
    "\15\33\1\237\3\33\23\0\1\110\4\0\11\33\3\0"+
    "\16\33\1\240\7\33\23\0\1\110\4\0\11\33\3\0"+
    "\14\33\1\241\11\33\23\0\1\110\4\0\11\33\3\0"+
    "\5\33\1\242\10\33\1\243\7\33\23\0\1\110\4\0"+
    "\11\33\3\0\20\33\1\244\5\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\245\24\33\23\0\1\110\4\0"+
    "\11\33\3\0\21\33\1\246\4\33\23\0\1\110\4\0"+
    "\11\33\3\0\5\33\1\247\20\33\23\0\1\110\4\0"+
    "\11\33\3\0\13\33\1\250\12\33\23\0\1\110\4\0"+
    "\11\33\3\0\22\33\1\251\3\33\23\0\1\110\4\0"+
    "\11\33\3\0\20\33\1\252\5\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\253\24\33\23\0\1\110\4\0"+
    "\11\33\3\0\16\33\1\254\7\33\23\0\1\110\4\0"+
    "\11\33\3\0\15\33\1\255\10\33\23\0\1\110\4\0"+
    "\11\33\3\0\16\33\1\256\7\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\257\24\33\23\0\1\110\4\0"+
    "\11\33\3\0\24\33\1\260\1\33\23\0\1\110\4\0"+
    "\11\33\3\0\17\33\1\261\2\33\1\262\3\33\23\0"+
    "\1\110\4\0\11\33\3\0\13\33\1\263\12\33\23\0"+
    "\1\110\4\0\11\33\3\0\25\33\1\264\23\0\1\110"+
    "\4\0\11\33\3\0\13\33\1\265\12\33\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\264\7\33\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\266\7\33\23\0\1\110"+
    "\4\0\11\33\3\0\7\33\1\267\16\33\23\0\1\110"+
    "\4\0\11\33\3\0\4\33\1\270\21\33\33\0\1\147"+
    "\41\0\13\153\1\225\3\153\1\155\52\153\20\0\1\101"+
    "\4\0\3\25\1\230\5\25\3\0\26\25\23\0\1\101"+
    "\4\0\11\25\3\0\3\25\1\271\22\25\23\0\1\110"+
    "\4\0\11\33\3\0\1\33\1\272\24\33\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\273\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\5\33\1\274\20\33\23\0\1\110"+
    "\4\0\11\33\3\0\22\33\1\275\3\33\23\0\1\110"+
    "\4\0\11\33\3\0\5\33\1\276\20\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\277\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\13\33\1\300\12\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\301\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\302\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\303\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\304\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\22\33\1\305\3\33\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\306\7\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\307\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\23\33\1\310\2\33\23\0\1\110"+
    "\4\0\11\33\3\0\1\33\1\311\24\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\312\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\4\33\1\313\21\33\23\0\1\110"+
    "\4\0\11\33\3\0\22\33\1\314\3\33\23\0\1\110"+
    "\4\0\11\33\3\0\1\33\1\315\24\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\316\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\5\33\1\317\20\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\320\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\5\33\1\321\20\33\23\0\1\110"+
    "\4\0\11\33\3\0\1\33\1\322\24\33\23\0\1\101"+
    "\4\0\11\25\3\0\11\25\1\323\14\25\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\324\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\1\33\1\325\24\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\326\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\23\33\1\327\2\33\23\0\1\110"+
    "\4\0\11\33\3\0\24\33\1\330\1\33\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\331\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\332\7\33\23\0\1\110"+
    "\4\0\11\33\3\0\3\33\1\333\22\33\23\0\1\110"+
    "\4\0\11\33\3\0\2\33\1\334\23\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\335\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\336\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\337\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\11\33\1\340\14\33\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\341\7\33\23\0\1\110"+
    "\4\0\11\33\3\0\20\33\1\342\5\33\23\0\1\110"+
    "\4\0\11\33\3\0\4\33\1\343\21\33\23\0\1\110"+
    "\4\0\11\33\3\0\5\33\1\344\20\33\23\0\1\110"+
    "\4\0\11\33\3\0\7\33\1\345\16\33\23\0\1\110"+
    "\4\0\11\33\3\0\3\33\1\343\22\33\23\0\1\110"+
    "\4\0\11\33\3\0\15\33\1\346\10\33\23\0\1\110"+
    "\4\0\11\33\3\0\4\33\1\347\21\33\23\0\1\101"+
    "\4\0\11\25\3\0\17\25\1\350\6\25\23\0\1\110"+
    "\4\0\11\33\3\0\16\33\1\351\7\33\23\0\1\110"+
    "\4\0\1\352\10\33\3\0\26\33\23\0\1\110\4\0"+
    "\11\33\3\0\23\33\1\353\2\33\23\0\1\110\4\0"+
    "\11\33\3\0\3\33\1\354\22\33\23\0\1\110\4\0"+
    "\11\33\3\0\5\33\1\355\20\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\356\24\33\23\0\1\110\4\0"+
    "\11\33\3\0\5\33\1\357\20\33\23\0\1\110\4\0"+
    "\11\33\3\0\11\33\1\360\14\33\23\0\1\110\4\0"+
    "\11\33\3\0\3\33\1\361\22\33\23\0\1\110\4\0"+
    "\11\33\3\0\20\33\1\362\5\33\23\0\1\110\4\0"+
    "\11\33\3\0\3\33\1\363\22\33\23\0\1\110\4\0"+
    "\11\33\3\0\22\33\1\364\3\33\23\0\1\110\4\0"+
    "\11\33\3\0\21\33\1\365\4\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\366\24\33\23\0\1\110\4\0"+
    "\11\33\3\0\1\33\1\367\14\33\1\370\7\33\23\0"+
    "\1\110\4\0\11\33\3\0\4\33\1\371\21\33\23\0"+
    "\1\110\4\0\11\33\3\0\11\33\1\315\14\33\23\0"+
    "\1\110\4\0\11\33\3\0\22\33\1\372\3\33\23\0"+
    "\1\110\4\0\11\33\3\0\5\33\1\373\20\33\23\0"+
    "\1\101\4\0\11\25\3\0\1\25\1\374\24\25\23\0"+
    "\1\110\4\0\1\33\1\375\2\33\1\376\3\33\1\377"+
    "\3\0\26\33\23\0\1\110\4\0\11\33\3\0\3\33"+
    "\1\u0100\22\33\23\0\1\110\4\0\11\33\3\0\22\33"+
    "\1\u0101\3\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0102\5\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0103\5\33\23\0\1\110\4\0\11\33\3\0\21\33"+
    "\1\u0104\4\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0105\5\33\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u0106\7\33\23\0\1\110\4\0\11\33\3\0\11\33"+
    "\1\u0107\14\33\23\0\1\110\4\0\11\33\3\0\14\33"+
    "\1\216\11\33\23\0\1\110\4\0\11\33\3\0\21\33"+
    "\1\u0108\4\33\23\0\1\110\4\0\11\33\3\0\21\33"+
    "\1\u0109\4\33\23\0\1\110\4\0\11\33\3\0\21\33"+
    "\1\u010a\4\33\23\0\1\110\4\0\11\33\3\0\1\33"+
    "\1\u010b\24\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\264\20\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\246\5\33\23\0\1\101\4\0\11\25\3\0\13\25"+
    "\1\u010c\12\25\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u010d\7\33\23\0\1\110\4\0\11\33\3\0\15\33"+
    "\1\u010e\10\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\u010f\20\33\23\0\1\110\4\0\11\33\3\0\22\33"+
    "\1\u0110\3\33\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u0111\7\33\23\0\1\110\4\0\11\33\3\0\1\33"+
    "\1\u0112\24\33\23\0\1\110\4\0\11\33\3\0\4\33"+
    "\1\u0113\21\33\23\0\1\110\4\0\11\33\3\0\13\33"+
    "\1\u0114\12\33\23\0\1\110\4\0\11\33\3\0\22\33"+
    "\1\u0115\3\33\23\0\1\110\4\0\11\33\3\0\1\33"+
    "\1\u0116\24\33\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u0117\7\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0118\5\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0119\5\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\u011a\20\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\u011b\20\33\23\0\1\110\4\0\11\33\3\0\5\33"+
    "\1\u011c\20\33\23\0\1\110\4\0\11\33\3\0\13\33"+
    "\1\264\12\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u011d\5\33\23\0\1\110\4\0\11\33\3\0\21\33"+
    "\1\u011e\4\33\23\0\1\110\4\0\11\33\3\0\1\33"+
    "\1\u011f\24\33\23\0\1\110\4\0\11\33\3\0\20\33"+
    "\1\u0120\5\33\23\0\1\110\4\0\11\33\3\0\15\33"+
    "\1\u0121\10\33\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u0122\7\33\23\0\1\110\4\0\11\33\3\0\16\33"+
    "\1\u0123\7\33\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13978];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\54\1\1\0\11\1\1\0\4\1\1\0"+
    "\45\1\1\11\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\11\46\1\2\0\216\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[291];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 77: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 78: break;
          case 3:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 79: break;
          case 4:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 80: break;
          case 5:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 81: break;
          case 6:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 82: break;
          case 7:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 83: break;
          case 8:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 84: break;
          case 9:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 85: break;
          case 10:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 86: break;
          case 11:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 87: break;
          case 12:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 88: break;
          case 13:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 89: break;
          case 14:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 90: break;
          case 15:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 91: break;
          case 16:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 92: break;
          case 17:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 93: break;
          case 18:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 94: break;
          case 19:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 95: break;
          case 20:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 96: break;
          case 21:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 97: break;
          case 22:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 98: break;
          case 23:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 99: break;
          case 24:
            { lexeme=yytext(); return Texto;
            }
            // fall through
          case 100: break;
          case 25:
            { lexeme=yytext(); return ErrorMod;
            }
            // fall through
          case 101: break;
          case 26:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 102: break;
          case 27:
            { lexeme=yytext(); return OPARBool;
            }
            // fall through
          case 103: break;
          case 28:
            { lexeme=yytext(); return ErrorPar_a;
            }
            // fall through
          case 104: break;
          case 29:
            { lexeme=yytext(); return ErrorPar_c;
            }
            // fall through
          case 105: break;
          case 30:
            { lexeme=yytext(); return ErrorMul;
            }
            // fall through
          case 106: break;
          case 31:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 107: break;
          case 32:
            { lexeme=yytext(); return ErrorPun;
            }
            // fall through
          case 108: break;
          case 33:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 109: break;
          case 34:
            { lexeme=yytext(); return ErrorD_pu;
            }
            // fall through
          case 110: break;
          case 35:
            { lexeme=yytext(); return ErrorP_C;
            }
            // fall through
          case 111: break;
          case 36:
            { lexeme=yytext(); return ErrorOp_Rel;
            }
            // fall through
          case 112: break;
          case 37:
            { lexeme=yytext(); return ErrorCo_a;
            }
            // fall through
          case 113: break;
          case 38:
            { lexeme=yytext(); return ErrorCo_c;
            }
            // fall through
          case 114: break;
          case 39:
            { lexeme=yytext(); return ErrorExp;
            }
            // fall through
          case 115: break;
          case 40:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 116: break;
          case 41:
            { lexeme=yytext(); return ErrorLL_a;
            }
            // fall through
          case 117: break;
          case 42:
            { lexeme=yytext(); return ErrorLL_c;
            }
            // fall through
          case 118: break;
          case 43:
            { lexeme=yytext(); return ErrorOPARBo;
            }
            // fall through
          case 119: break;
          case 44:
            { lexeme=yytext(); return ErrorOp_IN;
            }
            // fall through
          case 120: break;
          case 45:
            { lexeme=yytext(); return ErrorCom;
            }
            // fall through
          case 121: break;
          case 46:
            { lexeme=yytext(); return ErrorOp_Atr;
            }
            // fall through
          case 122: break;
          case 47:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 123: break;
          case 48:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 124: break;
          case 49:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 125: break;
          case 50:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 126: break;
          case 51:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 127: break;
          case 52:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 128: break;
          case 53:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 129: break;
          case 54:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 130: break;
          case 55:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 131: break;
          case 56:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 132: break;
          case 57:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 133: break;
          case 58:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 134: break;
          case 59:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 135: break;
          case 60:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 136: break;
          case 61:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 137: break;
          case 62:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 138: break;
          case 63:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 139: break;
          case 64:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 140: break;
          case 65:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 141: break;
          case 66:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 142: break;
          case 67:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 143: break;
          case 68:
            { lexeme=yytext(); return T_DisponibleP;
            }
            // fall through
          case 144: break;
          case 69:
            { lexeme=yytext(); return T_DisponibleM;
            }
            // fall through
          case 145: break;
          case 70:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 146: break;
          case 71:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 147: break;
          case 72:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 148: break;
          case 73:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 149: break;
          case 74:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 150: break;
          case 75:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 151: break;
          case 76:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
