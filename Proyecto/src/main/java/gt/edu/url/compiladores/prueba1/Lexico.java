// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexico.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\11\23\1\24"+
    "\1\25\1\26\1\27\1\26\1\0\1\7\1\30\1\31"+
    "\1\32\1\33\1\34\10\32\1\35\1\36\1\37\1\32"+
    "\1\40\10\32\1\41\1\0\1\42\1\43\1\44\1\0"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\2\56\1\57\1\60\1\61\1\62\1\63\1\56"+
    "\1\64\1\65\1\66\1\67\1\70\3\56\1\71\1\72"+
    "\1\73\1\74\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\22\1\23\4\24\1\25\1\26"+
    "\1\27\1\1\20\30\1\31\1\6\1\32\1\22\1\0"+
    "\1\33\3\0\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\17\1\46\1\0\1\2"+
    "\2\0\1\47\1\17\1\50\1\0\1\51\1\52\1\0"+
    "\1\53\1\22\2\24\1\36\1\24\1\54\1\55\1\56"+
    "\1\57\27\30\1\60\2\30\1\61\1\62\2\33\4\0"+
    "\1\6\1\63\2\0\2\2\1\0\2\64\1\0\1\64"+
    "\1\65\1\47\1\50\1\65\1\53\1\24\36\30\1\66"+
    "\3\0\1\67\1\0\1\2\2\65\1\24\20\30\1\70"+
    "\3\30\1\71\1\72\4\30\1\73\1\74\1\75\2\30"+
    "\2\0\1\64\1\24\2\30\1\76\1\30\1\77\7\30"+
    "\1\100\1\101\13\30\2\0\1\24\1\30\1\102\4\30"+
    "\1\103\15\30\2\0\1\24\1\104\10\30\1\105\2\30"+
    "\1\106\6\30\2\0\1\24\5\30\1\107\1\110\1\111"+
    "\1\112\1\113\1\30\1\114\1\115\1\116\1\30\2\0"+
    "\1\117\7\30\1\0\4\30\1\120\1\121\1\30\1\0"+
    "\2\30\1\122\1\123\1\0\2\30\1\0\1\30\1\124"+
    "\1\125\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356\0\u0393"+
    "\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\267\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6"+
    "\0\u0b33\0\u0b70\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u01e8\0\u0225\0\u0d95\0\u0dd2\0\u0e0f\0\u02dc"+
    "\0\u0e4c\0\u0e89\0\u0356\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba"+
    "\0\u0ff7\0\u1034\0\u1071\0\u044a\0\u0487\0\u10ae\0\u10eb\0\u10eb"+
    "\0\u1128\0\u1165\0\u053e\0\u11a2\0\u05f5\0\u0632\0\u066f\0\u06ac"+
    "\0\u11df\0\u121c\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a"+
    "\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572"+
    "\0\u15af\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a"+
    "\0\u1797\0\u17d4\0\u0ab9\0\u0b33\0\75\0\u1811\0\u184e\0\u188b"+
    "\0\u18c8\0\u1905\0\u0d58\0\u0e0f\0\u1942\0\u197f\0\75\0\u19bc"+
    "\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1071\0\u1aed\0\u1b2a\0\u1b67"+
    "\0\u1ba4\0\u0b70\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12"+
    "\0\u1d4f\0\u1d8c\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa"+
    "\0\u1f37\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2"+
    "\0\u211f\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca"+
    "\0\u2307\0\u1811\0\u2344\0\u2381\0\u23be\0\u0d1b\0\u23fb\0\u1942"+
    "\0\u2438\0\u1071\0\u2475\0\u24b2\0\u24ef\0\u252c\0\u2569\0\u25a6"+
    "\0\u25e3\0\u2620\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e"+
    "\0\u27cb\0\u2808\0\u2845\0\u06e9\0\u2882\0\u28bf\0\u28fc\0\u06e9"+
    "\0\u06e9\0\u2939\0\u2976\0\u29b3\0\u29f0\0\u06e9\0\u06e9\0\u06e9"+
    "\0\u2a2d\0\u2a6a\0\u2aa7\0\u2ae4\0\u2438\0\u2b21\0\u2b5e\0\u2b9b"+
    "\0\u06e9\0\u2bd8\0\u06e9\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u06e9\0\u06e9\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77"+
    "\0\u2eb4\0\u2ef1\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f"+
    "\0\u309c\0\u30d9\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247"+
    "\0\u06e9\0\u3284\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2"+
    "\0\u342f\0\u346c\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da"+
    "\0\u3617\0\u06e9\0\u3654\0\u3691\0\u36ce\0\u370b\0\u3748\0\u3785"+
    "\0\u37c2\0\u37ff\0\u06e9\0\u383c\0\u3879\0\u06e9\0\u38b6\0\u38f3"+
    "\0\u3930\0\u396d\0\u39aa\0\u39e7\0\u3a24\0\u3a61\0\u3a9e\0\u3adb"+
    "\0\u3b18\0\u3b55\0\u3b92\0\u3bcf\0\u06e9\0\u06e9\0\u06e9\0\u06e9"+
    "\0\u06e9\0\u3c0c\0\u06e9\0\u06e9\0\u06e9\0\u3c49\0\u3c86\0\u3cc3"+
    "\0\u053e\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7\0\u3df4\0\u3e31\0\u3e6e"+
    "\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f\0\u06e9\0\u06e9\0\u3fdc"+
    "\0\u4019\0\u4056\0\u4093\0\u06e9\0\u06e9\0\u40d0\0\u410d\0\u414a"+
    "\0\u4187\0\u41c4\0\u06e9\0\75\0\u06e9";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\5\30\1\31\1\32\1\30\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\37\1\45"+
    "\1\46\1\37\1\47\1\50\1\51\1\37\1\52\1\53"+
    "\1\54\1\55\1\37\1\56\1\37\1\57\1\60\1\61"+
    "\76\0\2\3\1\0\1\3\117\0\1\62\45\0\6\63"+
    "\1\64\5\63\1\0\3\63\1\65\34\63\1\66\1\63"+
    "\1\67\15\63\14\6\1\0\60\6\10\0\1\70\3\0"+
    "\2\70\1\0\1\70\7\0\1\71\13\0\1\70\42\0"+
    "\1\72\75\0\1\73\75\0\1\74\71\0\1\75\3\0"+
    "\2\75\1\0\1\75\7\0\1\71\13\0\1\75\41\0"+
    "\1\76\3\0\1\76\1\77\1\0\1\76\7\0\1\71"+
    "\13\0\1\76\47\0\1\100\66\0\1\101\3\0\2\101"+
    "\1\0\1\77\3\0\1\102\3\0\1\71\13\0\1\101"+
    "\51\0\1\103\70\0\1\104\4\0\1\105\5\0\1\71"+
    "\63\0\1\106\1\0\1\107\1\0\1\110\1\111\21\0"+
    "\25\112\23\0\1\113\1\0\2\22\21\0\25\112\27\0"+
    "\1\114\75\0\1\115\54\0\1\116\20\0\1\117\1\120"+
    "\67\0\2\121\4\0\5\30\1\122\3\30\3\0\26\30"+
    "\25\0\2\121\4\0\11\30\3\0\26\30\25\0\2\121"+
    "\4\0\10\30\1\123\3\0\26\30\25\0\2\121\4\0"+
    "\11\30\3\0\20\30\1\124\5\30\44\0\1\125\75\0"+
    "\1\126\42\0\1\127\3\0\2\127\1\0\1\127\23\0"+
    "\1\127\31\0\14\130\1\0\60\130\7\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\26\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\16\37\1\132\7\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\133"+
    "\11\37\1\134\2\37\1\135\7\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\5\37\1\136\20\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\13\37\1\137"+
    "\1\37\1\140\3\37\1\141\4\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\1\37\1\142\24\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\143"+
    "\24\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\15\37\1\144\10\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\5\37\1\145\10\37\1\146\7\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\5\37\1\147"+
    "\3\37\1\150\14\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\23\37\1\151\2\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\1\37\1\152\16\37\1\153"+
    "\2\37\1\154\2\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\1\37\1\155\3\37\1\156\20\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\5\37\1\157"+
    "\3\37\1\160\14\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\1\37\1\161\24\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\5\37\1\162\20\37\75\0"+
    "\1\163\75\0\1\72\75\0\1\164\5\0\1\116\20\0"+
    "\1\117\1\116\45\0\6\63\1\165\74\63\1\166\74\63"+
    "\1\165\11\63\1\167\62\63\1\165\51\63\1\170\22\63"+
    "\1\165\42\63\1\171\23\63\10\0\1\70\3\0\2\70"+
    "\1\0\1\70\23\0\1\70\41\0\1\172\3\0\2\172"+
    "\1\0\1\172\1\0\1\172\64\0\1\173\61\0\1\173"+
    "\11\0\1\75\3\0\2\75\1\0\1\75\23\0\1\75"+
    "\41\0\1\76\3\0\1\76\2\0\1\76\23\0\1\76"+
    "\46\0\1\174\1\0\1\174\65\0\1\101\3\0\2\101"+
    "\25\0\1\101\53\0\2\102\21\0\25\112\3\0\14\175"+
    "\1\176\60\175\2\105\1\177\1\105\1\200\70\105\17\0"+
    "\1\201\2\0\1\202\1\203\70\0\1\201\1\204\1\0"+
    "\1\205\1\206\67\0\1\106\1\0\1\204\1\0\1\110"+
    "\1\207\21\0\25\112\26\0\1\111\21\0\25\112\25\0"+
    "\2\210\4\0\11\112\3\0\26\112\25\0\1\113\1\211"+
    "\100\0\1\212\52\0\1\116\20\0\2\117\67\0\2\121"+
    "\4\0\11\30\56\0\2\121\4\0\3\30\1\123\5\30"+
    "\3\0\26\30\25\0\2\121\4\0\11\30\3\0\11\30"+
    "\1\213\14\30\12\0\1\130\12\0\2\131\21\0\25\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\13\37"+
    "\1\214\12\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\4\37\1\215\21\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\1\37\1\216\24\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\15\37\1\217\3\37"+
    "\1\220\4\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\21\37\1\221\2\37\1\222\1\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\11\37\1\223\14\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\22\37"+
    "\1\224\3\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\3\37\1\225\16\37\1\226\3\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\13\37\1\227\12\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\3\37"+
    "\1\230\22\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\3\37\1\231\15\37\1\232\4\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\5\37\1\233\20\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\7\37"+
    "\1\234\16\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\22\37\1\235\3\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\5\37\1\236\20\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\13\37\1\237\12\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\20\37"+
    "\1\240\5\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\11\37\1\241\4\37\1\242\7\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\2\37\1\243\23\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\11\37"+
    "\1\244\14\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\1\37\1\245\24\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\15\37\1\246\10\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\15\37\1\247\10\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\15\37"+
    "\1\250\10\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\20\37\1\251\5\37\11\0\1\252\66\0\6\63"+
    "\1\165\12\63\1\253\61\63\1\165\54\63\1\254\17\63"+
    "\1\165\40\63\1\255\25\63\27\0\1\256\45\0\14\175"+
    "\1\257\74\175\1\257\4\175\1\260\53\175\2\0\1\177"+
    "\115\0\1\203\74\0\1\202\73\0\2\203\70\0\1\201"+
    "\1\204\1\0\1\202\1\203\73\0\1\261\1\206\67\0"+
    "\1\106\1\0\1\204\2\0\1\207\21\0\25\112\25\0"+
    "\2\210\21\0\25\112\25\0\1\262\1\211\73\0\2\121"+
    "\4\0\11\30\3\0\15\30\1\263\10\30\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\5\37\1\264\20\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\5\37"+
    "\1\265\20\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\21\37\1\266\4\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\21\37\1\267\4\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\5\37\1\157\20\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\4\37"+
    "\1\270\15\37\1\271\3\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\16\37\1\272\7\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\14\37\1\273\11\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\5\37"+
    "\1\274\10\37\1\275\7\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\20\37\1\276\5\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\1\37\1\277\24\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\21\37"+
    "\1\300\4\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\5\37\1\301\20\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\13\37\1\302\12\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\22\37\1\303\3\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\20\37"+
    "\1\304\5\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\1\37\1\305\24\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\16\37\1\306\7\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\15\37\1\307\10\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\16\37"+
    "\1\310\7\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\1\37\1\311\24\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\24\37\1\312\1\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\17\37\1\313\2\37"+
    "\1\314\3\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\13\37\1\315\12\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\25\37\1\316\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\13\37\1\317\12\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\16\37\1\316"+
    "\7\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\16\37\1\320\7\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\7\37\1\321\16\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\4\37\1\322\21\37\3\0"+
    "\6\63\1\165\11\63\1\65\34\63\1\66\1\63\1\67"+
    "\23\63\1\165\55\63\1\323\16\63\1\165\57\63\1\324"+
    "\6\63\14\175\1\257\4\175\1\177\53\175\22\0\1\325"+
    "\1\206\73\0\2\121\4\0\11\30\3\0\3\30\1\326"+
    "\22\30\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\1\37\1\327\24\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\15\37\1\330\10\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\5\37\1\331\20\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\22\37\1\332"+
    "\3\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\5\37\1\333\20\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\20\37\1\334\5\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\13\37\1\335\12\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\11\37\1\336"+
    "\14\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\337\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\15\37\1\340\10\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\11\37\1\341\14\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\22\37\1\342"+
    "\3\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\16\37\1\343\7\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\20\37\1\344\5\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\23\37\1\345\2\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\346"+
    "\24\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\347\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\4\37\1\350\21\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\22\37\1\351\3\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\352"+
    "\24\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\11\37\1\353\14\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\5\37\1\354\20\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\11\37\1\355\14\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\5\37\1\356"+
    "\20\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\1\37\1\357\24\37\3\0\6\63\1\165\42\63\1\360"+
    "\31\63\1\165\60\63\1\361\5\63\22\0\2\121\4\0"+
    "\11\30\3\0\11\30\1\362\14\30\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\15\37\1\363\10\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\364"+
    "\24\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\365\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\23\37\1\366\2\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\24\37\1\367\1\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\15\37\1\370"+
    "\10\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\16\37\1\371\7\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\3\37\1\372\22\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\2\37\1\373\23\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\11\37\1\374"+
    "\14\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\11\37\1\375\14\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\15\37\1\376\10\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\11\37\1\377\14\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\16\37\1\u0100"+
    "\7\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\u0101\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\4\37\1\u0102\21\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\5\37\1\u0103\20\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\7\37\1\u0104"+
    "\16\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\3\37\1\u0102\22\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\15\37\1\u0105\10\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\4\37\1\u0106\21\37\3\0"+
    "\6\63\1\165\56\63\1\u0107\15\63\1\165\55\63\1\u0108"+
    "\10\63\22\0\2\121\4\0\11\30\3\0\17\30\1\u0109"+
    "\6\30\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\16\37\1\u010a\7\37\12\0\1\130\12\0\2\131\4\0"+
    "\1\u010b\10\37\3\0\26\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\23\37\1\u010c\2\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\3\37\1\u010d\22\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\5\37"+
    "\1\u010e\20\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\1\37\1\u010f\24\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\5\37\1\u0110\20\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\11\37\1\u0111\14\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\3\37"+
    "\1\u0112\22\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\20\37\1\u0113\5\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\3\37\1\u0114\22\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\22\37\1\u0115\3\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\21\37"+
    "\1\u0116\4\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\1\37\1\u0117\24\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\1\37\1\u0118\14\37\1\u0119\7\37"+
    "\12\0\1\130\12\0\2\131\4\0\11\37\3\0\4\37"+
    "\1\u011a\21\37\12\0\1\130\12\0\2\131\4\0\11\37"+
    "\3\0\11\37\1\352\14\37\12\0\1\130\12\0\2\131"+
    "\4\0\11\37\3\0\22\37\1\u011b\3\37\12\0\1\130"+
    "\12\0\2\131\4\0\11\37\3\0\5\37\1\u011c\20\37"+
    "\3\0\6\63\1\165\46\63\1\u011d\25\63\1\165\36\63"+
    "\1\u011e\27\63\22\0\2\121\4\0\11\30\3\0\1\30"+
    "\1\u011f\24\30\12\0\1\130\12\0\2\131\4\0\1\37"+
    "\1\u0120\2\37\1\u0121\3\37\1\u0122\3\0\26\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\3\37\1\u0123"+
    "\22\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\22\37\1\u0124\3\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\20\37\1\u0125\5\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\20\37\1\u0126\5\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\21\37\1\u0127"+
    "\4\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\u0128\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\16\37\1\u0129\7\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\11\37\1\u012a\14\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\14\37\1\246"+
    "\11\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\21\37\1\u012b\4\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\21\37\1\u012c\4\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\21\37\1\u012d\4\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\1\37\1\u012e"+
    "\24\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\5\37\1\316\20\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\20\37\1\300\5\37\3\0\6\63\1\165"+
    "\53\63\1\u012f\20\63\1\165\11\63\1\u0130\54\63\22\0"+
    "\2\121\4\0\11\30\3\0\13\30\1\u0131\12\30\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\16\37\1\u0132"+
    "\7\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\15\37\1\u0133\10\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\5\37\1\u0134\20\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\22\37\1\u0135\3\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\16\37\1\u0136"+
    "\7\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\1\37\1\u0137\24\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\4\37\1\u0138\21\37\3\0\6\63\1\165"+
    "\52\63\1\u011e\21\63\1\165\50\63\1\u0139\15\63\7\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\13\37\1\u013a"+
    "\12\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\22\37\1\u013b\3\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\1\37\1\u013c\24\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\16\37\1\u013d\7\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\20\37\1\u013e"+
    "\5\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\u013f\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\5\37\1\u0140\20\37\3\0\6\63\1\165"+
    "\53\63\1\u0141\12\63\7\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\5\37\1\u0142\20\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\5\37\1\u0143\20\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\13\37\1\316"+
    "\12\37\12\0\1\130\12\0\2\131\4\0\11\37\3\0"+
    "\20\37\1\u0144\5\37\12\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\21\37\1\u0145\4\37\3\0\6\63\1\165"+
    "\53\63\1\u0146\12\63\7\0\1\130\12\0\2\131\4\0"+
    "\11\37\3\0\1\37\1\u0147\24\37\12\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\20\37\1\u0148\5\37\3\0"+
    "\6\63\1\165\54\63\1\u0149\11\63\7\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\15\37\1\u014a\10\37\12\0"+
    "\1\130\12\0\2\131\4\0\11\37\3\0\16\37\1\u014b"+
    "\7\37\3\0\6\63\1\u014c\66\63\7\0\1\130\12\0"+
    "\2\131\4\0\11\37\3\0\16\37\1\u014d\7\37\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16897];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\60\1\1\0\1\1\3\0\14\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\1\0\46\1\1\11"+
    "\1\1\4\0\2\1\2\0\1\11\1\1\1\0\2\1"+
    "\1\0\46\1\3\0\1\1\1\0\43\1\2\0\33\1"+
    "\2\0\25\1\2\0\24\1\2\0\20\1\2\0\10\1"+
    "\1\0\7\1\1\0\4\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[333];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 87: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 88: break;
          case 3:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 89: break;
          case 4:
            { lexeme=yytext(); return ErrorSig;
            }
            // fall through
          case 90: break;
          case 5:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 91: break;
          case 6:
            { lexeme=yytext(); return ErrorOPARBo;
            }
            // fall through
          case 92: break;
          case 7:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 93: break;
          case 8:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 94: break;
          case 9:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 95: break;
          case 10:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 96: break;
          case 11:
            { lexeme=yytext(); return Coma;
            }
            // fall through
          case 97: break;
          case 12:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 98: break;
          case 13:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 99: break;
          case 14:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 100: break;
          case 15:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 101: break;
          case 16:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 102: break;
          case 17:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 103: break;
          case 18:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 104: break;
          case 19:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 105: break;
          case 20:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 106: break;
          case 21:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 107: break;
          case 22:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 108: break;
          case 23:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 109: break;
          case 24:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 110: break;
          case 25:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 111: break;
          case 26:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 112: break;
          case 27:
            { lexeme=yytext(); return Texto;
            }
            // fall through
          case 113: break;
          case 28:
            { lexeme=yytext(); return ErrorMod;
            }
            // fall through
          case 114: break;
          case 29:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 115: break;
          case 30:
            { lexeme=yytext(); return OPARBool;
            }
            // fall through
          case 116: break;
          case 31:
            { lexeme=yytext(); return ErrorPar_a;
            }
            // fall through
          case 117: break;
          case 32:
            { lexeme=yytext(); return ErrorPar_c;
            }
            // fall through
          case 118: break;
          case 33:
            { lexeme=yytext(); return ErrorMul;
            }
            // fall through
          case 119: break;
          case 34:
            { lexeme=yytext(); return ErrorSum;
            }
            // fall through
          case 120: break;
          case 35:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 121: break;
          case 36:
            { lexeme=yytext(); return ErrorComa;
            }
            // fall through
          case 122: break;
          case 37:
            { lexeme=yytext(); return ErrorRes;
            }
            // fall through
          case 123: break;
          case 38:
            { lexeme=yytext(); return ErrorPun;
            }
            // fall through
          case 124: break;
          case 39:
            { lexeme=yytext(); return ErrorCer;
            }
            // fall through
          case 125: break;
          case 40:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 126: break;
          case 41:
            { lexeme=yytext(); return ErrorD_pu;
            }
            // fall through
          case 127: break;
          case 42:
            { lexeme=yytext(); return ErrorP_C;
            }
            // fall through
          case 128: break;
          case 43:
            { lexeme=yytext(); return ErrorOp_Rel;
            }
            // fall through
          case 129: break;
          case 44:
            { lexeme=yytext(); return ErrorCo_a;
            }
            // fall through
          case 130: break;
          case 45:
            { lexeme=yytext(); return ErrorCo_c;
            }
            // fall through
          case 131: break;
          case 46:
            { lexeme=yytext(); return ErrorExp;
            }
            // fall through
          case 132: break;
          case 47:
            { lexeme=yytext(); return ErrorID;
            }
            // fall through
          case 133: break;
          case 48:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 134: break;
          case 49:
            { lexeme=yytext(); return ErrorLL_a;
            }
            // fall through
          case 135: break;
          case 50:
            { lexeme=yytext(); return ErrorLL_c;
            }
            // fall through
          case 136: break;
          case 51:
            { lexeme=yytext(); return ErrorOp_IN;
            }
            // fall through
          case 137: break;
          case 52:
            { lexeme=yytext(); return ErrorDec;
            }
            // fall through
          case 138: break;
          case 53:
            { lexeme=yytext(); return Decimal;
            }
            // fall through
          case 139: break;
          case 54:
            { lexeme=yytext(); return ErrorCom;
            }
            // fall through
          case 140: break;
          case 55:
            { lexeme=yytext(); return ErrorOp_Atr;
            }
            // fall through
          case 141: break;
          case 56:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 142: break;
          case 57:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 143: break;
          case 58:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 144: break;
          case 59:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 145: break;
          case 60:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 146: break;
          case 61:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 147: break;
          case 62:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 148: break;
          case 63:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 149: break;
          case 64:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 150: break;
          case 65:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 151: break;
          case 66:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 152: break;
          case 67:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 153: break;
          case 68:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 154: break;
          case 69:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 155: break;
          case 70:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 156: break;
          case 71:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 157: break;
          case 72:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 158: break;
          case 73:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 159: break;
          case 74:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 160: break;
          case 75:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 161: break;
          case 76:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 162: break;
          case 77:
            { lexeme=yytext(); return T_DisponibleP;
            }
            // fall through
          case 163: break;
          case 78:
            { lexeme=yytext(); return T_DisponibleM;
            }
            // fall through
          case 164: break;
          case 79:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 165: break;
          case 80:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 166: break;
          case 81:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 167: break;
          case 82:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 168: break;
          case 83:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 169: break;
          case 84:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 170: break;
          case 85:
            { lexeme=yytext(); return BiExt;
            }
            // fall through
          case 171: break;
          case 86:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
