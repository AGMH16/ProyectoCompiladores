// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexico.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\11\22\1\23"+
    "\1\24\1\25\1\26\1\25\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\10\31\1\34\1\35\1\36\1\31\1\37"+
    "\10\31\1\40\1\0\1\41\1\42\1\43\1\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\2\55\1\56\1\57\1\60\1\61\1\62\1\55\1\63"+
    "\1\64\1\65\1\66\1\67\3\55\1\70\1\71\1\72"+
    "\1\73\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\17\1\20\1\21\1\22\4\23\1\24\1\25\1\26"+
    "\20\27\1\30\1\5\1\31\1\21\1\0\1\32\3\0"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\16\1\43\1\0\1\2\2\0\1\44\1\16\1\45"+
    "\1\0\1\46\1\47\1\0\1\50\1\21\2\23\1\35"+
    "\1\23\1\51\1\52\1\53\27\27\1\54\2\27\1\55"+
    "\1\56\2\32\4\0\1\5\1\57\2\0\2\2\1\0"+
    "\2\60\1\0\1\60\1\61\1\44\1\45\1\61\1\50"+
    "\1\23\36\27\1\62\3\0\1\63\1\0\1\2\2\61"+
    "\1\23\20\27\1\64\3\27\1\65\1\66\4\27\1\67"+
    "\1\70\1\71\2\27\2\0\1\60\1\23\2\27\1\72"+
    "\1\27\1\73\7\27\1\74\1\75\13\27\2\0\1\23"+
    "\1\27\1\76\4\27\1\77\15\27\2\0\1\23\1\100"+
    "\10\27\1\101\2\27\1\102\6\27\2\0\1\23\5\27"+
    "\1\103\1\104\1\105\1\106\1\107\1\27\1\110\1\111"+
    "\1\112\1\27\2\0\1\113\7\27\1\0\4\27\1\114"+
    "\1\115\1\27\1\0\2\27\1\116\1\117\1\0\2\27"+
    "\1\0\1\27\1\120\1\121\1\122";

  private static int [] zzUnpackAction() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\264\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50\0\u0a8c\0\u0ac8"+
    "\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8"+
    "\0\u01a4\0\u01e0\0\u0ce4\0\u0d20\0\u0294\0\u0d5c\0\u030c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u03fc"+
    "\0\u0438\0\u0f78\0\u0fb4\0\u0fb4\0\u0ff0\0\u102c\0\u04ec\0\u1068"+
    "\0\u05a0\0\u05dc\0\u0618\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374"+
    "\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554"+
    "\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680\0\u0a14\0\u0a8c\0\74"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u0ca8\0\u0d20\0\u17e8"+
    "\0\u1824\0\74\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u0f3c"+
    "\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u0ac8\0\u1a7c\0\u1ab8\0\u1af4"+
    "\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4"+
    "\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094"+
    "\0\u20d0\0\u210c\0\u2148\0\u2184\0\u16bc\0\u21c0\0\u21fc\0\u2238"+
    "\0\u0c6c\0\u2274\0\u17e8\0\u22b0\0\u0f3c\0\u22ec\0\u2328\0\u2364"+
    "\0\u23a0\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544"+
    "\0\u2580\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u0654\0\u26e8"+
    "\0\u2724\0\u2760\0\u0654\0\u0654\0\u279c\0\u27d8\0\u2814\0\u2850"+
    "\0\u0654\0\u0654\0\u0654\0\u288c\0\u28c8\0\u2904\0\u2940\0\u22b0"+
    "\0\u297c\0\u29b8\0\u29f4\0\u0654\0\u2a30\0\u0654\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u0654\0\u0654\0\u2c10"+
    "\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0"+
    "\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0"+
    "\0\u300c\0\u3048\0\u3084\0\u0654\0\u30c0\0\u30fc\0\u3138\0\u3174"+
    "\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354"+
    "\0\u3390\0\u33cc\0\u3408\0\u3444\0\u0654\0\u3480\0\u34bc\0\u34f8"+
    "\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u0654\0\u3660\0\u369c"+
    "\0\u0654\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u0654"+
    "\0\u0654\0\u0654\0\u0654\0\u0654\0\u3a20\0\u0654\0\u0654\0\u0654"+
    "\0\u3a5c\0\u3a98\0\u3ad4\0\u04ec\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4"+
    "\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4"+
    "\0\u0654\0\u0654\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u0654\0\u0654"+
    "\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u0654\0\74\0\u0654";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\5\27"+
    "\1\30\1\31\1\27\1\32\1\33\1\34\1\2\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\35\1\43\1\44"+
    "\1\35\1\45\1\46\1\47\1\35\1\50\1\51\1\52"+
    "\1\53\1\35\1\54\1\35\1\55\1\56\1\57\75\0"+
    "\2\3\1\0\1\3\115\0\1\60\45\0\6\61\1\62"+
    "\4\61\1\0\3\61\1\63\34\61\1\64\1\61\1\65"+
    "\15\61\7\0\1\66\16\0\1\67\55\0\1\70\74\0"+
    "\1\71\74\0\1\72\74\0\1\73\12\0\1\67\61\0"+
    "\1\74\11\0\1\67\62\0\1\75\74\0\1\74\3\0"+
    "\1\76\3\0\1\67\64\0\1\77\67\0\1\100\4\0"+
    "\1\101\5\0\1\67\62\0\1\102\1\0\1\103\1\0"+
    "\1\104\1\105\21\0\25\106\22\0\1\107\1\0\2\21"+
    "\21\0\25\106\26\0\1\110\74\0\1\111\54\0\1\112"+
    "\17\0\1\113\1\114\66\0\2\115\4\0\5\27\1\116"+
    "\3\27\3\0\26\27\24\0\2\115\4\0\11\27\3\0"+
    "\26\27\24\0\2\115\4\0\10\27\1\117\3\0\26\27"+
    "\24\0\2\115\4\0\11\27\3\0\20\27\1\120\5\27"+
    "\43\0\1\121\74\0\1\122\74\0\1\123\52\0\2\124"+
    "\4\0\11\35\3\0\26\35\24\0\2\124\4\0\11\35"+
    "\3\0\16\35\1\125\7\35\24\0\2\124\4\0\11\35"+
    "\3\0\1\35\1\126\11\35\1\127\2\35\1\130\7\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\131\20\35"+
    "\24\0\2\124\4\0\11\35\3\0\13\35\1\132\1\35"+
    "\1\133\3\35\1\134\4\35\24\0\2\124\4\0\11\35"+
    "\3\0\1\35\1\135\24\35\24\0\2\124\4\0\11\35"+
    "\3\0\1\35\1\136\24\35\24\0\2\124\4\0\11\35"+
    "\3\0\15\35\1\137\10\35\24\0\2\124\4\0\11\35"+
    "\3\0\5\35\1\140\10\35\1\141\7\35\24\0\2\124"+
    "\4\0\11\35\3\0\5\35\1\142\3\35\1\143\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\23\35\1\144\2\35"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\145\16\35"+
    "\1\146\2\35\1\147\2\35\24\0\2\124\4\0\11\35"+
    "\3\0\1\35\1\150\3\35\1\151\20\35\24\0\2\124"+
    "\4\0\11\35\3\0\5\35\1\152\3\35\1\153\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\154\24\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\155\20\35"+
    "\74\0\1\156\74\0\1\70\74\0\1\157\5\0\1\112"+
    "\17\0\1\113\1\112\45\0\6\61\1\160\73\61\1\161"+
    "\73\61\1\160\10\61\1\162\62\61\1\160\50\61\1\163"+
    "\22\61\1\160\41\61\1\164\23\61\7\0\1\66\73\0"+
    "\1\165\3\0\2\165\1\0\1\165\1\0\1\165\63\0"+
    "\1\166\61\0\1\166\14\0\1\73\74\0\1\167\1\0"+
    "\1\167\76\0\2\76\21\0\25\106\3\0\13\170\1\171"+
    "\60\170\2\101\1\172\1\101\1\173\67\101\16\0\1\174"+
    "\2\0\1\175\1\176\67\0\1\174\1\177\1\0\1\200"+
    "\1\201\66\0\1\102\1\0\1\177\1\0\1\104\1\202"+
    "\21\0\25\106\25\0\1\105\21\0\25\106\24\0\2\203"+
    "\4\0\11\106\3\0\26\106\24\0\1\107\1\204\77\0"+
    "\1\205\52\0\1\112\17\0\2\113\66\0\2\115\4\0"+
    "\11\27\55\0\2\115\4\0\3\27\1\117\5\27\3\0"+
    "\26\27\24\0\2\115\4\0\11\27\3\0\11\27\1\206"+
    "\14\27\24\0\2\124\21\0\25\35\24\0\2\124\4\0"+
    "\11\35\3\0\13\35\1\207\12\35\24\0\2\124\4\0"+
    "\11\35\3\0\4\35\1\210\21\35\24\0\2\124\4\0"+
    "\11\35\3\0\1\35\1\211\24\35\24\0\2\124\4\0"+
    "\11\35\3\0\15\35\1\212\3\35\1\213\4\35\24\0"+
    "\2\124\4\0\11\35\3\0\21\35\1\214\2\35\1\215"+
    "\1\35\24\0\2\124\4\0\11\35\3\0\11\35\1\216"+
    "\14\35\24\0\2\124\4\0\11\35\3\0\22\35\1\217"+
    "\3\35\24\0\2\124\4\0\11\35\3\0\3\35\1\220"+
    "\16\35\1\221\3\35\24\0\2\124\4\0\11\35\3\0"+
    "\13\35\1\222\12\35\24\0\2\124\4\0\11\35\3\0"+
    "\3\35\1\223\22\35\24\0\2\124\4\0\11\35\3\0"+
    "\3\35\1\224\15\35\1\225\4\35\24\0\2\124\4\0"+
    "\11\35\3\0\5\35\1\226\20\35\24\0\2\124\4\0"+
    "\11\35\3\0\7\35\1\227\16\35\24\0\2\124\4\0"+
    "\11\35\3\0\22\35\1\230\3\35\24\0\2\124\4\0"+
    "\11\35\3\0\5\35\1\231\20\35\24\0\2\124\4\0"+
    "\11\35\3\0\13\35\1\232\12\35\24\0\2\124\4\0"+
    "\11\35\3\0\20\35\1\233\5\35\24\0\2\124\4\0"+
    "\11\35\3\0\11\35\1\234\4\35\1\235\7\35\24\0"+
    "\2\124\4\0\11\35\3\0\2\35\1\236\23\35\24\0"+
    "\2\124\4\0\11\35\3\0\11\35\1\237\14\35\24\0"+
    "\2\124\4\0\11\35\3\0\1\35\1\240\24\35\24\0"+
    "\2\124\4\0\11\35\3\0\15\35\1\241\10\35\24\0"+
    "\2\124\4\0\11\35\3\0\15\35\1\242\10\35\24\0"+
    "\2\124\4\0\11\35\3\0\15\35\1\243\10\35\24\0"+
    "\2\124\4\0\11\35\3\0\20\35\1\244\5\35\11\0"+
    "\1\245\65\0\6\61\1\160\11\61\1\246\61\61\1\160"+
    "\53\61\1\247\17\61\1\160\37\61\1\250\25\61\26\0"+
    "\1\251\45\0\13\170\1\252\73\170\1\252\4\170\1\253"+
    "\53\170\2\0\1\172\113\0\1\176\73\0\1\175\72\0"+
    "\2\176\67\0\1\174\1\177\1\0\1\175\1\176\72\0"+
    "\1\254\1\201\66\0\1\102\1\0\1\177\2\0\1\202"+
    "\21\0\25\106\24\0\2\203\21\0\25\106\24\0\1\255"+
    "\1\204\72\0\2\115\4\0\11\27\3\0\15\27\1\256"+
    "\10\27\24\0\2\124\4\0\11\35\3\0\5\35\1\257"+
    "\20\35\24\0\2\124\4\0\11\35\3\0\5\35\1\260"+
    "\20\35\24\0\2\124\4\0\11\35\3\0\21\35\1\261"+
    "\4\35\24\0\2\124\4\0\11\35\3\0\21\35\1\262"+
    "\4\35\24\0\2\124\4\0\11\35\3\0\5\35\1\152"+
    "\20\35\24\0\2\124\4\0\11\35\3\0\4\35\1\263"+
    "\15\35\1\264\3\35\24\0\2\124\4\0\11\35\3\0"+
    "\16\35\1\265\7\35\24\0\2\124\4\0\11\35\3\0"+
    "\14\35\1\266\11\35\24\0\2\124\4\0\11\35\3\0"+
    "\5\35\1\267\10\35\1\270\7\35\24\0\2\124\4\0"+
    "\11\35\3\0\20\35\1\271\5\35\24\0\2\124\4\0"+
    "\11\35\3\0\1\35\1\272\24\35\24\0\2\124\4\0"+
    "\11\35\3\0\21\35\1\273\4\35\24\0\2\124\4\0"+
    "\11\35\3\0\5\35\1\274\20\35\24\0\2\124\4\0"+
    "\11\35\3\0\13\35\1\275\12\35\24\0\2\124\4\0"+
    "\11\35\3\0\22\35\1\276\3\35\24\0\2\124\4\0"+
    "\11\35\3\0\20\35\1\277\5\35\24\0\2\124\4\0"+
    "\11\35\3\0\1\35\1\300\24\35\24\0\2\124\4\0"+
    "\11\35\3\0\16\35\1\301\7\35\24\0\2\124\4\0"+
    "\11\35\3\0\15\35\1\302\10\35\24\0\2\124\4\0"+
    "\11\35\3\0\16\35\1\303\7\35\24\0\2\124\4\0"+
    "\11\35\3\0\1\35\1\304\24\35\24\0\2\124\4\0"+
    "\11\35\3\0\24\35\1\305\1\35\24\0\2\124\4\0"+
    "\11\35\3\0\17\35\1\306\2\35\1\307\3\35\24\0"+
    "\2\124\4\0\11\35\3\0\13\35\1\310\12\35\24\0"+
    "\2\124\4\0\11\35\3\0\25\35\1\311\24\0\2\124"+
    "\4\0\11\35\3\0\13\35\1\312\12\35\24\0\2\124"+
    "\4\0\11\35\3\0\16\35\1\311\7\35\24\0\2\124"+
    "\4\0\11\35\3\0\16\35\1\313\7\35\24\0\2\124"+
    "\4\0\11\35\3\0\7\35\1\314\16\35\24\0\2\124"+
    "\4\0\11\35\3\0\4\35\1\315\21\35\3\0\6\61"+
    "\1\160\10\61\1\63\34\61\1\64\1\61\1\65\23\61"+
    "\1\160\54\61\1\316\16\61\1\160\56\61\1\317\6\61"+
    "\13\170\1\252\4\170\1\172\53\170\21\0\1\320\1\201"+
    "\72\0\2\115\4\0\11\27\3\0\3\27\1\321\22\27"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\322\24\35"+
    "\24\0\2\124\4\0\11\35\3\0\15\35\1\323\10\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\324\20\35"+
    "\24\0\2\124\4\0\11\35\3\0\22\35\1\325\3\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\326\20\35"+
    "\24\0\2\124\4\0\11\35\3\0\20\35\1\327\5\35"+
    "\24\0\2\124\4\0\11\35\3\0\13\35\1\330\12\35"+
    "\24\0\2\124\4\0\11\35\3\0\11\35\1\331\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\20\35\1\332\5\35"+
    "\24\0\2\124\4\0\11\35\3\0\15\35\1\333\10\35"+
    "\24\0\2\124\4\0\11\35\3\0\11\35\1\334\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\22\35\1\335\3\35"+
    "\24\0\2\124\4\0\11\35\3\0\16\35\1\336\7\35"+
    "\24\0\2\124\4\0\11\35\3\0\20\35\1\337\5\35"+
    "\24\0\2\124\4\0\11\35\3\0\23\35\1\340\2\35"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\341\24\35"+
    "\24\0\2\124\4\0\11\35\3\0\20\35\1\342\5\35"+
    "\24\0\2\124\4\0\11\35\3\0\4\35\1\343\21\35"+
    "\24\0\2\124\4\0\11\35\3\0\22\35\1\344\3\35"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\345\24\35"+
    "\24\0\2\124\4\0\11\35\3\0\11\35\1\346\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\347\20\35"+
    "\24\0\2\124\4\0\11\35\3\0\11\35\1\350\14\35"+
    "\24\0\2\124\4\0\11\35\3\0\5\35\1\351\20\35"+
    "\24\0\2\124\4\0\11\35\3\0\1\35\1\352\24\35"+
    "\3\0\6\61\1\160\41\61\1\353\31\61\1\160\57\61"+
    "\1\354\5\61\21\0\2\115\4\0\11\27\3\0\11\27"+
    "\1\355\14\27\24\0\2\124\4\0\11\35\3\0\15\35"+
    "\1\356\10\35\24\0\2\124\4\0\11\35\3\0\1\35"+
    "\1\357\24\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\360\5\35\24\0\2\124\4\0\11\35\3\0\23\35"+
    "\1\361\2\35\24\0\2\124\4\0\11\35\3\0\24\35"+
    "\1\362\1\35\24\0\2\124\4\0\11\35\3\0\15\35"+
    "\1\363\10\35\24\0\2\124\4\0\11\35\3\0\16\35"+
    "\1\364\7\35\24\0\2\124\4\0\11\35\3\0\3\35"+
    "\1\365\22\35\24\0\2\124\4\0\11\35\3\0\2\35"+
    "\1\366\23\35\24\0\2\124\4\0\11\35\3\0\11\35"+
    "\1\367\14\35\24\0\2\124\4\0\11\35\3\0\11\35"+
    "\1\370\14\35\24\0\2\124\4\0\11\35\3\0\15\35"+
    "\1\371\10\35\24\0\2\124\4\0\11\35\3\0\11\35"+
    "\1\372\14\35\24\0\2\124\4\0\11\35\3\0\16\35"+
    "\1\373\7\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\374\5\35\24\0\2\124\4\0\11\35\3\0\4\35"+
    "\1\375\21\35\24\0\2\124\4\0\11\35\3\0\5\35"+
    "\1\376\20\35\24\0\2\124\4\0\11\35\3\0\7\35"+
    "\1\377\16\35\24\0\2\124\4\0\11\35\3\0\3\35"+
    "\1\375\22\35\24\0\2\124\4\0\11\35\3\0\15\35"+
    "\1\u0100\10\35\24\0\2\124\4\0\11\35\3\0\4\35"+
    "\1\u0101\21\35\3\0\6\61\1\160\55\61\1\u0102\15\61"+
    "\1\160\54\61\1\u0103\10\61\21\0\2\115\4\0\11\27"+
    "\3\0\17\27\1\u0104\6\27\24\0\2\124\4\0\11\35"+
    "\3\0\16\35\1\u0105\7\35\24\0\2\124\4\0\1\u0106"+
    "\10\35\3\0\26\35\24\0\2\124\4\0\11\35\3\0"+
    "\23\35\1\u0107\2\35\24\0\2\124\4\0\11\35\3\0"+
    "\3\35\1\u0108\22\35\24\0\2\124\4\0\11\35\3\0"+
    "\5\35\1\u0109\20\35\24\0\2\124\4\0\11\35\3\0"+
    "\1\35\1\u010a\24\35\24\0\2\124\4\0\11\35\3\0"+
    "\5\35\1\u010b\20\35\24\0\2\124\4\0\11\35\3\0"+
    "\11\35\1\u010c\14\35\24\0\2\124\4\0\11\35\3\0"+
    "\3\35\1\u010d\22\35\24\0\2\124\4\0\11\35\3\0"+
    "\20\35\1\u010e\5\35\24\0\2\124\4\0\11\35\3\0"+
    "\3\35\1\u010f\22\35\24\0\2\124\4\0\11\35\3\0"+
    "\22\35\1\u0110\3\35\24\0\2\124\4\0\11\35\3\0"+
    "\21\35\1\u0111\4\35\24\0\2\124\4\0\11\35\3\0"+
    "\1\35\1\u0112\24\35\24\0\2\124\4\0\11\35\3\0"+
    "\1\35\1\u0113\14\35\1\u0114\7\35\24\0\2\124\4\0"+
    "\11\35\3\0\4\35\1\u0115\21\35\24\0\2\124\4\0"+
    "\11\35\3\0\11\35\1\345\14\35\24\0\2\124\4\0"+
    "\11\35\3\0\22\35\1\u0116\3\35\24\0\2\124\4\0"+
    "\11\35\3\0\5\35\1\u0117\20\35\3\0\6\61\1\160"+
    "\45\61\1\u0118\25\61\1\160\35\61\1\u0119\27\61\21\0"+
    "\2\115\4\0\11\27\3\0\1\27\1\u011a\24\27\24\0"+
    "\2\124\4\0\1\35\1\u011b\2\35\1\u011c\3\35\1\u011d"+
    "\3\0\26\35\24\0\2\124\4\0\11\35\3\0\3\35"+
    "\1\u011e\22\35\24\0\2\124\4\0\11\35\3\0\22\35"+
    "\1\u011f\3\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\u0120\5\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\u0121\5\35\24\0\2\124\4\0\11\35\3\0\21\35"+
    "\1\u0122\4\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\u0123\5\35\24\0\2\124\4\0\11\35\3\0\16\35"+
    "\1\u0124\7\35\24\0\2\124\4\0\11\35\3\0\11\35"+
    "\1\u0125\14\35\24\0\2\124\4\0\11\35\3\0\14\35"+
    "\1\241\11\35\24\0\2\124\4\0\11\35\3\0\21\35"+
    "\1\u0126\4\35\24\0\2\124\4\0\11\35\3\0\21\35"+
    "\1\u0127\4\35\24\0\2\124\4\0\11\35\3\0\21\35"+
    "\1\u0128\4\35\24\0\2\124\4\0\11\35\3\0\1\35"+
    "\1\u0129\24\35\24\0\2\124\4\0\11\35\3\0\5\35"+
    "\1\311\20\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\273\5\35\3\0\6\61\1\160\52\61\1\u012a\20\61"+
    "\1\160\10\61\1\u012b\54\61\21\0\2\115\4\0\11\27"+
    "\3\0\13\27\1\u012c\12\27\24\0\2\124\4\0\11\35"+
    "\3\0\16\35\1\u012d\7\35\24\0\2\124\4\0\11\35"+
    "\3\0\15\35\1\u012e\10\35\24\0\2\124\4\0\11\35"+
    "\3\0\5\35\1\u012f\20\35\24\0\2\124\4\0\11\35"+
    "\3\0\22\35\1\u0130\3\35\24\0\2\124\4\0\11\35"+
    "\3\0\16\35\1\u0131\7\35\24\0\2\124\4\0\11\35"+
    "\3\0\1\35\1\u0132\24\35\24\0\2\124\4\0\11\35"+
    "\3\0\4\35\1\u0133\21\35\3\0\6\61\1\160\51\61"+
    "\1\u0119\21\61\1\160\47\61\1\u0134\15\61\21\0\2\124"+
    "\4\0\11\35\3\0\13\35\1\u0135\12\35\24\0\2\124"+
    "\4\0\11\35\3\0\22\35\1\u0136\3\35\24\0\2\124"+
    "\4\0\11\35\3\0\1\35\1\u0137\24\35\24\0\2\124"+
    "\4\0\11\35\3\0\16\35\1\u0138\7\35\24\0\2\124"+
    "\4\0\11\35\3\0\20\35\1\u0139\5\35\24\0\2\124"+
    "\4\0\11\35\3\0\20\35\1\u013a\5\35\24\0\2\124"+
    "\4\0\11\35\3\0\5\35\1\u013b\20\35\3\0\6\61"+
    "\1\160\52\61\1\u013c\12\61\21\0\2\124\4\0\11\35"+
    "\3\0\5\35\1\u013d\20\35\24\0\2\124\4\0\11\35"+
    "\3\0\5\35\1\u013e\20\35\24\0\2\124\4\0\11\35"+
    "\3\0\13\35\1\311\12\35\24\0\2\124\4\0\11\35"+
    "\3\0\20\35\1\u013f\5\35\24\0\2\124\4\0\11\35"+
    "\3\0\21\35\1\u0140\4\35\3\0\6\61\1\160\52\61"+
    "\1\u0141\12\61\21\0\2\124\4\0\11\35\3\0\1\35"+
    "\1\u0142\24\35\24\0\2\124\4\0\11\35\3\0\20\35"+
    "\1\u0143\5\35\3\0\6\61\1\160\53\61\1\u0144\11\61"+
    "\21\0\2\124\4\0\11\35\3\0\15\35\1\u0145\10\35"+
    "\24\0\2\124\4\0\11\35\3\0\16\35\1\u0146\7\35"+
    "\3\0\6\61\1\u0147\65\61\21\0\2\124\4\0\11\35"+
    "\3\0\16\35\1\u0148\7\35\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\56\1\1\0\1\1\3\0\12\1\1\0"+
    "\1\1\2\0\3\1\1\0\2\1\1\0\45\1\1\11"+
    "\1\1\4\0\2\1\2\0\1\11\1\1\1\0\2\1"+
    "\1\0\46\1\3\0\1\1\1\0\43\1\2\0\33\1"+
    "\2\0\25\1\2\0\24\1\2\0\20\1\2\0\10\1"+
    "\1\0\7\1\1\0\4\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[328];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 83: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 84: break;
          case 3:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 85: break;
          case 4:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 86: break;
          case 5:
            { lexeme=yytext(); return ErrorOPARBo;
            }
            // fall through
          case 87: break;
          case 6:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 88: break;
          case 7:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 89: break;
          case 8:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 90: break;
          case 9:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 91: break;
          case 10:
            { lexeme=yytext(); return Coma;
            }
            // fall through
          case 92: break;
          case 11:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 93: break;
          case 12:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 94: break;
          case 13:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 95: break;
          case 14:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 96: break;
          case 15:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 97: break;
          case 16:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 98: break;
          case 17:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 99: break;
          case 18:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 100: break;
          case 19:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 101: break;
          case 20:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 102: break;
          case 21:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 103: break;
          case 22:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 104: break;
          case 23:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 105: break;
          case 24:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 106: break;
          case 25:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 107: break;
          case 26:
            { lexeme=yytext(); return Texto;
            }
            // fall through
          case 108: break;
          case 27:
            { lexeme=yytext(); return ErrorMod;
            }
            // fall through
          case 109: break;
          case 28:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 110: break;
          case 29:
            { lexeme=yytext(); return OPARBool;
            }
            // fall through
          case 111: break;
          case 30:
            { lexeme=yytext(); return ErrorPar_a;
            }
            // fall through
          case 112: break;
          case 31:
            { lexeme=yytext(); return ErrorPar_c;
            }
            // fall through
          case 113: break;
          case 32:
            { lexeme=yytext(); return ErrorMul;
            }
            // fall through
          case 114: break;
          case 33:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 115: break;
          case 34:
            { lexeme=yytext(); return ErrorComa;
            }
            // fall through
          case 116: break;
          case 35:
            { lexeme=yytext(); return ErrorPun;
            }
            // fall through
          case 117: break;
          case 36:
            { lexeme=yytext(); return ErrorCer;
            }
            // fall through
          case 118: break;
          case 37:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 119: break;
          case 38:
            { lexeme=yytext(); return ErrorD_pu;
            }
            // fall through
          case 120: break;
          case 39:
            { lexeme=yytext(); return ErrorP_C;
            }
            // fall through
          case 121: break;
          case 40:
            { lexeme=yytext(); return ErrorOp_Rel;
            }
            // fall through
          case 122: break;
          case 41:
            { lexeme=yytext(); return ErrorCo_a;
            }
            // fall through
          case 123: break;
          case 42:
            { lexeme=yytext(); return ErrorCo_c;
            }
            // fall through
          case 124: break;
          case 43:
            { lexeme=yytext(); return ErrorExp;
            }
            // fall through
          case 125: break;
          case 44:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 126: break;
          case 45:
            { lexeme=yytext(); return ErrorLL_a;
            }
            // fall through
          case 127: break;
          case 46:
            { lexeme=yytext(); return ErrorLL_c;
            }
            // fall through
          case 128: break;
          case 47:
            { lexeme=yytext(); return ErrorOp_IN;
            }
            // fall through
          case 129: break;
          case 48:
            { lexeme=yytext(); return ErrorDec;
            }
            // fall through
          case 130: break;
          case 49:
            { lexeme=yytext(); return Decimal;
            }
            // fall through
          case 131: break;
          case 50:
            { lexeme=yytext(); return ErrorCom;
            }
            // fall through
          case 132: break;
          case 51:
            { lexeme=yytext(); return ErrorOp_Atr;
            }
            // fall through
          case 133: break;
          case 52:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 134: break;
          case 53:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 135: break;
          case 54:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 136: break;
          case 55:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 137: break;
          case 56:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 138: break;
          case 57:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 139: break;
          case 58:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 140: break;
          case 59:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 141: break;
          case 60:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 142: break;
          case 61:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 143: break;
          case 62:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 144: break;
          case 63:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 145: break;
          case 64:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 146: break;
          case 65:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 147: break;
          case 66:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 148: break;
          case 67:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 149: break;
          case 68:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 150: break;
          case 69:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 151: break;
          case 70:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 152: break;
          case 71:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 153: break;
          case 72:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 154: break;
          case 73:
            { lexeme=yytext(); return T_DisponibleP;
            }
            // fall through
          case 155: break;
          case 74:
            { lexeme=yytext(); return T_DisponibleM;
            }
            // fall through
          case 156: break;
          case 75:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 157: break;
          case 76:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 158: break;
          case 77:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 159: break;
          case 78:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 160: break;
          case 79:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 161: break;
          case 80:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 162: break;
          case 81:
            { lexeme=yytext(); return BiExt;
            }
            // fall through
          case 163: break;
          case 82:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 164: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
