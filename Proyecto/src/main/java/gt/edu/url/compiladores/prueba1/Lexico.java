// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/lexico.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexico {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\7\1\10\1\11\1\0\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\10\24"+
    "\1\25\1\26\1\27\1\30\1\27\1\0\1\7\1\31"+
    "\1\32\1\33\1\34\1\35\10\33\1\36\1\37\1\40"+
    "\1\33\1\41\10\33\1\42\1\0\1\43\1\44\1\45"+
    "\1\0\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\2\57\1\60\1\61\1\62\1\63\1\64"+
    "\1\57\1\65\1\66\1\67\1\70\1\71\3\57\1\72"+
    "\1\73\1\74\1\75\7\0\1\3\u01a2\0\2\3\326\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\3\17\1\20\1\21\1\22\1\23\4\24\1\25\1\26"+
    "\1\27\1\1\20\30\1\31\1\6\1\32\2\0\1\22"+
    "\1\33\1\0\1\34\3\0\1\4\2\35\1\36\2\6"+
    "\1\37\1\40\1\41\1\42\1\17\2\35\1\2\2\0"+
    "\1\43\1\17\1\44\2\0\1\45\1\22\2\24\1\37"+
    "\1\24\1\46\2\33\27\30\1\47\2\30\2\33\2\34"+
    "\3\0\2\4\1\33\1\4\1\0\1\40\1\50\5\0"+
    "\2\35\1\0\1\33\5\2\1\0\2\51\1\52\1\53"+
    "\1\43\1\44\1\51\1\45\1\24\1\46\36\30\3\33"+
    "\1\54\3\0\1\55\1\33\2\0\1\33\1\35\1\2"+
    "\4\33\6\2\1\0\1\51\3\53\1\24\1\33\20\30"+
    "\1\56\3\30\1\57\1\60\4\30\1\61\1\62\1\63"+
    "\2\30\2\0\2\33\1\2\4\33\10\2\2\51\2\53"+
    "\1\24\2\33\2\30\1\64\1\30\1\65\7\30\1\52"+
    "\1\66\13\30\2\0\1\33\3\2\1\53\1\51\1\24"+
    "\1\30\1\67\4\30\1\70\15\30\3\0\1\24\1\71"+
    "\10\30\1\72\2\30\1\73\6\30\2\0\1\24\5\30"+
    "\1\74\1\75\1\76\1\77\1\100\1\30\1\101\1\102"+
    "\1\103\1\30\2\0\1\104\7\30\1\0\4\30\1\105"+
    "\1\106\1\30\1\0\2\30\1\107\1\110\1\0\2\30"+
    "\1\0\1\30\1\111\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u0174\0\u026c\0\u022e\0\u02aa\0\u022e\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u022e\0\u022e\0\u03e0\0\272\0\u041e"+
    "\0\u045c\0\u049a\0\u04d8\0\u0516\0\u022e\0\u0554\0\u0592\0\u05d0"+
    "\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0"+
    "\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u022e"+
    "\0\u09b0\0\u022e\0\u0592\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0554\0\u0c1c\0\u0c5a\0\u0c98"+
    "\0\u0cd6\0\u0c98\0\u0d14\0\u022e\0\u0d52\0\u0d90\0\u0dce\0\u0e0c"+
    "\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc"+
    "\0\u103a\0\u103a\0\u1078\0\u10b6\0\u045c\0\u10f4\0\u1132\0\u1170"+
    "\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360"+
    "\0\u139e\0\u13dc\0\u141a\0\u1458\0\u1496\0\u14d4\0\u1512\0\u1550"+
    "\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702\0\u1740"+
    "\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\76\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u0d52\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\76\0\u1d8c\0\u1dca\0\u1e08\0\u1e46"+
    "\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1f00\0\u0a2c"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa"+
    "\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a"+
    "\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a"+
    "\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u18b4\0\u2872\0\u28b0\0\u28ee\0\u0c5a"+
    "\0\u292c\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u1cd2\0\u2a62\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u09ee\0\u2b5a\0\u2b98\0\u2bd6\0\u2c14\0\u2c52"+
    "\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88\0\u2dc6\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032"+
    "\0\u3070\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\u31e4\0\u05d0"+
    "\0\u3222\0\u3260\0\u329e\0\u05d0\0\u05d0\0\u32dc\0\u331a\0\u3358"+
    "\0\u3396\0\u05d0\0\u05d0\0\u05d0\0\u33d4\0\u3412\0\u3450\0\u348e"+
    "\0\u34cc\0\u350a\0\u0592\0\u3548\0\u3586\0\u35c4\0\u3602\0\u1b5e"+
    "\0\u1170\0\u3640\0\u367e\0\u36bc\0\u36fa\0\u11ae\0\u3738\0\u2c90"+
    "\0\u2d0c\0\u3776\0\u37b4\0\u37f2\0\u3830\0\u386e\0\u38ac\0\u38ea"+
    "\0\u05d0\0\u3928\0\u05d0\0\u3966\0\u39a4\0\u39e2\0\u3a20\0\u3a5e"+
    "\0\u3a9c\0\u3ada\0\u05d0\0\u05d0\0\u3b18\0\u3b56\0\u3b94\0\u3bd2"+
    "\0\u3c10\0\u3c4e\0\u3c8c\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\u3dc2"+
    "\0\u3e00\0\u3e3e\0\u1a28\0\u27f6\0\u3e7c\0\u3eba\0\u37b4\0\u3ef8"+
    "\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0\0\u402e\0\u406c\0\u05d0\0\u40aa"+
    "\0\u40e8\0\u4126\0\u4164\0\u41a2\0\u41e0\0\u421e\0\u425c\0\u429a"+
    "\0\u42d8\0\u4316\0\u4354\0\u4392\0\u43d0\0\u440e\0\u3eba\0\u444c"+
    "\0\u05d0\0\u448a\0\u44c8\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe"+
    "\0\u463c\0\u05d0\0\u467a\0\u46b8\0\u05d0\0\u46f6\0\u4734\0\u4772"+
    "\0\u47b0\0\u47ee\0\u482c\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962"+
    "\0\u49a0\0\u49de\0\u4a1c\0\u05d0\0\u05d0\0\u05d0\0\u05d0\0\u05d0"+
    "\0\u4a5a\0\u05d0\0\u05d0\0\u05d0\0\u4a98\0\u4ad6\0\u4b14\0\u045c"+
    "\0\u4b52\0\u4b90\0\u4bce\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04"+
    "\0\u4d42\0\u4d80\0\u4dbe\0\u4dfc\0\u05d0\0\u05d0\0\u4e3a\0\u4e78"+
    "\0\u4eb6\0\u4ef4\0\u05d0\0\u05d0\0\u4f32\0\u4f70\0\u4fae\0\u4fec"+
    "\0\u502a\0\u05d0\0\76\0\u05d0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\5\31\1\32\1\33\1\31\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\40"+
    "\1\46\1\47\1\40\1\50\1\51\1\52\1\40\1\53"+
    "\1\54\1\55\1\56\1\40\1\57\1\40\1\60\1\61"+
    "\1\62\77\0\2\3\1\0\1\3\76\0\1\63\1\0"+
    "\1\64\12\63\3\0\3\63\1\65\11\0\4\63\25\66"+
    "\3\63\6\67\1\70\5\67\1\0\3\67\1\71\35\67"+
    "\1\72\1\67\1\73\15\67\14\6\1\63\31\6\25\74"+
    "\3\6\5\0\1\63\1\0\1\64\1\75\3\63\2\75"+
    "\1\63\1\75\1\63\1\76\3\0\3\63\1\77\11\0"+
    "\2\63\1\75\1\63\25\66\3\63\5\0\1\100\1\0"+
    "\1\101\1\100\1\102\10\100\3\0\4\100\11\0\4\100"+
    "\25\66\3\100\5\0\1\63\1\0\1\64\2\63\1\103"+
    "\3\63\1\103\1\63\1\103\1\63\3\0\2\103\2\63"+
    "\11\0\1\103\3\63\25\66\1\103\1\63\1\103\5\0"+
    "\1\63\1\0\1\64\2\63\2\104\2\63\1\104\1\63"+
    "\1\104\1\63\3\0\2\104\2\63\11\0\2\104\2\63"+
    "\25\66\1\104\1\63\1\104\5\0\1\63\1\0\1\64"+
    "\1\75\3\63\1\75\1\105\1\63\1\75\1\63\1\76"+
    "\3\0\3\63\1\77\11\0\2\63\1\75\1\63\25\66"+
    "\3\63\5\0\1\63\1\0\1\64\1\75\3\63\2\75"+
    "\1\63\1\105\1\63\1\76\1\0\2\106\3\63\1\77"+
    "\11\0\2\63\1\75\1\63\25\66\3\63\5\0\1\63"+
    "\1\0\1\64\1\107\3\63\1\110\1\107\1\63\1\107"+
    "\1\63\1\111\3\0\3\63\1\77\11\0\2\63\1\107"+
    "\1\63\25\66\3\63\16\0\1\112\1\0\1\113\1\0"+
    "\1\114\2\115\21\0\25\116\21\0\1\112\1\0\1\113"+
    "\1\0\3\23\21\0\25\116\21\0\1\112\1\0\1\117"+
    "\1\0\3\23\21\0\25\116\10\0\1\120\1\0\1\64"+
    "\12\63\3\0\2\63\1\121\1\122\11\0\4\63\25\66"+
    "\3\63\22\0\3\123\4\0\5\31\1\124\3\31\3\0"+
    "\26\31\25\0\3\123\4\0\11\31\3\0\26\31\25\0"+
    "\3\123\4\0\10\31\1\125\3\0\26\31\25\0\3\123"+
    "\4\0\11\31\3\0\20\31\1\126\5\31\10\0\1\63"+
    "\1\0\1\64\2\63\2\127\2\63\1\127\1\63\1\127"+
    "\1\63\3\0\2\127\2\63\11\0\1\127\3\63\25\66"+
    "\1\127\1\63\1\127\5\0\1\63\1\0\1\64\1\75"+
    "\3\63\2\75\1\63\1\75\1\63\1\76\3\0\4\63"+
    "\11\0\2\63\1\75\1\63\25\66\3\63\5\0\1\63"+
    "\1\0\1\64\12\63\3\0\4\63\11\0\4\63\25\66"+
    "\3\63\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\26\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\16\40\1\133\7\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\1\40\1\134\11\40\1\135\2\40\1\136"+
    "\7\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\5\40\1\137\20\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\13\40\1\140\1\40\1\141\3\40\1\142\4\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\1\40\1\143\24\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\1\40\1\144"+
    "\24\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\15\40\1\145\10\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\146\10\40\1\147\7\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\150\3\40\1\151\14\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\23\40\1\152"+
    "\2\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\1\40\1\153\16\40\1\154\2\40"+
    "\1\155\2\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\1\40\1\156\3\40\1\157"+
    "\20\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\5\40\1\160\3\40\1\161\14\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\1\40\1\162\24\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\163\20\40\3\130\5\0\1\100\1\0\1\101\12\100"+
    "\3\0\4\100\11\0\4\100\25\66\1\100\1\102\1\100"+
    "\14\64\1\63\31\64\25\164\3\64\5\0\1\120\1\0"+
    "\1\64\12\63\3\0\2\63\1\121\1\120\11\0\4\63"+
    "\25\66\3\63\5\0\1\130\1\0\1\131\12\130\3\165"+
    "\4\130\11\66\3\130\26\66\3\130\6\67\1\166\75\67"+
    "\1\167\75\67\1\166\11\67\1\170\63\67\1\166\52\67"+
    "\1\171\22\67\1\166\43\67\1\172\23\67\5\6\1\173"+
    "\1\6\1\174\4\173\1\175\5\173\3\176\4\173\11\74"+
    "\3\173\26\74\3\173\5\0\1\63\1\0\1\64\1\75"+
    "\3\63\2\75\1\63\1\75\2\63\3\0\4\63\11\0"+
    "\2\63\1\75\1\63\25\66\3\63\5\0\1\63\1\0"+
    "\1\64\1\177\3\63\2\177\1\63\1\177\1\63\1\177"+
    "\3\0\4\63\11\0\4\63\25\66\3\63\5\0\1\100"+
    "\1\0\1\101\12\100\3\0\4\100\11\0\4\100\25\66"+
    "\3\100\14\101\1\100\61\101\5\0\1\103\1\0\1\200"+
    "\12\103\3\0\4\103\11\0\4\103\25\66\3\103\5\0"+
    "\1\63\1\0\1\64\1\75\3\63\1\75\1\201\1\63"+
    "\1\201\1\63\1\76\3\0\4\63\11\0\2\63\1\75"+
    "\1\63\25\66\3\63\16\0\1\112\1\0\1\202\1\0"+
    "\3\106\21\0\25\116\10\0\1\63\1\0\1\64\1\107"+
    "\3\63\2\107\1\63\1\107\1\63\1\203\3\0\4\63"+
    "\11\0\2\63\1\107\1\63\25\66\3\63\5\204\1\205"+
    "\1\204\1\206\1\207\3\205\1\210\1\207\1\205\1\207"+
    "\1\205\1\211\3\204\4\205\11\204\2\205\1\207\1\205"+
    "\25\212\3\205\2\213\1\214\1\213\1\215\1\111\1\213"+
    "\1\216\12\111\3\213\4\111\11\213\4\111\25\217\3\111"+
    "\17\0\1\220\2\0\1\221\2\222\70\0\1\220\1\202"+
    "\1\0\1\223\2\224\67\0\1\112\1\0\1\202\1\0"+
    "\1\114\2\225\21\0\25\116\21\0\1\112\1\0\1\202"+
    "\2\0\2\115\21\0\25\116\25\0\3\226\4\0\11\116"+
    "\3\0\26\116\22\0\1\220\1\202\1\0\1\227\2\224"+
    "\56\0\1\63\1\0\1\64\12\63\3\0\3\63\1\230"+
    "\11\0\4\63\25\66\3\63\5\0\1\120\1\0\1\64"+
    "\12\63\3\0\2\63\2\121\11\0\4\63\25\66\3\63"+
    "\22\0\3\123\4\0\11\31\56\0\3\123\4\0\3\31"+
    "\1\125\5\31\3\0\26\31\25\0\3\123\4\0\11\31"+
    "\3\0\11\31\1\231\14\31\10\0\1\127\1\0\1\232"+
    "\12\127\3\0\4\127\11\0\4\127\25\66\3\127\5\0"+
    "\1\130\1\0\1\131\12\130\3\0\4\130\11\0\4\130"+
    "\25\0\3\130\14\131\1\130\61\131\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\0\4\130\25\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\13\40\1\233\12\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\4\40\1\234"+
    "\21\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\1\40\1\235\24\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\15\40\1\236\3\40\1\237\4\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\21\40"+
    "\1\240\2\40\1\241\1\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\11\40\1\242"+
    "\14\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\22\40\1\243\3\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\3\40\1\244\16\40\1\245\3\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\13\40"+
    "\1\246\12\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\3\40\1\247\22\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\3\40\1\250\15\40\1\251\4\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\252\20\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\7\40\1\253\16\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\22\40\1\254\3\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\255\20\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\13\40\1\256\12\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\20\40\1\257\5\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\11\40\1\260"+
    "\4\40\1\261\7\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\2\40\1\262\23\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\11\40\1\263\14\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\1\40"+
    "\1\264\24\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\15\40\1\265\10\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\266\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\15\40\1\267"+
    "\10\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\20\40\1\270\5\40\3\130\5\64"+
    "\1\271\1\64\1\272\4\271\1\175\5\271\3\273\4\271"+
    "\11\164\3\271\26\164\3\271\5\0\1\130\1\0\1\131"+
    "\12\130\3\165\4\130\11\0\4\130\25\66\3\130\6\0"+
    "\1\274\67\0\6\67\1\166\12\67\1\275\62\67\1\166"+
    "\55\67\1\276\17\67\1\166\41\67\1\277\25\67\5\6"+
    "\1\173\1\6\1\174\4\173\1\175\5\173\3\6\4\173"+
    "\11\6\4\173\25\74\3\173\14\174\1\175\61\174\5\0"+
    "\1\175\1\0\1\272\12\175\3\0\4\175\11\0\4\175"+
    "\25\66\3\175\5\6\1\173\1\6\1\174\4\173\1\175"+
    "\5\173\3\176\4\173\11\6\4\173\25\74\3\173\5\0"+
    "\1\63\1\0\1\64\12\63\3\0\3\63\1\300\11\0"+
    "\4\63\25\66\3\63\14\200\1\103\31\200\25\301\3\200"+
    "\17\0\1\220\1\202\1\0\1\221\2\222\56\0\1\63"+
    "\1\0\1\64\1\107\3\63\2\107\1\63\1\107\2\63"+
    "\3\0\4\63\11\0\2\63\1\107\1\63\25\66\3\63"+
    "\14\204\1\302\66\204\1\205\1\204\1\206\4\205\1\303"+
    "\5\205\3\204\4\205\11\204\4\205\25\212\3\205\14\206"+
    "\1\303\31\206\25\304\3\206\5\204\1\205\1\204\1\206"+
    "\1\207\3\205\1\305\1\207\1\205\1\207\1\205\1\211"+
    "\3\204\4\205\11\204\2\205\1\207\1\205\25\212\3\205"+
    "\5\204\1\205\1\204\1\206\1\207\3\205\1\305\1\207"+
    "\1\205\1\207\1\205\1\306\3\204\4\205\11\204\2\205"+
    "\1\207\1\205\25\212\3\205\5\204\1\205\1\204\1\206"+
    "\1\207\3\205\1\305\1\207\1\205\1\207\2\205\3\204"+
    "\4\205\11\204\2\205\1\207\1\205\25\212\3\205\5\204"+
    "\1\307\1\204\1\310\4\307\1\311\5\307\3\312\4\307"+
    "\11\212\3\307\26\212\3\307\2\213\1\214\1\213\1\215"+
    "\71\213\2\0\1\214\73\0\2\216\1\313\1\216\1\314"+
    "\7\216\1\111\31\216\25\315\3\216\2\213\1\214\1\213"+
    "\1\215\1\316\1\213\1\317\12\316\3\320\4\316\11\217"+
    "\3\316\26\217\3\316\23\0\2\222\73\0\1\321\2\322"+
    "\73\0\3\222\73\0\1\323\2\324\73\0\1\325\2\224"+
    "\67\0\1\112\1\0\1\202\2\0\2\225\21\0\25\116"+
    "\25\0\3\226\21\0\25\116\25\0\3\123\4\0\11\31"+
    "\3\0\15\31\1\326\10\31\3\0\14\232\1\127\31\232"+
    "\25\327\3\232\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\5\40\1\330\20\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\331\20\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\21\40\1\332\4\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\21\40\1\333\4\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\160\20\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\4\40\1\334\15\40\1\335"+
    "\3\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\16\40\1\336\7\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\14\40\1\337\11\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\5\40\1\340\10\40"+
    "\1\341\7\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\20\40\1\342\5\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\1\40\1\343\24\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\21\40\1\344"+
    "\4\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\5\40\1\345\20\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\13\40\1\346\12\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\22\40\1\347\3\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\20\40\1\350\5\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\1\40"+
    "\1\351\24\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\16\40\1\352\7\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\353\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\16\40\1\354"+
    "\7\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\1\40\1\355\24\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\24\40\1\356\1\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\17\40\1\357\2\40"+
    "\1\360\3\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\13\40\1\361\12\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\25\40\1\362\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\13\40\1\363\12\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\16\40\1\362\7\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\16\40"+
    "\1\364\7\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\7\40\1\365\16\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\4\40\1\366\21\40\3\130\5\64\1\271\1\64"+
    "\1\272\4\271\1\175\5\271\3\64\4\271\11\64\4\271"+
    "\25\164\3\271\14\272\1\175\61\272\5\64\1\271\1\64"+
    "\1\272\4\271\1\175\5\271\3\273\4\271\11\64\4\271"+
    "\25\164\3\271\6\67\1\166\11\67\1\71\35\67\1\72"+
    "\1\67\1\73\23\67\1\166\56\67\1\367\16\67\1\166"+
    "\60\67\1\370\6\67\5\200\1\371\1\200\1\272\4\371"+
    "\1\175\5\371\3\372\4\371\11\301\3\371\26\301\3\371"+
    "\14\204\1\302\4\204\1\214\61\204\1\205\1\204\1\206"+
    "\4\205\1\303\4\205\1\373\3\204\4\205\11\204\4\205"+
    "\25\212\3\205\5\206\1\374\1\206\1\375\4\374\1\376"+
    "\5\374\3\377\4\374\11\304\3\374\26\304\3\374\5\204"+
    "\1\205\1\204\1\206\1\207\3\205\1\305\1\207\1\205"+
    "\1\207\1\205\1\u0100\3\204\4\205\11\204\2\205\1\207"+
    "\1\205\25\212\3\205\5\204\1\307\1\204\1\310\4\307"+
    "\1\311\5\307\3\204\4\307\11\204\4\307\25\204\3\307"+
    "\14\310\1\311\61\310\5\204\1\307\1\204\1\310\4\307"+
    "\1\311\4\307\1\u0101\3\204\4\307\11\204\4\307\25\204"+
    "\3\307\5\204\1\307\1\204\1\310\4\307\1\311\5\307"+
    "\3\312\4\307\11\204\4\307\25\212\3\307\2\64\1\313"+
    "\11\64\1\63\31\64\25\164\3\64\2\216\1\313\1\216"+
    "\1\314\1\u0102\1\216\1\u0103\4\u0102\1\u0104\5\u0102\3\u0105"+
    "\4\u0102\11\315\3\u0102\26\315\3\u0102\2\213\1\214\1\213"+
    "\1\215\1\316\1\213\1\317\12\316\3\213\4\316\11\213"+
    "\4\316\25\213\3\316\2\317\1\u0106\1\317\1\u0107\7\317"+
    "\1\316\61\317\2\213\1\214\1\213\1\215\1\316\1\213"+
    "\1\317\12\316\3\320\4\316\11\213\4\316\25\217\3\316"+
    "\22\0\1\u0108\76\0\2\322\73\0\1\u0109\2\324\73\0"+
    "\1\u010a\2\324\73\0\1\u010b\2\224\73\0\3\123\4\0"+
    "\11\31\3\0\3\31\1\u010c\22\31\3\0\5\232\1\u010d"+
    "\1\232\1\272\4\u010d\1\175\5\u010d\3\u010e\4\u010d\11\327"+
    "\3\u010d\26\327\3\u010d\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\1\40\1\u010f\24\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\u0110\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\5\40\1\u0111"+
    "\20\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\22\40\1\u0112\3\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\u0113\20\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\20\40\1\u0114\5\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\13\40\1\u0115\12\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\11\40"+
    "\1\u0116\14\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\20\40\1\u0117\5\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\u0118\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\11\40\1\u0119"+
    "\14\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\22\40\1\u011a\3\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\16\40\1\u011b\7\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\20\40\1\u011c\5\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\23\40\1\u011d\2\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\1\40"+
    "\1\u011e\24\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\20\40\1\u011f\5\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\4\40\1\u0120\21\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\22\40\1\u0121"+
    "\3\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\1\40\1\u0122\24\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\11\40\1\u0123\14\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\5\40\1\u0124\20\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\11\40\1\u0125\14\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\u0126\20\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\1\40\1\u0127\24\40\3\130"+
    "\6\67\1\166\43\67\1\u0128\31\67\1\166\61\67\1\u0129"+
    "\5\67\5\200\1\371\1\200\1\272\4\371\1\175\5\371"+
    "\3\200\4\371\11\200\4\371\25\301\3\371\5\200\1\371"+
    "\1\200\1\272\4\371\1\175\5\371\3\372\4\371\11\200"+
    "\4\371\25\301\3\371\5\206\1\374\1\206\1\375\4\374"+
    "\1\376\5\374\3\206\4\374\11\206\4\374\25\304\3\374"+
    "\14\375\1\376\61\375\5\204\1\u012a\1\204\1\375\4\u012a"+
    "\1\376\4\u012a\1\u012b\3\204\4\u012a\11\204\4\u012a\25\212"+
    "\3\u012a\5\206\1\374\1\206\1\375\4\374\1\376\5\374"+
    "\3\377\4\374\11\206\4\374\25\304\3\374\2\216\1\313"+
    "\1\216\1\314\1\u0102\1\216\1\u0103\4\u0102\1\u0104\5\u0102"+
    "\3\216\4\u0102\11\216\4\u0102\25\315\3\u0102\2\u0103\1\u012c"+
    "\1\u0103\1\u012d\7\u0103\1\u0104\61\u0103\2\213\1\214\1\213"+
    "\1\215\1\u0104\1\213\1\u0103\12\u0104\3\213\4\u0104\11\213"+
    "\4\u0104\25\217\3\u0104\2\216\1\313\1\216\1\314\1\u0102"+
    "\1\216\1\u0103\4\u0102\1\u0104\5\u0102\3\u0105\4\u0102\11\216"+
    "\4\u0102\25\315\3\u0102\2\131\1\u0106\11\131\1\130\61\131"+
    "\22\0\1\u012e\2\324\73\0\1\u012f\2\224\73\0\3\123"+
    "\4\0\11\31\3\0\11\31\1\u0130\14\31\3\0\5\232"+
    "\1\u010d\1\232\1\272\4\u010d\1\175\5\u010d\3\232\4\u010d"+
    "\11\232\4\u010d\25\327\3\u010d\5\232\1\u010d\1\232\1\272"+
    "\4\u010d\1\175\5\u010d\3\u010e\4\u010d\11\232\4\u010d\25\327"+
    "\3\u010d\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\15\40\1\u0131\10\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\1\40"+
    "\1\u0132\24\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\20\40\1\u0133\5\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\23\40\1\u0134\2\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\24\40\1\u0135"+
    "\1\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\15\40\1\u0136\10\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\16\40\1\u0137\7\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\3\40\1\u0138\22\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\2\40\1\u0139\23\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\11\40"+
    "\1\u013a\14\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\11\40\1\u013b\14\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\u013c\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\11\40\1\u013d"+
    "\14\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\16\40\1\u013e\7\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\20\40\1\u013f\5\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\4\40\1\u0140\21\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\5\40\1\u0141\20\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\7\40"+
    "\1\u0142\16\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\3\40\1\u0140\22\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\15\40\1\u0143\10\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\4\40\1\u0144"+
    "\21\40\3\130\6\67\1\166\57\67\1\u0145\15\67\1\166"+
    "\56\67\1\u0146\10\67\5\204\1\u012a\1\204\1\375\4\u012a"+
    "\1\376\5\u012a\3\204\4\u012a\11\204\4\u012a\25\212\3\u012a"+
    "\2\272\1\u012c\11\272\1\175\61\272\22\0\1\u0147\2\324"+
    "\73\0\3\123\4\0\11\31\3\0\17\31\1\u0148\6\31"+
    "\10\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\16\40\1\u0149\7\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\1\u014a\10\40\3\130\26\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\23\40\1\u014b\2\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\3\40"+
    "\1\u014c\22\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\5\40\1\u014d\20\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\1\40\1\u014e\24\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\5\40\1\u014f"+
    "\20\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\11\40\1\u0150\14\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\3\40\1\u0151\22\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\20\40\1\u0152\5\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\3\40\1\u0153\22\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\22\40"+
    "\1\u0154\3\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\21\40\1\u0155\4\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\1\40\1\u0156\24\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\1\40\1\u0157"+
    "\14\40\1\u0158\7\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\4\40\1\u0159\21\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\11\40\1\u0122\14\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\22\40"+
    "\1\u015a\3\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\5\40\1\u015b\20\40\3\130"+
    "\6\67\1\166\47\67\1\u015c\25\67\1\166\37\67\1\u015d"+
    "\27\67\22\0\3\123\4\0\11\31\3\0\1\31\1\u015e"+
    "\24\31\10\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\1\40\1\u015f\2\40\1\u0160\3\40\1\u0161\3\130\26\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\3\40\1\u0162\22\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\22\40"+
    "\1\u0163\3\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\20\40\1\u0164\5\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\20\40\1\u0165\5\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\21\40\1\u0166"+
    "\4\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\20\40\1\u0167\5\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\16\40\1\u0168\7\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\11\40\1\u0169\14\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\14\40\1\265\11\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\21\40"+
    "\1\u016a\4\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\21\40\1\u016b\4\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\21\40\1\u016c\4\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\1\40\1\u016d"+
    "\24\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\5\40\1\362\20\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\20\40\1\344\5\40\3\130\6\67\1\166\54\67\1\u016e"+
    "\20\67\1\166\11\67\1\u016f\55\67\22\0\3\123\4\0"+
    "\11\31\3\0\13\31\1\u0170\12\31\10\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\16\40\1\u0171"+
    "\7\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\15\40\1\u0172\10\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\u0173\20\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\22\40\1\u0174\3\40"+
    "\3\130\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\16\40\1\u0175\7\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\1\40"+
    "\1\u0176\24\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\4\40\1\u0177\21\40\3\130"+
    "\6\67\1\166\53\67\1\u015d\21\67\1\166\51\67\1\u0178"+
    "\15\67\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\13\40\1\u0179\12\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\22\40"+
    "\1\u017a\3\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\1\40\1\u017b\24\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\16\40\1\u017c\7\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\20\40\1\u017d"+
    "\5\40\3\130\5\0\1\130\1\0\1\131\12\130\3\132"+
    "\4\130\11\40\3\130\20\40\1\u017e\5\40\3\130\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\5\40\1\u017f\20\40\3\130\6\67\1\166\54\67\1\u0180"+
    "\12\67\5\0\1\130\1\0\1\131\12\130\3\132\4\130"+
    "\11\40\3\130\5\40\1\u0181\20\40\3\130\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\5\40"+
    "\1\u0182\20\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\13\40\1\362\12\40\3\130"+
    "\5\0\1\130\1\0\1\131\12\130\3\132\4\130\11\40"+
    "\3\130\20\40\1\u0183\5\40\3\130\5\0\1\130\1\0"+
    "\1\131\12\130\3\132\4\130\11\40\3\130\21\40\1\u0184"+
    "\4\40\3\130\6\67\1\166\54\67\1\u0185\12\67\5\0"+
    "\1\130\1\0\1\131\12\130\3\132\4\130\11\40\3\130"+
    "\1\40\1\u0186\24\40\3\130\5\0\1\130\1\0\1\131"+
    "\12\130\3\132\4\130\11\40\3\130\20\40\1\u0187\5\40"+
    "\3\130\6\67\1\166\55\67\1\u0188\11\67\5\0\1\130"+
    "\1\0\1\131\12\130\3\132\4\130\11\40\3\130\15\40"+
    "\1\u0189\10\40\3\130\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\16\40\1\u018a\7\40\3\130"+
    "\6\67\1\u018b\67\67\5\0\1\130\1\0\1\131\12\130"+
    "\3\132\4\130\11\40\3\130\16\40\1\u018c\7\40\3\130";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20584];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\60\1\2\0\2\1\1\0\1\1\3\0"+
    "\16\1\2\0\3\1\2\0\45\1\1\11\1\1\3\0"+
    "\4\1\1\0\2\1\5\0\2\1\1\0\2\1\1\11"+
    "\3\1\1\0\54\1\3\0\2\1\2\0\15\1\1\0"+
    "\45\1\2\0\57\1\2\0\33\1\3\0\24\1\2\0"+
    "\20\1\2\0\10\1\1\0\7\1\1\0\4\1\1\0"+
    "\2\1\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 76: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 77: break;
          case 3:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 78: break;
          case 4:
            { lexeme=yytext(); return ErrorSig;
            }
            // fall through
          case 79: break;
          case 5:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 80: break;
          case 6:
            { lexeme=yytext(); return ErrorOPARBo;
            }
            // fall through
          case 81: break;
          case 7:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 82: break;
          case 8:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 83: break;
          case 9:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 84: break;
          case 10:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 85: break;
          case 11:
            { lexeme=yytext(); return Coma;
            }
            // fall through
          case 86: break;
          case 12:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 87: break;
          case 13:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 88: break;
          case 14:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 89: break;
          case 15:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 90: break;
          case 16:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 91: break;
          case 17:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 92: break;
          case 18:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 93: break;
          case 19:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 94: break;
          case 20:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 95: break;
          case 21:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 96: break;
          case 22:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 97: break;
          case 23:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 98: break;
          case 24:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 99: break;
          case 25:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 100: break;
          case 26:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 101: break;
          case 27:
            { lexeme=yytext(); return ErrorID;
            }
            // fall through
          case 102: break;
          case 28:
            { lexeme=yytext(); return Texto;
            }
            // fall through
          case 103: break;
          case 29:
            { lexeme=yytext(); return ErrorSigP;
            }
            // fall through
          case 104: break;
          case 30:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 105: break;
          case 31:
            { lexeme=yytext(); return OPARBool;
            }
            // fall through
          case 106: break;
          case 32:
            { lexeme=yytext(); return ErrorSIGNOS1;
            }
            // fall through
          case 107: break;
          case 33:
            { lexeme=yytext(); return ErrorSIGNOS;
            }
            // fall through
          case 108: break;
          case 34:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 109: break;
          case 35:
            { lexeme=yytext(); return ErrorCer;
            }
            // fall through
          case 110: break;
          case 36:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 111: break;
          case 37:
            { lexeme=yytext(); return ErrorOp_Rel;
            }
            // fall through
          case 112: break;
          case 38:
            { lexeme=yytext(); return ErrorSIGNOS2;
            }
            // fall through
          case 113: break;
          case 39:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 114: break;
          case 40:
            { lexeme=yytext(); return ErrorOp_IN;
            }
            // fall through
          case 115: break;
          case 41:
            { lexeme=yytext(); return ErrorDec;
            }
            // fall through
          case 116: break;
          case 42:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 117: break;
          case 43:
            { lexeme=yytext(); return Decimal;
            }
            // fall through
          case 118: break;
          case 44:
            { lexeme=yytext(); return ErrorCom;
            }
            // fall through
          case 119: break;
          case 45:
            { lexeme=yytext(); return ErrorOp_Atr;
            }
            // fall through
          case 120: break;
          case 46:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 121: break;
          case 47:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 122: break;
          case 48:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 123: break;
          case 49:
            { lexeme=yytext(); return FunESPReal;
            }
            // fall through
          case 124: break;
          case 50:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 125: break;
          case 51:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 126: break;
          case 52:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 127: break;
          case 53:
            { lexeme=yytext(); return Desde;
            }
            // fall through
          case 128: break;
          case 54:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 129: break;
          case 55:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 130: break;
          case 56:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 131: break;
          case 57:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 132: break;
          case 58:
            { lexeme=yytext(); return Incluir;
            }
            // fall through
          case 133: break;
          case 59:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 134: break;
          case 60:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 135: break;
          case 61:
            { lexeme=yytext(); return Eliminar;
            }
            // fall through
          case 136: break;
          case 62:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 137: break;
          case 63:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 138: break;
          case 64:
            { lexeme=yytext(); return Estatico;
            }
            // fall through
          case 139: break;
          case 65:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 140: break;
          case 66:
            { lexeme=yytext(); return T_DisponibleP;
            }
            // fall through
          case 141: break;
          case 67:
            { lexeme=yytext(); return T_DisponibleM;
            }
            // fall through
          case 142: break;
          case 68:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 143: break;
          case 69:
            { lexeme=yytext(); return Destructor;
            }
            // fall through
          case 144: break;
          case 70:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 145: break;
          case 71:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 146: break;
          case 72:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 147: break;
          case 73:
            { lexeme=yytext(); return CadenaAEntero;
            }
            // fall through
          case 148: break;
          case 74:
            { lexeme=yytext(); return BiExt;
            }
            // fall through
          case 149: break;
          case 75:
            { lexeme=yytext(); return CadenaABoleano;
            }
            // fall through
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
