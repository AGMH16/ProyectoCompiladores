// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/java/gt/edu/url/compiladores/flexfiles/prueba.flex

package gt.edu.url.compiladores.prueba1;
import static gt.edu.url.compiladores.prueba1.Token.*;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class prueba2 {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\1\1\15\1\16\1\17\12\20\1\21\1\22"+
    "\1\23\1\24\1\25\2\0\14\26\1\27\2\26\1\30"+
    "\12\26\1\31\1\0\1\32\1\33\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\43\1\46\1\47\1\50\1\51\1\52\1\43\1\53"+
    "\1\54\1\55\1\56\1\57\4\43\1\60\1\61\1\62"+
    "\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\20\3\22\1\23\1\24\1\25"+
    "\17\26\1\27\1\3\1\30\1\20\1\31\1\3\1\0"+
    "\1\32\1\0\1\2\1\33\3\22\23\26\1\34\1\26"+
    "\3\0\2\2\1\33\2\22\26\26\1\15\1\0\1\2"+
    "\2\22\14\26\1\35\2\26\1\36\1\37\3\26\1\40"+
    "\1\41\1\26\2\22\2\26\1\42\6\26\1\43\1\44"+
    "\7\26\1\45\1\22\1\26\1\46\3\26\1\47\3\26"+
    "\1\45\4\26\1\45\1\22\1\50\6\26\1\45\4\26"+
    "\1\22\2\26\1\51\1\52\1\53\1\26\1\54\1\55"+
    "\1\26\1\56\3\26\1\57\2\26\1\60\1\26\1\61"+
    "\1\32\1\57";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\63\0\314\0\377\0\u0132"+
    "\0\63\0\314\0\u0165\0\u0198\0\63\0\u01cb\0\u01fe\0\63"+
    "\0\63\0\u0231\0\231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\63"+
    "\0\63\0\63\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc\0\u042f"+
    "\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\63\0\u062d\0\63\0\63\0\63\0\63\0\u0660"+
    "\0\63\0\u0693\0\u06c6\0\u06f9\0\u072c\0\u075f\0\u0792\0\u07c5"+
    "\0\u07f8\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0990\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\63"+
    "\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2"+
    "\0\u0e25\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u0c27\0\u1221\0\u1254\0\u1287"+
    "\0\u12ba\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f"+
    "\0\u1452\0\u1485\0\u14b8\0\u0330\0\u14eb\0\u151e\0\u0330\0\u0330"+
    "\0\u1551\0\u1584\0\u15b7\0\u0330\0\u0330\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u0330\0\u16e9\0\u171c\0\u174f\0\u1782\0\u17b5"+
    "\0\u17e8\0\u0330\0\u0330\0\u181b\0\u184e\0\u1881\0\u18b4\0\u18e7"+
    "\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u0330\0\u1a19\0\u1a4c"+
    "\0\u1a7f\0\u0330\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u0297\0\u1c4a\0\u0330\0\u1c7d\0\u1cb0\0\u1ce3"+
    "\0\u1d16\0\u1d49\0\u1d7c\0\u0330\0\u1daf\0\u1de2\0\u1e15\0\u1e48"+
    "\0\u1e7b\0\u1eae\0\u1ee1\0\u0330\0\u0330\0\u0330\0\u1f14\0\u0330"+
    "\0\u0330\0\u1f47\0\u0297\0\u1f7a\0\u1fad\0\u1fe0\0\u2013\0\u2046"+
    "\0\u2079\0\u0330\0\u20ac\0\u0330\0\u0330\0\u0330";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\2\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\33\1\41\1\42\1\43\1\44\1\45"+
    "\1\33\1\46\1\47\1\50\2\33\1\51\1\52\1\53"+
    "\1\54\64\0\2\3\1\0\1\3\102\0\1\55\62\0"+
    "\1\56\46\0\1\57\67\0\1\60\61\0\1\61\7\0"+
    "\1\56\53\0\1\61\6\0\1\56\51\0\1\62\3\0"+
    "\1\63\4\0\1\56\56\0\1\17\14\0\23\64\26\0"+
    "\2\55\62\0\2\55\55\0\1\65\5\0\3\25\3\0"+
    "\24\25\23\0\1\65\5\0\3\25\3\0\5\25\1\66"+
    "\16\25\23\0\1\65\5\0\3\25\3\0\17\25\1\67"+
    "\4\25\23\0\1\70\5\0\3\33\3\0\24\33\23\0"+
    "\1\70\5\0\3\33\3\0\15\33\1\71\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\72\10\33\1\73"+
    "\2\33\1\74\6\33\23\0\1\70\5\0\3\33\3\0"+
    "\5\33\1\75\16\33\23\0\1\70\5\0\3\33\3\0"+
    "\14\33\1\76\3\33\1\77\3\33\23\0\1\70\5\0"+
    "\3\33\3\0\1\33\1\100\22\33\23\0\1\70\5\0"+
    "\3\33\3\0\1\33\1\101\22\33\23\0\1\70\5\0"+
    "\3\33\3\0\14\33\1\102\7\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\103\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\104\3\33\1\105\12\33\23\0"+
    "\1\70\5\0\3\33\3\0\22\33\1\106\1\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\107\15\33\1\110"+
    "\2\33\1\111\1\33\23\0\1\70\5\0\3\33\3\0"+
    "\5\33\1\112\16\33\23\0\1\70\5\0\3\33\3\0"+
    "\11\33\1\113\12\33\23\0\1\70\5\0\3\33\3\0"+
    "\5\33\1\114\16\33\64\0\1\57\21\0\1\115\42\0"+
    "\13\116\1\117\47\116\2\63\1\120\1\63\1\121\56\63"+
    "\20\0\1\122\5\0\3\64\3\0\24\64\23\0\1\65"+
    "\5\0\3\25\52\0\1\65\5\0\3\25\3\0\21\25"+
    "\1\123\2\25\23\0\1\65\5\0\3\25\3\0\11\25"+
    "\1\124\12\25\23\0\1\70\14\0\23\33\23\0\1\70"+
    "\5\0\3\33\3\0\12\33\1\125\11\33\23\0\1\70"+
    "\5\0\3\33\3\0\4\33\1\126\17\33\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\127\22\33\23\0\1\70"+
    "\5\0\3\33\3\0\14\33\1\130\7\33\23\0\1\70"+
    "\5\0\3\33\3\0\3\33\1\131\17\33\1\132\23\0"+
    "\1\70\5\0\3\33\3\0\21\33\1\133\2\33\23\0"+
    "\1\70\5\0\3\33\3\0\3\33\1\134\20\33\23\0"+
    "\1\70\5\0\3\33\3\0\12\33\1\135\11\33\23\0"+
    "\1\70\5\0\3\33\3\0\3\33\1\136\20\33\23\0"+
    "\1\70\5\0\3\33\3\0\3\33\1\131\14\33\1\137"+
    "\3\33\23\0\1\70\5\0\3\33\3\0\5\33\1\140"+
    "\16\33\23\0\1\70\5\0\3\33\3\0\21\33\1\141"+
    "\2\33\23\0\1\70\5\0\3\33\3\0\5\33\1\142"+
    "\16\33\23\0\1\70\5\0\3\33\3\0\12\33\1\143"+
    "\11\33\23\0\1\70\5\0\3\33\3\0\17\33\1\144"+
    "\4\33\23\0\1\70\5\0\3\33\3\0\11\33\1\145"+
    "\3\33\1\146\6\33\23\0\1\70\5\0\3\33\3\0"+
    "\2\33\1\147\21\33\23\0\1\70\5\0\3\33\3\0"+
    "\1\33\1\150\22\33\23\0\1\70\5\0\3\33\3\0"+
    "\14\33\1\151\7\33\23\0\1\70\5\0\3\33\3\0"+
    "\17\33\1\152\4\33\15\0\1\153\5\0\1\115\42\0"+
    "\13\116\1\154\62\116\1\154\3\116\1\155\43\116\2\0"+
    "\1\120\100\0\1\122\14\0\23\64\23\0\1\65\5\0"+
    "\3\25\3\0\15\25\1\156\6\25\23\0\1\65\5\0"+
    "\3\25\3\0\14\25\1\157\7\25\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\160\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\161\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\20\33\1\162\3\33\23\0\1\70\5\0"+
    "\3\33\3\0\20\33\1\163\3\33\23\0\1\70\5\0"+
    "\3\33\3\0\17\33\1\164\4\33\23\0\1\70\5\0"+
    "\3\33\3\0\15\33\1\165\6\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\166\7\33\1\167\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\170\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\20\33\1\171\3\33\23\0"+
    "\1\70\5\0\3\33\3\0\5\33\1\172\16\33\23\0"+
    "\1\70\5\0\3\33\3\0\21\33\1\173\2\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\174\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\15\33\1\175\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\14\33\1\176\7\33\23\0"+
    "\1\70\5\0\3\33\3\0\15\33\1\177\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\200\22\33\23\0"+
    "\1\70\5\0\3\33\3\0\23\33\1\201\23\0\1\70"+
    "\5\0\3\33\3\0\16\33\1\202\5\33\23\0\1\70"+
    "\5\0\3\33\3\0\12\33\1\203\11\33\23\0\1\70"+
    "\5\0\3\33\3\0\12\33\1\204\11\33\23\0\1\70"+
    "\5\0\3\33\3\0\15\33\1\205\6\33\23\0\1\70"+
    "\5\0\3\33\3\0\4\33\1\206\17\33\40\0\23\64"+
    "\3\0\13\116\1\154\3\116\1\120\43\116\20\0\1\65"+
    "\5\0\3\25\3\0\4\25\1\207\17\25\23\0\1\65"+
    "\5\0\3\25\3\0\3\25\1\210\20\25\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\211\22\33\23\0\1\70"+
    "\5\0\3\33\3\0\14\33\1\212\7\33\23\0\1\70"+
    "\5\0\3\33\3\0\5\33\1\213\16\33\23\0\1\70"+
    "\5\0\3\33\3\0\21\33\1\214\2\33\23\0\1\70"+
    "\5\0\3\33\3\0\5\33\1\215\16\33\23\0\1\70"+
    "\5\0\3\33\3\0\12\33\1\216\11\33\23\0\1\70"+
    "\5\0\3\33\3\0\17\33\1\217\4\33\23\0\1\70"+
    "\5\0\3\33\3\0\14\33\1\220\7\33\23\0\1\70"+
    "\5\0\3\33\3\0\11\33\1\221\12\33\23\0\1\70"+
    "\5\0\3\33\3\0\15\33\1\222\6\33\23\0\1\70"+
    "\5\0\3\33\3\0\17\33\1\223\4\33\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\224\22\33\23\0\1\70"+
    "\5\0\3\33\3\0\4\33\1\225\17\33\23\0\1\70"+
    "\5\0\3\33\3\0\21\33\1\226\2\33\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\227\22\33\23\0\1\70"+
    "\5\0\3\33\3\0\11\33\1\230\12\33\23\0\1\70"+
    "\5\0\3\33\3\0\11\33\1\231\12\33\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\232\22\33\23\0\1\65"+
    "\5\0\3\25\3\0\15\25\1\233\6\25\23\0\1\65"+
    "\5\0\3\25\3\0\11\25\1\234\12\25\23\0\1\70"+
    "\5\0\3\33\3\0\14\33\1\235\7\33\23\0\1\70"+
    "\5\0\3\33\3\0\1\33\1\236\22\33\23\0\1\70"+
    "\5\0\3\33\3\0\17\33\1\237\4\33\23\0\1\70"+
    "\5\0\3\33\3\0\13\33\1\240\10\33\23\0\1\70"+
    "\5\0\3\33\3\0\23\33\1\241\23\0\1\70\5\0"+
    "\3\33\3\0\15\33\1\242\6\33\23\0\1\70\5\0"+
    "\3\33\3\0\3\33\1\243\20\33\23\0\1\70\5\0"+
    "\3\33\3\0\2\33\1\244\21\33\23\0\1\70\5\0"+
    "\3\33\3\0\14\33\1\245\7\33\23\0\1\70\5\0"+
    "\3\33\3\0\15\33\1\246\6\33\23\0\1\70\5\0"+
    "\3\33\3\0\17\33\1\247\4\33\23\0\1\70\5\0"+
    "\3\33\3\0\4\33\1\250\17\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\251\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\3\33\1\250\20\33\23\0\1\70\5\0"+
    "\3\33\3\0\4\33\1\252\17\33\23\0\1\65\5\0"+
    "\3\25\3\0\20\25\1\253\3\25\23\0\1\65\5\0"+
    "\3\25\3\0\16\25\1\254\5\25\23\0\1\70\5\0"+
    "\3\33\3\0\15\33\1\255\6\33\23\0\1\70\5\0"+
    "\3\33\3\0\22\33\1\256\1\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\257\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\260\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\5\33\1\261\16\33\23\0\1\70\5\0"+
    "\3\33\3\0\11\33\1\262\12\33\23\0\1\70\5\0"+
    "\3\33\3\0\3\33\1\263\20\33\23\0\1\70\5\0"+
    "\3\33\3\0\20\33\1\264\3\33\23\0\1\70\5\0"+
    "\3\33\3\0\1\33\1\265\22\33\23\0\1\70\5\0"+
    "\3\33\3\0\1\33\1\266\13\33\1\266\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\4\33\1\267\17\33\23\0"+
    "\1\70\5\0\3\33\3\0\5\33\1\270\16\33\23\0"+
    "\1\65\5\0\3\25\3\0\1\25\1\271\22\25\23\0"+
    "\1\70\5\0\3\33\3\0\3\33\1\272\20\33\23\0"+
    "\1\70\5\0\3\33\3\0\14\33\1\273\7\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\274\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\20\33\1\275\3\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\276\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\11\33\1\277\12\33\23\0"+
    "\1\70\5\0\3\33\3\0\20\33\1\300\3\33\23\0"+
    "\1\70\5\0\3\33\3\0\20\33\1\301\3\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\302\22\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\171\4\33\23\0"+
    "\1\65\5\0\3\25\3\0\12\25\1\303\11\25\23\0"+
    "\1\70\5\0\3\33\3\0\21\33\1\304\2\33\23\0"+
    "\1\70\5\0\3\33\3\0\21\33\1\305\2\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\306\22\33\23\0"+
    "\1\70\5\0\3\33\3\0\4\33\1\307\17\33\23\0"+
    "\1\70\5\0\3\33\3\0\15\33\1\310\6\33\23\0"+
    "\1\70\5\0\3\33\3\0\1\33\1\311\22\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\312\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\5\33\1\313\16\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\314\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\17\33\1\315\4\33\23\0"+
    "\1\70\5\0\3\33\3\0\20\33\1\316\3\33\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8415];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\3\1\1\11"+
    "\2\1\2\11\6\1\3\11\17\1\1\11\1\1\4\11"+
    "\1\0\1\11\1\0\32\1\3\0\1\11\33\1\1\0"+
    "\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  prueba2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return ERROR;
            }
            // fall through
          case 50: break;
          case 2:
            { /*Ignore*/
            }
            // fall through
          case 51: break;
          case 3:
            { lexeme=yytext(); return Op_logico;
            }
            // fall through
          case 52: break;
          case 4:
            { lexeme=yytext(); return Comillas;
            }
            // fall through
          case 53: break;
          case 5:
            { lexeme=yytext(); return Mod;
            }
            // fall through
          case 54: break;
          case 6:
            { lexeme=yytext(); return Parentesis_a;
            }
            // fall through
          case 55: break;
          case 7:
            { lexeme=yytext(); return Parentesis_c;
            }
            // fall through
          case 56: break;
          case 8:
            { lexeme=yytext(); return Multiplicacion;
            }
            // fall through
          case 57: break;
          case 9:
            { lexeme=yytext(); return Suma;
            }
            // fall through
          case 58: break;
          case 10:
            { lexeme=yytext(); return Resta;
            }
            // fall through
          case 59: break;
          case 11:
            { lexeme=yytext(); return Punto;
            }
            // fall through
          case 60: break;
          case 12:
            { lexeme=yytext(); return Division;
            }
            // fall through
          case 61: break;
          case 13:
            { lexeme=yytext(); return Numero;
            }
            // fall through
          case 62: break;
          case 14:
            { lexeme=yytext(); return Dos_puntos;
            }
            // fall through
          case 63: break;
          case 15:
            { lexeme=yytext(); return P_coma;
            }
            // fall through
          case 64: break;
          case 16:
            { lexeme = yytext(); return Op_relacional;
            }
            // fall through
          case 65: break;
          case 17:
            { lexeme=yytext(); return Igual;
            }
            // fall through
          case 66: break;
          case 18:
            { lexeme=yytext(); return NameClass;
            }
            // fall through
          case 67: break;
          case 19:
            { lexeme = yytext(); return Corchete_a;
            }
            // fall through
          case 68: break;
          case 20:
            { lexeme = yytext(); return Corchete_c;
            }
            // fall through
          case 69: break;
          case 21:
            { lexeme=yytext(); return Exponente;
            }
            // fall through
          case 70: break;
          case 22:
            { lexeme=yytext(); return Identificador;
            }
            // fall through
          case 71: break;
          case 23:
            { lexeme=yytext(); return Llave_a;
            }
            // fall through
          case 72: break;
          case 24:
            { lexeme=yytext(); return Llave_c;
            }
            // fall through
          case 73: break;
          case 25:
            { lexeme = yytext(); return Op_atribucion;
            }
            // fall through
          case 74: break;
          case 26:
            { lexeme = yytext(); return Op_incremento;
            }
            // fall through
          case 75: break;
          case 27:
            { lexeme=yytext(); return ErrorNum;
            }
            // fall through
          case 76: break;
          case 28:
            { lexeme=yytext(); return Si;
            }
            // fall through
          case 77: break;
          case 29:
            { lexeme=yytext(); return Leer;
            }
            // fall through
          case 78: break;
          case 30:
            { lexeme=yytext(); return Nulo;
            }
            // fall through
          case 79: break;
          case 31:
            { lexeme=yytext(); return Para;
            }
            // fall through
          case 80: break;
          case 32:
            { lexeme=yytext(); return T_dato;
            }
            // fall through
          case 81: break;
          case 33:
            { lexeme=yytext(); return Sino;
            }
            // fall through
          case 82: break;
          case 34:
            { lexeme=yytext(); return Clase;
            }
            // fall through
          case 83: break;
          case 35:
            { lexeme = yytext(); return Op_booleano;
            }
            // fall through
          case 84: break;
          case 36:
            { lexeme=yytext(); return Hacer;
            }
            // fall through
          case 85: break;
          case 37:
            { lexeme=yytext(); return Metodo;
            }
            // fall through
          case 86: break;
          case 38:
            { lexeme=yytext(); return Cadena;
            }
            // fall through
          case 87: break;
          case 39:
            { lexeme=yytext(); return Entero;
            }
            // fall through
          case 88: break;
          case 40:
            { lexeme=yytext(); return Boleano;
            }
            // fall through
          case 89: break;
          case 41:
            { lexeme=yytext(); return Devolver;
            }
            // fall through
          case 90: break;
          case 42:
            { lexeme=yytext(); return Entonces;
            }
            // fall through
          case 91: break;
          case 43:
            { lexeme=yytext(); return Escribir;
            }
            // fall through
          case 92: break;
          case 44:
            { lexeme=yytext(); return Mientras;
            }
            // fall through
          case 93: break;
          case 45:
            { lexeme=yytext(); return T_Disponible;
            }
            // fall through
          case 94: break;
          case 46:
            { lexeme=yytext(); return Principal;
            }
            // fall through
          case 95: break;
          case 47:
            { lexeme=yytext(); return Propiedad;
            }
            // fall through
          case 96: break;
          case 48:
            { lexeme=yytext(); return Instanciar;
            }
            // fall through
          case 97: break;
          case 49:
            { lexeme=yytext(); return Constructor;
            }
            // fall through
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
